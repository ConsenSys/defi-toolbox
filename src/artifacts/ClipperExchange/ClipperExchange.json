{"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ERC20":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.","kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"constructor":{"details":"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}},"version":1},"evm":{"bytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:2039:15","statements":[{"nodeType":"YulBlock","src":"6:3:15","statements":[]},{"body":{"nodeType":"YulBlock","src":"78:845:15","statements":[{"body":{"nodeType":"YulBlock","src":"127:24:15","statements":[{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"136:5:15"},{"name":"array","nodeType":"YulIdentifier","src":"143:5:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"129:6:15"},"nodeType":"YulFunctionCall","src":"129:20:15"},"nodeType":"YulExpressionStatement","src":"129:20:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"106:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"114:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"102:3:15"},"nodeType":"YulFunctionCall","src":"102:17:15"},{"name":"end","nodeType":"YulIdentifier","src":"121:3:15"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"98:3:15"},"nodeType":"YulFunctionCall","src":"98:27:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"91:6:15"},"nodeType":"YulFunctionCall","src":"91:35:15"},"nodeType":"YulIf","src":"88:2:15"},{"nodeType":"YulVariableDeclaration","src":"160:23:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"176:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"170:5:15"},"nodeType":"YulFunctionCall","src":"170:13:15"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"164:2:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"192:28:15","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"210:2:15","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"214:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"206:3:15"},"nodeType":"YulFunctionCall","src":"206:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"218:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"202:3:15"},"nodeType":"YulFunctionCall","src":"202:18:15"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"196:2:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"243:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"245:16:15"},"nodeType":"YulFunctionCall","src":"245:18:15"},"nodeType":"YulExpressionStatement","src":"245:18:15"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"235:2:15"},{"name":"_2","nodeType":"YulIdentifier","src":"239:2:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"232:2:15"},"nodeType":"YulFunctionCall","src":"232:10:15"},"nodeType":"YulIf","src":"229:2:15"},{"nodeType":"YulVariableDeclaration","src":"274:17:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"288:2:15","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"284:3:15"},"nodeType":"YulFunctionCall","src":"284:7:15"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"278:2:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"300:23:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"320:2:15","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"314:5:15"},"nodeType":"YulFunctionCall","src":"314:9:15"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"304:6:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"332:71:15","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"354:6:15"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"378:2:15"},{"kind":"number","nodeType":"YulLiteral","src":"382:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"374:3:15"},"nodeType":"YulFunctionCall","src":"374:13:15"},{"name":"_3","nodeType":"YulIdentifier","src":"389:2:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"370:3:15"},"nodeType":"YulFunctionCall","src":"370:22:15"},{"kind":"number","nodeType":"YulLiteral","src":"394:2:15","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"366:3:15"},"nodeType":"YulFunctionCall","src":"366:31:15"},{"name":"_3","nodeType":"YulIdentifier","src":"399:2:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"362:3:15"},"nodeType":"YulFunctionCall","src":"362:40:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"350:3:15"},"nodeType":"YulFunctionCall","src":"350:53:15"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"336:10:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"462:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"464:16:15"},"nodeType":"YulFunctionCall","src":"464:18:15"},"nodeType":"YulExpressionStatement","src":"464:18:15"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"421:10:15"},{"name":"_2","nodeType":"YulIdentifier","src":"433:2:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"418:2:15"},"nodeType":"YulFunctionCall","src":"418:18:15"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"441:10:15"},{"name":"memPtr","nodeType":"YulIdentifier","src":"453:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"438:2:15"},"nodeType":"YulFunctionCall","src":"438:22:15"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"415:2:15"},"nodeType":"YulFunctionCall","src":"415:46:15"},"nodeType":"YulIf","src":"412:2:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"500:2:15","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"504:10:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"493:6:15"},"nodeType":"YulFunctionCall","src":"493:22:15"},"nodeType":"YulExpressionStatement","src":"493:22:15"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"531:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"539:2:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"524:6:15"},"nodeType":"YulFunctionCall","src":"524:18:15"},"nodeType":"YulExpressionStatement","src":"524:18:15"},{"nodeType":"YulVariableDeclaration","src":"551:14:15","value":{"kind":"number","nodeType":"YulLiteral","src":"561:4:15","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"555:2:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"611:24:15","statements":[{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"620:5:15"},{"name":"array","nodeType":"YulIdentifier","src":"627:5:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"613:6:15"},"nodeType":"YulFunctionCall","src":"613:20:15"},"nodeType":"YulExpressionStatement","src":"613:20:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"588:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"596:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"584:3:15"},"nodeType":"YulFunctionCall","src":"584:15:15"},{"name":"_4","nodeType":"YulIdentifier","src":"601:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"580:3:15"},"nodeType":"YulFunctionCall","src":"580:24:15"},{"name":"end","nodeType":"YulIdentifier","src":"606:3:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"577:2:15"},"nodeType":"YulFunctionCall","src":"577:33:15"},"nodeType":"YulIf","src":"574:2:15"},{"nodeType":"YulVariableDeclaration","src":"644:14:15","value":{"name":"array","nodeType":"YulIdentifier","src":"653:5:15"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"648:1:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"713:87:15","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"742:6:15"},{"name":"i","nodeType":"YulIdentifier","src":"750:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"738:3:15"},"nodeType":"YulFunctionCall","src":"738:14:15"},{"name":"_4","nodeType":"YulIdentifier","src":"754:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"734:3:15"},"nodeType":"YulFunctionCall","src":"734:23:15"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"773:6:15"},{"name":"i","nodeType":"YulIdentifier","src":"781:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"769:3:15"},"nodeType":"YulFunctionCall","src":"769:14:15"},{"name":"_4","nodeType":"YulIdentifier","src":"785:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"765:3:15"},"nodeType":"YulFunctionCall","src":"765:23:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"759:5:15"},"nodeType":"YulFunctionCall","src":"759:30:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"727:6:15"},"nodeType":"YulFunctionCall","src":"727:63:15"},"nodeType":"YulExpressionStatement","src":"727:63:15"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"678:1:15"},{"name":"_1","nodeType":"YulIdentifier","src":"681:2:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"675:2:15"},"nodeType":"YulFunctionCall","src":"675:9:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"685:19:15","statements":[{"nodeType":"YulAssignment","src":"687:15:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"696:1:15"},{"name":"_4","nodeType":"YulIdentifier","src":"699:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"692:3:15"},"nodeType":"YulFunctionCall","src":"692:10:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"687:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"671:3:15","statements":[]},"src":"667:133:15"},{"body":{"nodeType":"YulBlock","src":"830:63:15","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"859:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"867:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"855:3:15"},"nodeType":"YulFunctionCall","src":"855:15:15"},{"name":"_4","nodeType":"YulIdentifier","src":"872:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"851:3:15"},"nodeType":"YulFunctionCall","src":"851:24:15"},{"name":"array","nodeType":"YulIdentifier","src":"877:5:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"844:6:15"},"nodeType":"YulFunctionCall","src":"844:39:15"},"nodeType":"YulExpressionStatement","src":"844:39:15"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"815:1:15"},{"name":"_1","nodeType":"YulIdentifier","src":"818:2:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"812:2:15"},"nodeType":"YulFunctionCall","src":"812:9:15"},"nodeType":"YulIf","src":"809:2:15"},{"nodeType":"YulAssignment","src":"902:15:15","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"911:6:15"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"902:5:15"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"52:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"60:3:15","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"68:5:15","type":""}],"src":"14:909:15"},{"body":{"nodeType":"YulBlock","src":"1046:474:15","statements":[{"body":{"nodeType":"YulBlock","src":"1092:26:15","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1101:6:15"},{"name":"value0","nodeType":"YulIdentifier","src":"1109:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1094:6:15"},"nodeType":"YulFunctionCall","src":"1094:22:15"},"nodeType":"YulExpressionStatement","src":"1094:22:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1067:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"1076:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1063:3:15"},"nodeType":"YulFunctionCall","src":"1063:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"1088:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1059:3:15"},"nodeType":"YulFunctionCall","src":"1059:32:15"},"nodeType":"YulIf","src":"1056:2:15"},{"nodeType":"YulVariableDeclaration","src":"1127:30:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1147:9:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1141:5:15"},"nodeType":"YulFunctionCall","src":"1141:16:15"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1131:6:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1166:28:15","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1184:2:15","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1188:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1180:3:15"},"nodeType":"YulFunctionCall","src":"1180:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"1192:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1176:3:15"},"nodeType":"YulFunctionCall","src":"1176:18:15"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1170:2:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"1221:26:15","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1230:6:15"},{"name":"value0","nodeType":"YulIdentifier","src":"1238:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1223:6:15"},"nodeType":"YulFunctionCall","src":"1223:22:15"},"nodeType":"YulExpressionStatement","src":"1223:22:15"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1209:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"1217:2:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1206:2:15"},"nodeType":"YulFunctionCall","src":"1206:14:15"},"nodeType":"YulIf","src":"1203:2:15"},{"nodeType":"YulAssignment","src":"1256:71:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1299:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"1310:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1295:3:15"},"nodeType":"YulFunctionCall","src":"1295:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1319:7:15"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1266:28:15"},"nodeType":"YulFunctionCall","src":"1266:61:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1256:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"1336:41:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1362:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"1373:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1358:3:15"},"nodeType":"YulFunctionCall","src":"1358:18:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1352:5:15"},"nodeType":"YulFunctionCall","src":"1352:25:15"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1340:8:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"1406:26:15","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"1415:6:15"},{"name":"value1","nodeType":"YulIdentifier","src":"1423:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1408:6:15"},"nodeType":"YulFunctionCall","src":"1408:22:15"},"nodeType":"YulExpressionStatement","src":"1408:22:15"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1392:8:15"},{"name":"_1","nodeType":"YulIdentifier","src":"1402:2:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1389:2:15"},"nodeType":"YulFunctionCall","src":"1389:16:15"},"nodeType":"YulIf","src":"1386:2:15"},{"nodeType":"YulAssignment","src":"1441:73:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1484:9:15"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1495:8:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1480:3:15"},"nodeType":"YulFunctionCall","src":"1480:24:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1506:7:15"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1451:28:15"},"nodeType":"YulFunctionCall","src":"1451:63:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1441:6:15"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1004:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1015:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1027:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1035:6:15","type":""}],"src":"928:592:15"},{"body":{"nodeType":"YulBlock","src":"1580:325:15","statements":[{"nodeType":"YulAssignment","src":"1590:22:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1604:1:15","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"1607:4:15"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1600:3:15"},"nodeType":"YulFunctionCall","src":"1600:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1590:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"1621:38:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1651:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"1657:1:15","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1647:3:15"},"nodeType":"YulFunctionCall","src":"1647:12:15"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"1625:18:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"1698:31:15","statements":[{"nodeType":"YulAssignment","src":"1700:27:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1714:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"1722:4:15","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1710:3:15"},"nodeType":"YulFunctionCall","src":"1710:17:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1700:6:15"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1678:18:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1671:6:15"},"nodeType":"YulFunctionCall","src":"1671:26:15"},"nodeType":"YulIf","src":"1668:2:15"},{"body":{"nodeType":"YulBlock","src":"1788:111:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1809:1:15","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1816:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1821:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1812:3:15"},"nodeType":"YulFunctionCall","src":"1812:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1802:6:15"},"nodeType":"YulFunctionCall","src":"1802:31:15"},"nodeType":"YulExpressionStatement","src":"1802:31:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1853:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1856:4:15","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1846:6:15"},"nodeType":"YulFunctionCall","src":"1846:15:15"},"nodeType":"YulExpressionStatement","src":"1846:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1881:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1884:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1874:6:15"},"nodeType":"YulFunctionCall","src":"1874:15:15"},"nodeType":"YulExpressionStatement","src":"1874:15:15"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1744:18:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1767:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"1775:2:15","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1764:2:15"},"nodeType":"YulFunctionCall","src":"1764:14:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1741:2:15"},"nodeType":"YulFunctionCall","src":"1741:38:15"},"nodeType":"YulIf","src":"1738:2:15"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1560:4:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1569:6:15","type":""}],"src":"1525:380:15"},{"body":{"nodeType":"YulBlock","src":"1942:95:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1959:1:15","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1966:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1971:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1962:3:15"},"nodeType":"YulFunctionCall","src":"1962:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1952:6:15"},"nodeType":"YulFunctionCall","src":"1952:31:15"},"nodeType":"YulExpressionStatement","src":"1952:31:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1999:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2002:4:15","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1992:6:15"},"nodeType":"YulFunctionCall","src":"1992:15:15"},"nodeType":"YulExpressionStatement","src":"1992:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2023:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2026:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2016:6:15"},"nodeType":"YulFunctionCall","src":"2016:15:15"},"nodeType":"YulExpressionStatement","src":"2016:15:15"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1910:127:15"}]},"contents":"{\n    { }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(array, array) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(array, array) }\n        let i := array\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        if gt(i, _1)\n        {\n            mstore(add(add(memPtr, _1), _4), array)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(value0, value0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(value1, value1) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n}","id":15,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b5060405162000b4738038062000b478339810160408190526200003491620001c1565b81516200004990600390602085019062000068565b5080516200005f90600490602084019062000068565b5050506200027b565b828054620000769062000228565b90600052602060002090601f0160209004810192826200009a5760008555620000e5565b82601f10620000b557805160ff1916838001178555620000e5565b82800160010185558215620000e5579182015b82811115620000e5578251825591602001919060010190620000c8565b50620000f3929150620000f7565b5090565b5b80821115620000f35760008155600101620000f8565b600082601f8301126200011f578081fd5b81516001600160401b03808211156200013c576200013c62000265565b604051601f8301601f19908116603f0116810190828211818310171562000167576200016762000265565b8160405283815260209250868385880101111562000183578485fd5b8491505b83821015620001a6578582018301518183018401529082019062000187565b83821115620001b757848385830101525b9695505050505050565b60008060408385031215620001d4578182fd5b82516001600160401b0380821115620001eb578384fd5b620001f9868387016200010e565b935060208501519150808211156200020f578283fd5b506200021e858286016200010e565b9150509250929050565b600181811c908216806200023d57607f821691505b602082108114156200025f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6108bc806200028b6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101c6565b6040516100c391906107d4565b60405180910390f35b6100df6100da3660046107ab565b610258565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f366004610770565b61026e565b604051601281526020016100c3565b6100df6101313660046107ab565b61031d565b6100f361014436600461071d565b6001600160a01b031660009081526020819052604090205490565b6100b6610359565b6100df6101753660046107ab565b610368565b6100df6101883660046107ab565b610401565b6100f361019b36600461073e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101d59061084b565b80601f01602080910402602001604051908101604052809291908181526020018280546102019061084b565b801561024e5780601f106102235761010080835404028352916020019161024e565b820191906000526020600020905b81548152906001019060200180831161023157829003601f168201915b5050505050905090565b600061026533848461040e565b50600192915050565b600061027b848484610532565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103055760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b610312853385840361040e565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610265918590610354908690610827565b61040e565b6060600480546101d59061084b565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156103ea5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016102fc565b6103f7338585840361040e565b5060019392505050565b6000610265338484610532565b6001600160a01b0383166104705760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016102fc565b6001600160a01b0382166104d15760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016102fc565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166105965760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016102fc565b6001600160a01b0382166105f85760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016102fc565b6001600160a01b038316600090815260208190526040902054818110156106705760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016102fc565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106a7908490610827565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106f391815260200190565b60405180910390a350505050565b80356001600160a01b038116811461071857600080fd5b919050565b60006020828403121561072e578081fd5b61073782610701565b9392505050565b60008060408385031215610750578081fd5b61075983610701565b915061076760208401610701565b90509250929050565b600080600060608486031215610784578081fd5b61078d84610701565b925061079b60208501610701565b9150604084013590509250925092565b600080604083850312156107bd578182fd5b6107c683610701565b946020939093013593505050565b6000602080835283518082850152825b81811015610800578581018301518582016040015282016107e4565b818111156108115783604083870101525b50601f01601f1916929092016040019392505050565b6000821982111561084657634e487b7160e01b81526011600452602481fd5b500190565b600181811c9082168061085f57607f821691505b6020821081141561088057634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220d9937d0b15cdd1fc300968765723f717ca99c40c43e65b2ef8391fa3dfb8da4e64736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xB47 CODESIZE SUB DUP1 PUSH3 0xB47 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1C1 JUMP JUMPDEST DUP2 MLOAD PUSH3 0x49 SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x5F SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x68 JUMP JUMPDEST POP POP POP PUSH3 0x27B JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x76 SWAP1 PUSH3 0x228 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x9A JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xB5 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xE5 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xE5 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xE5 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xC8 JUMP JUMPDEST POP PUSH3 0xF3 SWAP3 SWAP2 POP PUSH3 0xF7 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xF3 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xF8 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x11F JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x13C JUMPI PUSH3 0x13C PUSH3 0x265 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x167 JUMPI PUSH3 0x167 PUSH3 0x265 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x183 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP5 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x1A6 JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x187 JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x1B7 JUMPI DUP5 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x1D4 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x1EB JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH3 0x1F9 DUP7 DUP4 DUP8 ADD PUSH3 0x10E JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x20F JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH3 0x21E DUP6 DUP3 DUP7 ADD PUSH3 0x10E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x23D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x25F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x8BC DUP1 PUSH3 0x28B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x7D4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x7AB JUMP JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x770 JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x7AB JUMP JUMPDEST PUSH2 0x31D JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x71D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x359 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x7AB JUMP JUMPDEST PUSH2 0x368 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x7AB JUMP JUMPDEST PUSH2 0x401 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x73E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1D5 SWAP1 PUSH2 0x84B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x201 SWAP1 PUSH2 0x84B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x24E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x223 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x24E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x231 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x265 CALLER DUP5 DUP5 PUSH2 0x40E JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27B DUP5 DUP5 DUP5 PUSH2 0x532 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x305 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6C6C6F77616E6365 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x312 DUP6 CALLER DUP6 DUP5 SUB PUSH2 0x40E JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 PUSH2 0x265 SWAP2 DUP6 SWAP1 PUSH2 0x354 SWAP1 DUP7 SWAP1 PUSH2 0x827 JUMP JUMPDEST PUSH2 0x40E JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1D5 SWAP1 PUSH2 0x84B JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x3EA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FC JUMP JUMPDEST PUSH2 0x3F7 CALLER DUP6 DUP6 DUP5 SUB PUSH2 0x40E JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x265 CALLER DUP5 DUP5 PUSH2 0x532 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x470 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x4D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x596 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x670 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x6A7 SWAP1 DUP5 SWAP1 PUSH2 0x827 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6F3 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x718 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x72E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x737 DUP3 PUSH2 0x701 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x750 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x759 DUP4 PUSH2 0x701 JUMP JUMPDEST SWAP2 POP PUSH2 0x767 PUSH1 0x20 DUP5 ADD PUSH2 0x701 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x784 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x78D DUP5 PUSH2 0x701 JUMP JUMPDEST SWAP3 POP PUSH2 0x79B PUSH1 0x20 DUP6 ADD PUSH2 0x701 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7BD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x7C6 DUP4 PUSH2 0x701 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x800 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x7E4 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x811 JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x846 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x85F JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x880 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD9 SWAP4 PUSH30 0xB15CDD1FC300968765723F717CA99C40C43E65B2EF8391FA3DFB8DA4E64 PUSH20 0x6F6C634300080400330000000000000000000000 ","sourceMap":"1388:10416:2:-:0;;;1963:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2029:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;2052:17:2;;;;:7;;:17;;;;;:::i;:::-;;1963:113;;1388:10416;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1388:10416:2;;;-1:-1:-1;1388:10416:2;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:909:15;68:5;121:3;114:4;106:6;102:17;98:27;88:2;;143:5;136;129:20;88:2;170:13;;-1:-1:-1;;;;;232:10:15;;;229:2;;;245:18;;:::i;:::-;320:2;314:9;288:2;374:13;;-1:-1:-1;;370:22:15;;;394:2;366:31;362:40;350:53;;;418:18;;;438:22;;;415:46;412:2;;;464:18;;:::i;:::-;504:10;500:2;493:22;539:2;531:6;524:18;561:4;551:14;;606:3;601:2;596;588:6;584:15;580:24;577:33;574:2;;;627:5;620;613:20;574:2;653:5;644:14;;667:133;681:2;678:1;675:9;667:133;;;769:14;;;765:23;;759:30;738:14;;;734:23;;727:63;692:10;;;;667:133;;;818:2;815:1;812:9;809:2;;;877:5;872:2;867;859:6;855:15;851:24;844:39;809:2;911:6;78:845;-1:-1:-1;;;;;;78:845:15:o;928:592::-;1027:6;1035;1088:2;1076:9;1067:7;1063:23;1059:32;1056:2;;;1109:6;1101;1094:22;1056:2;1141:16;;-1:-1:-1;;;;;1206:14:15;;;1203:2;;;1238:6;1230;1223:22;1203:2;1266:61;1319:7;1310:6;1299:9;1295:22;1266:61;:::i;:::-;1256:71;;1373:2;1362:9;1358:18;1352:25;1336:41;;1402:2;1392:8;1389:16;1386:2;;;1423:6;1415;1408:22;1386:2;;1451:63;1506:7;1495:8;1484:9;1480:24;1451:63;:::i;:::-;1441:73;;;1046:474;;;;;:::o;1525:380::-;1604:1;1600:12;;;;1647;;;1668:2;;1722:4;1714:6;1710:17;1700:27;;1668:2;1775;1767:6;1764:14;1744:18;1741:38;1738:2;;;1821:10;1816:3;1812:20;1809:1;1802:31;1856:4;1853:1;1846:15;1884:4;1881:1;1874:15;1738:2;;1580:325;;;:::o;1910:127::-;1971:10;1966:3;1962:20;1959:1;1952:31;2002:4;1999:1;1992:15;2026:4;2023:1;2016:15;1942:95;1388:10416:2;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5907:15","statements":[{"nodeType":"YulBlock","src":"6:3:15","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:124:15","statements":[{"nodeType":"YulAssignment","src":"73:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:15"},"nodeType":"YulFunctionCall","src":"82:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:15"}]},{"body":{"nodeType":"YulBlock","src":"165:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"174:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"177:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"167:6:15"},"nodeType":"YulFunctionCall","src":"167:12:15"},"nodeType":"YulExpressionStatement","src":"167:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:15"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:3:15","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"155:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"146:3:15"},"nodeType":"YulFunctionCall","src":"146:11:15"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"142:3:15"},"nodeType":"YulFunctionCall","src":"142:19:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:15"},"nodeType":"YulFunctionCall","src":"131:31:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:15"},"nodeType":"YulFunctionCall","src":"121:42:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:15"},"nodeType":"YulFunctionCall","src":"114:50:15"},"nodeType":"YulIf","src":"111:2:15"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:15","type":""}],"src":"14:173:15"},{"body":{"nodeType":"YulBlock","src":"262:126:15","statements":[{"body":{"nodeType":"YulBlock","src":"308:26:15","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"317:6:15"},{"name":"value0","nodeType":"YulIdentifier","src":"325:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:15"},"nodeType":"YulFunctionCall","src":"310:22:15"},"nodeType":"YulExpressionStatement","src":"310:22:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"283:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"292:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"279:3:15"},"nodeType":"YulFunctionCall","src":"279:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"304:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"275:3:15"},"nodeType":"YulFunctionCall","src":"275:32:15"},"nodeType":"YulIf","src":"272:2:15"},{"nodeType":"YulAssignment","src":"343:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"372:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"353:18:15"},"nodeType":"YulFunctionCall","src":"353:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"343:6:15"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"228:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"239:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"251:6:15","type":""}],"src":"192:196:15"},{"body":{"nodeType":"YulBlock","src":"480:183:15","statements":[{"body":{"nodeType":"YulBlock","src":"526:26:15","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"535:6:15"},{"name":"value1","nodeType":"YulIdentifier","src":"543:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"528:6:15"},"nodeType":"YulFunctionCall","src":"528:22:15"},"nodeType":"YulExpressionStatement","src":"528:22:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"501:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"510:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"497:3:15"},"nodeType":"YulFunctionCall","src":"497:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"522:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"493:3:15"},"nodeType":"YulFunctionCall","src":"493:32:15"},"nodeType":"YulIf","src":"490:2:15"},{"nodeType":"YulAssignment","src":"561:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"590:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"571:18:15"},"nodeType":"YulFunctionCall","src":"571:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"561:6:15"}]},{"nodeType":"YulAssignment","src":"609:48:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"642:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"653:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"638:3:15"},"nodeType":"YulFunctionCall","src":"638:18:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"619:18:15"},"nodeType":"YulFunctionCall","src":"619:38:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"609:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"438:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"449:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"461:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"469:6:15","type":""}],"src":"393:270:15"},{"body":{"nodeType":"YulBlock","src":"772:234:15","statements":[{"body":{"nodeType":"YulBlock","src":"818:26:15","statements":[{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"827:6:15"},{"name":"value2","nodeType":"YulIdentifier","src":"835:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"820:6:15"},"nodeType":"YulFunctionCall","src":"820:22:15"},"nodeType":"YulExpressionStatement","src":"820:22:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"793:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"802:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"789:3:15"},"nodeType":"YulFunctionCall","src":"789:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"814:2:15","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"785:3:15"},"nodeType":"YulFunctionCall","src":"785:32:15"},"nodeType":"YulIf","src":"782:2:15"},{"nodeType":"YulAssignment","src":"853:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"882:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"863:18:15"},"nodeType":"YulFunctionCall","src":"863:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"853:6:15"}]},{"nodeType":"YulAssignment","src":"901:48:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"934:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"945:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"930:3:15"},"nodeType":"YulFunctionCall","src":"930:18:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"911:18:15"},"nodeType":"YulFunctionCall","src":"911:38:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"901:6:15"}]},{"nodeType":"YulAssignment","src":"958:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"985:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"996:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"981:3:15"},"nodeType":"YulFunctionCall","src":"981:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"968:12:15"},"nodeType":"YulFunctionCall","src":"968:32:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"958:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"722:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"733:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"745:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"753:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"761:6:15","type":""}],"src":"668:338:15"},{"body":{"nodeType":"YulBlock","src":"1098:177:15","statements":[{"body":{"nodeType":"YulBlock","src":"1144:26:15","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1153:6:15"},{"name":"value0","nodeType":"YulIdentifier","src":"1161:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1146:6:15"},"nodeType":"YulFunctionCall","src":"1146:22:15"},"nodeType":"YulExpressionStatement","src":"1146:22:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1119:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"1128:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1115:3:15"},"nodeType":"YulFunctionCall","src":"1115:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"1140:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1111:3:15"},"nodeType":"YulFunctionCall","src":"1111:32:15"},"nodeType":"YulIf","src":"1108:2:15"},{"nodeType":"YulAssignment","src":"1179:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1208:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1189:18:15"},"nodeType":"YulFunctionCall","src":"1189:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1179:6:15"}]},{"nodeType":"YulAssignment","src":"1227:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1254:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"1265:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1250:3:15"},"nodeType":"YulFunctionCall","src":"1250:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1237:12:15"},"nodeType":"YulFunctionCall","src":"1237:32:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1227:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1056:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1067:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1079:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1087:6:15","type":""}],"src":"1011:264:15"},{"body":{"nodeType":"YulBlock","src":"1375:92:15","statements":[{"nodeType":"YulAssignment","src":"1385:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1397:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"1408:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1393:3:15"},"nodeType":"YulFunctionCall","src":"1393:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1385:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1427:9:15"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1452:6:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1445:6:15"},"nodeType":"YulFunctionCall","src":"1445:14:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1438:6:15"},"nodeType":"YulFunctionCall","src":"1438:22:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1420:6:15"},"nodeType":"YulFunctionCall","src":"1420:41:15"},"nodeType":"YulExpressionStatement","src":"1420:41:15"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1344:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1355:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1366:4:15","type":""}],"src":"1280:187:15"},{"body":{"nodeType":"YulBlock","src":"1593:482:15","statements":[{"nodeType":"YulVariableDeclaration","src":"1603:12:15","value":{"kind":"number","nodeType":"YulLiteral","src":"1613:2:15","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1607:2:15","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1631:9:15"},{"name":"_1","nodeType":"YulIdentifier","src":"1642:2:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1624:6:15"},"nodeType":"YulFunctionCall","src":"1624:21:15"},"nodeType":"YulExpressionStatement","src":"1624:21:15"},{"nodeType":"YulVariableDeclaration","src":"1654:27:15","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1674:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1668:5:15"},"nodeType":"YulFunctionCall","src":"1668:13:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1658:6:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1701:9:15"},{"name":"_1","nodeType":"YulIdentifier","src":"1712:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1697:3:15"},"nodeType":"YulFunctionCall","src":"1697:18:15"},{"name":"length","nodeType":"YulIdentifier","src":"1717:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1690:6:15"},"nodeType":"YulFunctionCall","src":"1690:34:15"},"nodeType":"YulExpressionStatement","src":"1690:34:15"},{"nodeType":"YulVariableDeclaration","src":"1733:13:15","value":{"name":"tail","nodeType":"YulIdentifier","src":"1742:4:15"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1737:1:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"1805:90:15","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1834:9:15"},{"name":"i","nodeType":"YulIdentifier","src":"1845:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1830:3:15"},"nodeType":"YulFunctionCall","src":"1830:17:15"},{"kind":"number","nodeType":"YulLiteral","src":"1849:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1826:3:15"},"nodeType":"YulFunctionCall","src":"1826:26:15"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1868:6:15"},{"name":"i","nodeType":"YulIdentifier","src":"1876:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1864:3:15"},"nodeType":"YulFunctionCall","src":"1864:14:15"},{"name":"_1","nodeType":"YulIdentifier","src":"1880:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1860:3:15"},"nodeType":"YulFunctionCall","src":"1860:23:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1854:5:15"},"nodeType":"YulFunctionCall","src":"1854:30:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1819:6:15"},"nodeType":"YulFunctionCall","src":"1819:66:15"},"nodeType":"YulExpressionStatement","src":"1819:66:15"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1766:1:15"},{"name":"length","nodeType":"YulIdentifier","src":"1769:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1763:2:15"},"nodeType":"YulFunctionCall","src":"1763:13:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1777:19:15","statements":[{"nodeType":"YulAssignment","src":"1779:15:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1788:1:15"},{"name":"_1","nodeType":"YulIdentifier","src":"1791:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1784:3:15"},"nodeType":"YulFunctionCall","src":"1784:10:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1779:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"1759:3:15","statements":[]},"src":"1755:140:15"},{"body":{"nodeType":"YulBlock","src":"1929:69:15","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1958:9:15"},{"name":"length","nodeType":"YulIdentifier","src":"1969:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1954:3:15"},"nodeType":"YulFunctionCall","src":"1954:22:15"},{"kind":"number","nodeType":"YulLiteral","src":"1978:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1950:3:15"},"nodeType":"YulFunctionCall","src":"1950:31:15"},{"name":"tail","nodeType":"YulIdentifier","src":"1983:4:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1943:6:15"},"nodeType":"YulFunctionCall","src":"1943:45:15"},"nodeType":"YulExpressionStatement","src":"1943:45:15"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1910:1:15"},{"name":"length","nodeType":"YulIdentifier","src":"1913:6:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1907:2:15"},"nodeType":"YulFunctionCall","src":"1907:13:15"},"nodeType":"YulIf","src":"1904:2:15"},{"nodeType":"YulAssignment","src":"2007:62:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2023:9:15"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2042:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"2050:2:15","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2038:3:15"},"nodeType":"YulFunctionCall","src":"2038:15:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2059:2:15","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2055:3:15"},"nodeType":"YulFunctionCall","src":"2055:7:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2034:3:15"},"nodeType":"YulFunctionCall","src":"2034:29:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2019:3:15"},"nodeType":"YulFunctionCall","src":"2019:45:15"},{"kind":"number","nodeType":"YulLiteral","src":"2066:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2015:3:15"},"nodeType":"YulFunctionCall","src":"2015:54:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2007:4:15"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1562:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1573:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1584:4:15","type":""}],"src":"1472:603:15"},{"body":{"nodeType":"YulBlock","src":"2254:225:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2271:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2282:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2264:6:15"},"nodeType":"YulFunctionCall","src":"2264:21:15"},"nodeType":"YulExpressionStatement","src":"2264:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2305:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2316:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2301:3:15"},"nodeType":"YulFunctionCall","src":"2301:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"2321:2:15","type":"","value":"35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2294:6:15"},"nodeType":"YulFunctionCall","src":"2294:30:15"},"nodeType":"YulExpressionStatement","src":"2294:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2344:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2355:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2340:3:15"},"nodeType":"YulFunctionCall","src":"2340:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"2360:34:15","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2333:6:15"},"nodeType":"YulFunctionCall","src":"2333:62:15"},"nodeType":"YulExpressionStatement","src":"2333:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2415:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2426:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2411:3:15"},"nodeType":"YulFunctionCall","src":"2411:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"2431:5:15","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2404:6:15"},"nodeType":"YulFunctionCall","src":"2404:33:15"},"nodeType":"YulExpressionStatement","src":"2404:33:15"},{"nodeType":"YulAssignment","src":"2446:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2458:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2469:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2454:3:15"},"nodeType":"YulFunctionCall","src":"2454:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2446:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2231:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2245:4:15","type":""}],"src":"2080:399:15"},{"body":{"nodeType":"YulBlock","src":"2658:224:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2675:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2686:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2668:6:15"},"nodeType":"YulFunctionCall","src":"2668:21:15"},"nodeType":"YulExpressionStatement","src":"2668:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2709:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2720:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2705:3:15"},"nodeType":"YulFunctionCall","src":"2705:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"2725:2:15","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2698:6:15"},"nodeType":"YulFunctionCall","src":"2698:30:15"},"nodeType":"YulExpressionStatement","src":"2698:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2748:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2759:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2744:3:15"},"nodeType":"YulFunctionCall","src":"2744:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"2764:34:15","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2737:6:15"},"nodeType":"YulFunctionCall","src":"2737:62:15"},"nodeType":"YulExpressionStatement","src":"2737:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2819:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2830:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2815:3:15"},"nodeType":"YulFunctionCall","src":"2815:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"2835:4:15","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2808:6:15"},"nodeType":"YulFunctionCall","src":"2808:32:15"},"nodeType":"YulExpressionStatement","src":"2808:32:15"},{"nodeType":"YulAssignment","src":"2849:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2861:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2872:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2857:3:15"},"nodeType":"YulFunctionCall","src":"2857:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2849:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2635:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2649:4:15","type":""}],"src":"2484:398:15"},{"body":{"nodeType":"YulBlock","src":"3061:228:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3078:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3089:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3071:6:15"},"nodeType":"YulFunctionCall","src":"3071:21:15"},"nodeType":"YulExpressionStatement","src":"3071:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3112:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3123:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3108:3:15"},"nodeType":"YulFunctionCall","src":"3108:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"3128:2:15","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3101:6:15"},"nodeType":"YulFunctionCall","src":"3101:30:15"},"nodeType":"YulExpressionStatement","src":"3101:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3151:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3162:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3147:3:15"},"nodeType":"YulFunctionCall","src":"3147:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"3167:34:15","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3140:6:15"},"nodeType":"YulFunctionCall","src":"3140:62:15"},"nodeType":"YulExpressionStatement","src":"3140:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3222:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3233:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3218:3:15"},"nodeType":"YulFunctionCall","src":"3218:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"3238:8:15","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3211:6:15"},"nodeType":"YulFunctionCall","src":"3211:36:15"},"nodeType":"YulExpressionStatement","src":"3211:36:15"},{"nodeType":"YulAssignment","src":"3256:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3268:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3279:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3264:3:15"},"nodeType":"YulFunctionCall","src":"3264:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3256:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3038:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3052:4:15","type":""}],"src":"2887:402:15"},{"body":{"nodeType":"YulBlock","src":"3468:230:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3485:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3496:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3478:6:15"},"nodeType":"YulFunctionCall","src":"3478:21:15"},"nodeType":"YulExpressionStatement","src":"3478:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3519:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3530:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3515:3:15"},"nodeType":"YulFunctionCall","src":"3515:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"3535:2:15","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3508:6:15"},"nodeType":"YulFunctionCall","src":"3508:30:15"},"nodeType":"YulExpressionStatement","src":"3508:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3558:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3569:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3554:3:15"},"nodeType":"YulFunctionCall","src":"3554:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"3574:34:15","type":"","value":"ERC20: transfer amount exceeds a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3547:6:15"},"nodeType":"YulFunctionCall","src":"3547:62:15"},"nodeType":"YulExpressionStatement","src":"3547:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3629:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3640:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3625:3:15"},"nodeType":"YulFunctionCall","src":"3625:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"3645:10:15","type":"","value":"llowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3618:6:15"},"nodeType":"YulFunctionCall","src":"3618:38:15"},"nodeType":"YulExpressionStatement","src":"3618:38:15"},{"nodeType":"YulAssignment","src":"3665:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3677:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3688:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3673:3:15"},"nodeType":"YulFunctionCall","src":"3673:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3665:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3445:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3459:4:15","type":""}],"src":"3294:404:15"},{"body":{"nodeType":"YulBlock","src":"3877:227:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3894:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3905:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3887:6:15"},"nodeType":"YulFunctionCall","src":"3887:21:15"},"nodeType":"YulExpressionStatement","src":"3887:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3928:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3939:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3924:3:15"},"nodeType":"YulFunctionCall","src":"3924:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"3944:2:15","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3917:6:15"},"nodeType":"YulFunctionCall","src":"3917:30:15"},"nodeType":"YulExpressionStatement","src":"3917:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3967:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3978:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3963:3:15"},"nodeType":"YulFunctionCall","src":"3963:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"3983:34:15","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3956:6:15"},"nodeType":"YulFunctionCall","src":"3956:62:15"},"nodeType":"YulExpressionStatement","src":"3956:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4038:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4049:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4034:3:15"},"nodeType":"YulFunctionCall","src":"4034:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"4054:7:15","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4027:6:15"},"nodeType":"YulFunctionCall","src":"4027:35:15"},"nodeType":"YulExpressionStatement","src":"4027:35:15"},{"nodeType":"YulAssignment","src":"4071:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4083:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4094:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4079:3:15"},"nodeType":"YulFunctionCall","src":"4079:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4071:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3854:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3868:4:15","type":""}],"src":"3703:401:15"},{"body":{"nodeType":"YulBlock","src":"4283:226:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4300:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4311:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4293:6:15"},"nodeType":"YulFunctionCall","src":"4293:21:15"},"nodeType":"YulExpressionStatement","src":"4293:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4334:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4345:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4330:3:15"},"nodeType":"YulFunctionCall","src":"4330:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"4350:2:15","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4323:6:15"},"nodeType":"YulFunctionCall","src":"4323:30:15"},"nodeType":"YulExpressionStatement","src":"4323:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4373:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4384:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4369:3:15"},"nodeType":"YulFunctionCall","src":"4369:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"4389:34:15","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4362:6:15"},"nodeType":"YulFunctionCall","src":"4362:62:15"},"nodeType":"YulExpressionStatement","src":"4362:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4444:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4455:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4440:3:15"},"nodeType":"YulFunctionCall","src":"4440:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"4460:6:15","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4433:6:15"},"nodeType":"YulFunctionCall","src":"4433:34:15"},"nodeType":"YulExpressionStatement","src":"4433:34:15"},{"nodeType":"YulAssignment","src":"4476:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4488:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4499:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4484:3:15"},"nodeType":"YulFunctionCall","src":"4484:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4476:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4260:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4274:4:15","type":""}],"src":"4109:400:15"},{"body":{"nodeType":"YulBlock","src":"4688:227:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4705:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4716:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4698:6:15"},"nodeType":"YulFunctionCall","src":"4698:21:15"},"nodeType":"YulExpressionStatement","src":"4698:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4739:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4750:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4735:3:15"},"nodeType":"YulFunctionCall","src":"4735:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"4755:2:15","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4728:6:15"},"nodeType":"YulFunctionCall","src":"4728:30:15"},"nodeType":"YulExpressionStatement","src":"4728:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4778:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4789:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4774:3:15"},"nodeType":"YulFunctionCall","src":"4774:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"4794:34:15","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4767:6:15"},"nodeType":"YulFunctionCall","src":"4767:62:15"},"nodeType":"YulExpressionStatement","src":"4767:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4849:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4860:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4845:3:15"},"nodeType":"YulFunctionCall","src":"4845:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"4865:7:15","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4838:6:15"},"nodeType":"YulFunctionCall","src":"4838:35:15"},"nodeType":"YulExpressionStatement","src":"4838:35:15"},{"nodeType":"YulAssignment","src":"4882:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4894:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4905:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4890:3:15"},"nodeType":"YulFunctionCall","src":"4890:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4882:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4665:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4679:4:15","type":""}],"src":"4514:401:15"},{"body":{"nodeType":"YulBlock","src":"5021:76:15","statements":[{"nodeType":"YulAssignment","src":"5031:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5043:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5054:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5039:3:15"},"nodeType":"YulFunctionCall","src":"5039:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5031:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5073:9:15"},{"name":"value0","nodeType":"YulIdentifier","src":"5084:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5066:6:15"},"nodeType":"YulFunctionCall","src":"5066:25:15"},"nodeType":"YulExpressionStatement","src":"5066:25:15"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4990:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5001:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5012:4:15","type":""}],"src":"4920:177:15"},{"body":{"nodeType":"YulBlock","src":"5199:87:15","statements":[{"nodeType":"YulAssignment","src":"5209:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5221:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5232:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5217:3:15"},"nodeType":"YulFunctionCall","src":"5217:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5209:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5251:9:15"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5266:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"5274:4:15","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5262:3:15"},"nodeType":"YulFunctionCall","src":"5262:17:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5244:6:15"},"nodeType":"YulFunctionCall","src":"5244:36:15"},"nodeType":"YulExpressionStatement","src":"5244:36:15"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5168:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5179:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5190:4:15","type":""}],"src":"5102:184:15"},{"body":{"nodeType":"YulBlock","src":"5339:181:15","statements":[{"body":{"nodeType":"YulBlock","src":"5374:115:15","statements":[{"expression":{"arguments":[{"name":"sum","nodeType":"YulIdentifier","src":"5395:3:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5404:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5409:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5400:3:15"},"nodeType":"YulFunctionCall","src":"5400:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5388:6:15"},"nodeType":"YulFunctionCall","src":"5388:33:15"},"nodeType":"YulExpressionStatement","src":"5388:33:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5441:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5444:4:15","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5434:6:15"},"nodeType":"YulFunctionCall","src":"5434:15:15"},"nodeType":"YulExpressionStatement","src":"5434:15:15"},{"expression":{"arguments":[{"name":"sum","nodeType":"YulIdentifier","src":"5469:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"5474:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5462:6:15"},"nodeType":"YulFunctionCall","src":"5462:17:15"},"nodeType":"YulExpressionStatement","src":"5462:17:15"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5355:1:15"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"5362:1:15"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"5358:3:15"},"nodeType":"YulFunctionCall","src":"5358:6:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5352:2:15"},"nodeType":"YulFunctionCall","src":"5352:13:15"},"nodeType":"YulIf","src":"5349:2:15"},{"nodeType":"YulAssignment","src":"5498:16:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5509:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"5512:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5505:3:15"},"nodeType":"YulFunctionCall","src":"5505:9:15"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"5498:3:15"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5322:1:15","type":""},{"name":"y","nodeType":"YulTypedName","src":"5325:1:15","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"5331:3:15","type":""}],"src":"5291:229:15"},{"body":{"nodeType":"YulBlock","src":"5580:325:15","statements":[{"nodeType":"YulAssignment","src":"5590:22:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5604:1:15","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"5607:4:15"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"5600:3:15"},"nodeType":"YulFunctionCall","src":"5600:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5590:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"5621:38:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"5651:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"5657:1:15","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5647:3:15"},"nodeType":"YulFunctionCall","src":"5647:12:15"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"5625:18:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"5698:31:15","statements":[{"nodeType":"YulAssignment","src":"5700:27:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5714:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"5722:4:15","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5710:3:15"},"nodeType":"YulFunctionCall","src":"5710:17:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5700:6:15"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"5678:18:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5671:6:15"},"nodeType":"YulFunctionCall","src":"5671:26:15"},"nodeType":"YulIf","src":"5668:2:15"},{"body":{"nodeType":"YulBlock","src":"5788:111:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5809:1:15","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5816:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"5821:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5812:3:15"},"nodeType":"YulFunctionCall","src":"5812:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5802:6:15"},"nodeType":"YulFunctionCall","src":"5802:31:15"},"nodeType":"YulExpressionStatement","src":"5802:31:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5853:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5856:4:15","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5846:6:15"},"nodeType":"YulFunctionCall","src":"5846:15:15"},"nodeType":"YulExpressionStatement","src":"5846:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5881:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5884:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5874:6:15"},"nodeType":"YulFunctionCall","src":"5874:15:15"},"nodeType":"YulExpressionStatement","src":"5874:15:15"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"5744:18:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5767:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"5775:2:15","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5764:2:15"},"nodeType":"YulFunctionCall","src":"5764:14:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5741:2:15"},"nodeType":"YulFunctionCall","src":"5741:38:15"},"nodeType":"YulIf","src":"5738:2:15"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"5560:4:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"5569:6:15","type":""}],"src":"5525:380:15"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := tail\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), tail)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds a\")\n        mstore(add(headStart, 96), \"llowance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(sum, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(sum, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}","id":15,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101c6565b6040516100c391906107d4565b60405180910390f35b6100df6100da3660046107ab565b610258565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f366004610770565b61026e565b604051601281526020016100c3565b6100df6101313660046107ab565b61031d565b6100f361014436600461071d565b6001600160a01b031660009081526020819052604090205490565b6100b6610359565b6100df6101753660046107ab565b610368565b6100df6101883660046107ab565b610401565b6100f361019b36600461073e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101d59061084b565b80601f01602080910402602001604051908101604052809291908181526020018280546102019061084b565b801561024e5780601f106102235761010080835404028352916020019161024e565b820191906000526020600020905b81548152906001019060200180831161023157829003601f168201915b5050505050905090565b600061026533848461040e565b50600192915050565b600061027b848484610532565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103055760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b610312853385840361040e565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610265918590610354908690610827565b61040e565b6060600480546101d59061084b565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156103ea5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016102fc565b6103f7338585840361040e565b5060019392505050565b6000610265338484610532565b6001600160a01b0383166104705760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016102fc565b6001600160a01b0382166104d15760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016102fc565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166105965760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016102fc565b6001600160a01b0382166105f85760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016102fc565b6001600160a01b038316600090815260208190526040902054818110156106705760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016102fc565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906106a7908490610827565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106f391815260200190565b60405180910390a350505050565b80356001600160a01b038116811461071857600080fd5b919050565b60006020828403121561072e578081fd5b61073782610701565b9392505050565b60008060408385031215610750578081fd5b61075983610701565b915061076760208401610701565b90509250929050565b600080600060608486031215610784578081fd5b61078d84610701565b925061079b60208501610701565b9150604084013590509250925092565b600080604083850312156107bd578182fd5b6107c683610701565b946020939093013593505050565b6000602080835283518082850152825b81811015610800578581018301518582016040015282016107e4565b818111156108115783604083870101525b50601f01601f1916929092016040019392505050565b6000821982111561084657634e487b7160e01b81526011600452602481fd5b500190565b600181811c9082168061085f57607f821691505b6020821081141561088057634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220d9937d0b15cdd1fc300968765723f717ca99c40c43e65b2ef8391fa3dfb8da4e64736f6c63430008040033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1C6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x7D4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x7AB JUMP JUMPDEST PUSH2 0x258 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x770 JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x7AB JUMP JUMPDEST PUSH2 0x31D JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x71D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x359 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x7AB JUMP JUMPDEST PUSH2 0x368 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x7AB JUMP JUMPDEST PUSH2 0x401 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x73E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1D5 SWAP1 PUSH2 0x84B JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x201 SWAP1 PUSH2 0x84B JUMP JUMPDEST DUP1 ISZERO PUSH2 0x24E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x223 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x24E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x231 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x265 CALLER DUP5 DUP5 PUSH2 0x40E JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x27B DUP5 DUP5 DUP5 PUSH2 0x532 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x305 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6C6C6F77616E6365 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x312 DUP6 CALLER DUP6 DUP5 SUB PUSH2 0x40E JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 PUSH2 0x265 SWAP2 DUP6 SWAP1 PUSH2 0x354 SWAP1 DUP7 SWAP1 PUSH2 0x827 JUMP JUMPDEST PUSH2 0x40E JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1D5 SWAP1 PUSH2 0x84B JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x3EA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FC JUMP JUMPDEST PUSH2 0x3F7 CALLER DUP6 DUP6 DUP5 SUB PUSH2 0x40E JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x265 CALLER DUP5 DUP5 PUSH2 0x532 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x470 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x4D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x596 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x670 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x2FC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x6A7 SWAP1 DUP5 SWAP1 PUSH2 0x827 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6F3 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x718 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x72E JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x737 DUP3 PUSH2 0x701 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x750 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x759 DUP4 PUSH2 0x701 JUMP JUMPDEST SWAP2 POP PUSH2 0x767 PUSH1 0x20 DUP5 ADD PUSH2 0x701 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x784 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x78D DUP5 PUSH2 0x701 JUMP JUMPDEST SWAP3 POP PUSH2 0x79B PUSH1 0x20 DUP6 ADD PUSH2 0x701 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7BD JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x7C6 DUP4 PUSH2 0x701 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x800 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x7E4 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x811 JUMPI DUP4 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x846 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x85F JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x880 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD9 SWAP4 PUSH30 0xB15CDD1FC300968765723F717CA99C40C43E65B2EF8391FA3DFB8DA4E64 PUSH20 0x6F6C634300080400330000000000000000000000 ","sourceMap":"1388:10416:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2141:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4238:166;;;;;;:::i;:::-;;:::i;:::-;;;1445:14:15;;1438:22;1420:41;;1408:2;1393:18;4238:166:2;1375:92:15;3229:106:2;3316:12;;3229:106;;;5066:25:15;;;5054:2;5039:18;3229:106:2;5021:76:15;4871:478:2;;;;;;:::i;:::-;;:::i;3078:91::-;;;3160:2;5244:36:15;;5232:2;5217:18;3078:91:2;5199:87:15;5744:212:2;;;;;;:::i;:::-;;:::i;3393:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3493:18:2;3467:7;3493:18;;;;;;;;;;;;3393:125;2352:102;;;:::i;6443:405::-;;;;;;:::i;:::-;;:::i;3721:172::-;;;;;;:::i;:::-;;:::i;3951:149::-;;;;;;:::i;:::-;-1:-1:-1;;;;;4066:18:2;;;4040:7;4066:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3951:149;2141:98;2195:13;2227:5;2220:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2141:98;:::o;4238:166::-;4321:4;4337:39;719:10:7;4360:7:2;4369:6;4337:8;:39::i;:::-;-1:-1:-1;4393:4:2;4238:166;;;;:::o;4871:478::-;5007:4;5023:36;5033:6;5041:9;5052:6;5023:9;:36::i;:::-;-1:-1:-1;;;;;5097:19:2;;5070:24;5097:19;;;:11;:19;;;;;;;;719:10:7;5097:33:2;;;;;;;;5148:26;;;;5140:79;;;;-1:-1:-1;;;5140:79:2;;3496:2:15;5140:79:2;;;3478:21:15;3535:2;3515:18;;;3508:30;3574:34;3554:18;;;3547:62;-1:-1:-1;;;3625:18:15;;;3618:38;3673:19;;5140:79:2;;;;;;;;;5253:57;5262:6;719:10:7;5303:6:2;5284:16;:25;5253:8;:57::i;:::-;-1:-1:-1;5338:4:2;;4871:478;-1:-1:-1;;;;4871:478:2:o;5744:212::-;719:10:7;5832:4:2;5880:25;;;:11;:25;;;;;;;;-1:-1:-1;;;;;5880:34:2;;;;;;;;;;5832:4;;5848:80;;5871:7;;5880:47;;5917:10;;5880:47;:::i;:::-;5848:8;:80::i;2352:102::-;2408:13;2440:7;2433:14;;;;;:::i;6443:405::-;719:10:7;6536:4:2;6579:25;;;:11;:25;;;;;;;;-1:-1:-1;;;;;6579:34:2;;;;;;;;;;6631:35;;;;6623:85;;;;-1:-1:-1;;;6623:85:2;;4716:2:15;6623:85:2;;;4698:21:15;4755:2;4735:18;;;4728:30;4794:34;4774:18;;;4767:62;-1:-1:-1;;;4845:18:15;;;4838:35;4890:19;;6623:85:2;4688:227:15;6623:85:2;6742:67;719:10:7;6765:7:2;6793:15;6774:16;:34;6742:8;:67::i;:::-;-1:-1:-1;6837:4:2;;6443:405;-1:-1:-1;;;6443:405:2:o;3721:172::-;3807:4;3823:42;719:10:7;3847:9:2;3858:6;3823:9;:42::i;10019:370::-;-1:-1:-1;;;;;10150:19:2;;10142:68;;;;-1:-1:-1;;;10142:68:2;;4311:2:15;10142:68:2;;;4293:21:15;4350:2;4330:18;;;4323:30;4389:34;4369:18;;;4362:62;-1:-1:-1;;;4440:18:15;;;4433:34;4484:19;;10142:68:2;4283:226:15;10142:68:2;-1:-1:-1;;;;;10228:21:2;;10220:68;;;;-1:-1:-1;;;10220:68:2;;2686:2:15;10220:68:2;;;2668:21:15;2725:2;2705:18;;;2698:30;2764:34;2744:18;;;2737:62;-1:-1:-1;;;2815:18:15;;;2808:32;2857:19;;10220:68:2;2658:224:15;10220:68:2;-1:-1:-1;;;;;10299:18:2;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10350:32;;5066:25:15;;;10350:32:2;;5039:18:15;10350:32:2;;;;;;;10019:370;;;:::o;7322:713::-;-1:-1:-1;;;;;7457:20:2;;7449:70;;;;-1:-1:-1;;;7449:70:2;;3905:2:15;7449:70:2;;;3887:21:15;3944:2;3924:18;;;3917:30;3983:34;3963:18;;;3956:62;-1:-1:-1;;;4034:18:15;;;4027:35;4079:19;;7449:70:2;3877:227:15;7449:70:2;-1:-1:-1;;;;;7537:23:2;;7529:71;;;;-1:-1:-1;;;7529:71:2;;2282:2:15;7529:71:2;;;2264:21:15;2321:2;2301:18;;;2294:30;2360:34;2340:18;;;2333:62;-1:-1:-1;;;2411:18:15;;;2404:33;2454:19;;7529:71:2;2254:225:15;7529:71:2;-1:-1:-1;;;;;7693:17:2;;7669:21;7693:17;;;;;;;;;;;7728:23;;;;7720:74;;;;-1:-1:-1;;;7720:74:2;;3089:2:15;7720:74:2;;;3071:21:15;3128:2;3108:18;;;3101:30;3167:34;3147:18;;;3140:62;-1:-1:-1;;;3218:18:15;;;3211:36;3264:19;;7720:74:2;3061:228:15;7720:74:2;-1:-1:-1;;;;;7828:17:2;;;:9;:17;;;;;;;;;;;7848:22;;;7828:42;;7890:20;;;;;;;;:30;;7864:6;;7828:9;7890:30;;7864:6;;7890:30;:::i;:::-;;;;;;;;7953:9;-1:-1:-1;;;;;7936:35:2;7945:6;-1:-1:-1;;;;;7936:35:2;;7964:6;7936:35;;;;5066:25:15;;5054:2;5039:18;;5021:76;7936:35:2;;;;;;;;7322:713;;;;:::o;14:173:15:-;82:20;;-1:-1:-1;;;;;131:31:15;;121:42;;111:2;;177:1;174;167:12;111:2;63:124;;;:::o;192:196::-;251:6;304:2;292:9;283:7;279:23;275:32;272:2;;;325:6;317;310:22;272:2;353:29;372:9;353:29;:::i;:::-;343:39;262:126;-1:-1:-1;;;262:126:15:o;393:270::-;461:6;469;522:2;510:9;501:7;497:23;493:32;490:2;;;543:6;535;528:22;490:2;571:29;590:9;571:29;:::i;:::-;561:39;;619:38;653:2;642:9;638:18;619:38;:::i;:::-;609:48;;480:183;;;;;:::o;668:338::-;745:6;753;761;814:2;802:9;793:7;789:23;785:32;782:2;;;835:6;827;820:22;782:2;863:29;882:9;863:29;:::i;:::-;853:39;;911:38;945:2;934:9;930:18;911:38;:::i;:::-;901:48;;996:2;985:9;981:18;968:32;958:42;;772:234;;;;;:::o;1011:264::-;1079:6;1087;1140:2;1128:9;1119:7;1115:23;1111:32;1108:2;;;1161:6;1153;1146:22;1108:2;1189:29;1208:9;1189:29;:::i;:::-;1179:39;1265:2;1250:18;;;;1237:32;;-1:-1:-1;;;1098:177:15:o;1472:603::-;1584:4;1613:2;1642;1631:9;1624:21;1674:6;1668:13;1717:6;1712:2;1701:9;1697:18;1690:34;1742:4;1755:140;1769:6;1766:1;1763:13;1755:140;;;1864:14;;;1860:23;;1854:30;1830:17;;;1849:2;1826:26;1819:66;1784:10;;1755:140;;;1913:6;1910:1;1907:13;1904:2;;;1983:4;1978:2;1969:6;1958:9;1954:22;1950:31;1943:45;1904:2;-1:-1:-1;2059:2:15;2038:15;-1:-1:-1;;2034:29:15;2019:45;;;;2066:2;2015:54;;1593:482;-1:-1:-1;;;1593:482:15:o;5291:229::-;5331:3;5362:1;5358:6;5355:1;5352:13;5349:2;;;-1:-1:-1;;;5388:33:15;;5444:4;5441:1;5434:15;5474:4;5395:3;5462:17;5349:2;-1:-1:-1;5505:9:15;;5339:181::o;5525:380::-;5604:1;5600:12;;;;5647;;;5668:2;;5722:4;5714:6;5710:17;5700:27;;5668:2;5775;5767:6;5764:14;5744:18;5741:38;5738:2;;;5821:10;5816:3;5812:20;5809:1;5802:31;5856:4;5853:1;5846:15;5884:4;5881:1;5874:15;5738:2;;5580:325;;;:::o"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._","kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"decimals()":{"details":"Returns the decimals places of the token."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200595d4e13214231a5f86ed8aa39fa7fb0ddc8bac4e5658b1bb11323c00151e3064736f6c63430008040033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SDIV SWAP6 0xD4 0xE1 ORIGIN EQ 0x23 BYTE 0x5F DUP7 0xED DUP11 LOG3 SWAP16 0xA7 0xFB 0xD 0xDC DUP12 0xAC 0x4E JUMP PC 0xB1 0xBB GT ORIGIN EXTCODECOPY STOP ISZERO 0x1E ADDRESS PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"645:3270:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;645:3270:5;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200595d4e13214231a5f86ed8aa39fa7fb0ddc8bac4e5658b1bb11323c00151e3064736f6c63430008040033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SDIV SWAP6 0xD4 0xE1 ORIGIN EQ 0x23 BYTE 0x5F DUP7 0xED DUP11 LOG3 SWAP16 0xA7 0xFB 0xD 0xDC DUP12 0xAC 0x4E JUMP PC 0xB1 0xBB GT ORIGIN EXTCODECOPY STOP ISZERO 0x1E ADDRESS PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"645:3270:5:-:0;;;;;;;;"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200885e858494657b22cf7ae4244b5c3c9495eeaf4025d903cdf83d4bcea69d30764736f6c63430008040033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDMOD DUP6 0xE8 PC 0x49 CHAINID JUMPI 0xB2 0x2C 0xF7 0xAE TIMESTAMP DIFFICULTY 0xB5 0xC3 0xC9 0x49 0x5E 0xEA DELEGATECALL MUL 0x5D SWAP1 EXTCODECOPY 0xDF DUP4 0xD4 0xBC 0xEA PUSH10 0xD30764736F6C63430008 DIV STOP CALLER ","sourceMap":"179:7729:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;179:7729:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200885e858494657b22cf7ae4244b5c3c9495eeaf4025d903cdf83d4bcea69d30764736f6c63430008040033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ADDMOD DUP6 0xE8 PC 0x49 CHAINID JUMPI 0xB2 0x2C 0xF7 0xAE TIMESTAMP DIFFICULTY 0xB5 0xC3 0xC9 0x49 0x5E 0xEA DELEGATECALL MUL 0x5D SWAP1 EXTCODECOPY 0xDF DUP4 0xD4 0xBC 0xEA PUSH10 0xD30764736F6C63430008 DIV STOP CALLER ","sourceMap":"179:7729:6:-:0;;;;;;;;"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122006b0271deab233476390f9a2efd064e29911dc898611e294202309644ae7b0f964736f6c63430008040033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD 0xB0 0x27 SAR 0xEA 0xB2 CALLER SELFBALANCE PUSH4 0x90F9A2EF 0xD0 PUSH5 0xE29911DC89 DUP7 GT 0xE2 SWAP5 KECCAK256 0x23 MULMOD PUSH5 0x4AE7B0F964 PUSH20 0x6F6C634300080400330000000000000000000000 ","sourceMap":"146:1885:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;146:1885:8;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122006b0271deab233476390f9a2efd064e29911dc898611e294202309644ae7b0f964736f6c63430008040033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MOD 0xB0 0x27 SAR 0xEA 0xB2 CALLER SELFBALANCE PUSH4 0x90F9A2EF 0xD0 PUSH5 0xE29911DC89 DUP7 GT 0xE2 SWAP5 KECCAK256 0x23 MULMOD PUSH5 0x4AE7B0F964 PUSH20 0x6F6C634300080400330000000000000000000000 ","sourceMap":"146:1885:8:-:0;;;;;;;;"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ECDSA":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122033058eeaa7d37f840abd39367616b6eb259c283a50070d3388ab245e48aa150664736f6c63430008040033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLER SDIV DUP15 0xEA 0xA7 0xD3 PUSH32 0x840ABD39367616B6EB259C283A50070D3388AB245E48AA150664736F6C634300 ADDMOD DIV STOP CALLER ","sourceMap":"354:8967:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;354:8967:9;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122033058eeaa7d37f840abd39367616b6eb259c283a50070d3388ab245e48aa150664736f6c63430008040033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLER SDIV DUP15 0xEA 0xA7 0xD3 PUSH32 0x840ABD39367616B6EB259C283A50070D3388AB245E48AA150664736F6C634300 ADDMOD DIV STOP CALLER ","sourceMap":"354:8967:9:-:0;;;;;;;;"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe9e291de7ffe06e66503c6700b1bb84ff6e0989cbb974653628d8994e7c97f03\",\"license\":\"MIT\"}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"SafeCast":{"abi":[],"devdoc":{"details":"Wrappers over Solidity's uintXX/intXX casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always. Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing all math on `uint256` and `int256` and then downcasting.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c54c7e1691f0308d65472de5334b59b4ec871512d943e0a4ea4a57a719ae589164736f6c63430008040033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC5 0x4C PUSH31 0x1691F0308D65472DE5334B59B4EC871512D943E0A4EA4A57A719AE58916473 PUSH16 0x6C634300080400330000000000000000 ","sourceMap":"827:6990:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;827:6990:10;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c54c7e1691f0308d65472de5334b59b4ec871512d943e0a4ea4a57a719ae589164736f6c63430008040033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC5 0x4C PUSH31 0x1691F0308D65472DE5334B59B4EC871512D943E0A4EA4A57A719AE58916473 PUSH16 0x6C634300080400330000000000000000 ","sourceMap":"827:6990:10:-:0;;;;;;;;"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's uintXX/intXX casting operators with added overflow checks. Downcasting from uint256/int256 in Solidity does not revert on overflow. This can easily result in undesired exploitation or bugs, since developers usually assume that overflows raise errors. `SafeCast` restores this intuition by reverting the transaction when such an operation overflows. Using this library instead of the unchecked operations eliminates an entire class of bugs, so it's recommended to use it always. Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing all math on `uint256` and `int256` and then downcasting.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":\"SafeCast\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"EnumerableSet":{"abi":[],"devdoc":{"details":"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bf05ed46f2aa84b868a446f4e34c15d9929830da69b0b3f559c96e19e9d1e2b664736f6c63430008040033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBF SDIV 0xED CHAINID CALLCODE 0xAA DUP5 0xB8 PUSH9 0xA446F4E34C15D99298 ADDRESS 0xDA PUSH10 0xB0B3F559C96E19E9D1E2 0xB6 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"812:11368:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;812:11368:11;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bf05ed46f2aa84b868a446f4e34c15d9929830da69b0b3f559c96e19e9d1e2b664736f6c63430008040033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBF SDIV 0xED CHAINID CALLCODE 0xAA DUP5 0xB8 PUSH9 0xA446F4E34C15D99298 ADDRESS 0xDA PUSH10 0xB0B3F559C96E19E9D1E2 0xB6 PUSH5 0x736F6C6343 STOP ADDMOD DIV STOP CALLER ","sourceMap":"812:11368:11:-:0;;;;;;;;"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ``` contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":\"EnumerableSet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ClipperCaravelExchange.sol":{"ClipperCaravelExchange":{"abi":[{"inputs":[{"internalType":"address","name":"theSigner","type":"address"},{"internalType":"address","name":"theWrapper","type":"address"},{"internalType":"address[]","name":"tokens","type":"address[]"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"withdrawer","type":"address"},{"indexed":false,"internalType":"uint256","name":"poolTokens","type":"uint256"},{"indexed":true,"internalType":"address","name":"assetAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"assetAmount","type":"uint256"}],"name":"AssetWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"depositor","type":"address"},{"indexed":false,"internalType":"uint256","name":"poolTokens","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"nDays","type":"uint256"}],"name":"Deposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"inAsset","type":"address"},{"indexed":true,"internalType":"address","name":"outAsset","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"inAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"outAmount","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"auxiliaryData","type":"bytes"}],"name":"Swapped","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"withdrawer","type":"address"},{"indexed":false,"internalType":"uint256","name":"poolTokens","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"fractionOfPool","type":"uint256"}],"name":"Withdrawn","type":"event"},{"inputs":[],"name":"DESIGNATED_SIGNER","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WRAPPER_CONTRACT","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"addAsset","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"allTokensBalance","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"address[]","name":"","type":"address[]"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnToWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"theAddress","type":"address"}],"name":"canUnlockDeposit","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256[]","name":"depositAmounts","type":"uint256[]"},{"internalType":"uint256","name":"nDays","type":"uint256"},{"internalType":"uint256","name":"poolTokens","type":"uint256"},{"internalType":"uint256","name":"goodUntil","type":"uint256"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct ClipperCommonExchange.Signature","name":"theSignature","type":"tuple"}],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"inputToken","type":"address"},{"internalType":"uint256","name":"inputAmount","type":"uint256"},{"internalType":"uint256","name":"nDays","type":"uint256"},{"internalType":"uint256","name":"poolTokens","type":"uint256"},{"internalType":"uint256","name":"goodUntil","type":"uint256"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct ClipperCommonExchange.Signature","name":"theSignature","type":"tuple"}],"name":"depositSingleAsset","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getLastBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"isToken","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"lastBalances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nTokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"outputToken","type":"address"},{"internalType":"uint256","name":"inputAmount","type":"uint256"},{"internalType":"uint256","name":"outputAmount","type":"uint256"},{"internalType":"uint256","name":"goodUntil","type":"uint256"},{"internalType":"address","name":"destinationAddress","type":"address"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct ClipperCommonExchange.Signature","name":"theSignature","type":"tuple"},{"internalType":"bytes","name":"auxiliaryData","type":"bytes"}],"name":"sellEthForToken","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"inputToken","type":"address"},{"internalType":"uint256","name":"inputAmount","type":"uint256"},{"internalType":"uint256","name":"outputAmount","type":"uint256"},{"internalType":"uint256","name":"goodUntil","type":"uint256"},{"internalType":"address","name":"destinationAddress","type":"address"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct ClipperCommonExchange.Signature","name":"theSignature","type":"tuple"},{"internalType":"bytes","name":"auxiliaryData","type":"bytes"}],"name":"sellTokenForEth","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"inputToken","type":"address"},{"internalType":"address","name":"outputToken","type":"address"},{"internalType":"uint256","name":"inputAmount","type":"uint256"},{"internalType":"uint256","name":"outputAmount","type":"uint256"},{"internalType":"uint256","name":"goodUntil","type":"uint256"},{"internalType":"address","name":"destinationAddress","type":"address"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct ClipperCommonExchange.Signature","name":"theSignature","type":"tuple"},{"internalType":"bytes","name":"auxiliaryData","type":"bytes"}],"name":"swap","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"i","type":"uint256"}],"name":"tokenAt","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"depositAmounts","type":"uint256[]"},{"internalType":"uint256","name":"nDays","type":"uint256"},{"internalType":"uint256","name":"poolTokens","type":"uint256"},{"internalType":"uint256","name":"goodUntil","type":"uint256"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct ClipperCommonExchange.Signature","name":"theSignature","type":"tuple"}],"name":"transmitAndDeposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"inputToken","type":"address"},{"internalType":"uint256","name":"inputAmount","type":"uint256"},{"internalType":"uint256","name":"nDays","type":"uint256"},{"internalType":"uint256","name":"poolTokens","type":"uint256"},{"internalType":"uint256","name":"goodUntil","type":"uint256"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct ClipperCommonExchange.Signature","name":"theSignature","type":"tuple"}],"name":"transmitAndDepositSingleAsset","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"inputToken","type":"address"},{"internalType":"uint256","name":"inputAmount","type":"uint256"},{"internalType":"uint256","name":"outputAmount","type":"uint256"},{"internalType":"uint256","name":"goodUntil","type":"uint256"},{"internalType":"address","name":"destinationAddress","type":"address"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct ClipperCommonExchange.Signature","name":"theSignature","type":"tuple"},{"internalType":"bytes","name":"auxiliaryData","type":"bytes"}],"name":"transmitAndSellTokenForEth","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"inputToken","type":"address"},{"internalType":"address","name":"outputToken","type":"address"},{"internalType":"uint256","name":"inputAmount","type":"uint256"},{"internalType":"uint256","name":"outputAmount","type":"uint256"},{"internalType":"uint256","name":"goodUntil","type":"uint256"},{"internalType":"address","name":"destinationAddress","type":"address"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct ClipperCommonExchange.Signature","name":"theSignature","type":"tuple"},{"internalType":"bytes","name":"auxiliaryData","type":"bytes"}],"name":"transmitAndSwap","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unlockDeposit","outputs":[{"internalType":"uint256","name":"poolTokens","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"vestingDeposits","outputs":[{"internalType":"uint256","name":"lockedUntil","type":"uint256"},{"internalType":"uint256","name":"poolTokenAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenHolder","type":"address"},{"internalType":"uint256","name":"poolTokenAmountToBurn","type":"uint256"},{"internalType":"address","name":"assetAddress","type":"address"},{"internalType":"uint256","name":"assetAmount","type":"uint256"},{"internalType":"uint256","name":"goodUntil","type":"uint256"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct ClipperCommonExchange.Signature","name":"theSignature","type":"tuple"}],"name":"withdrawSingleAsset","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3646:15","statements":[{"nodeType":"YulBlock","src":"6:3:15","statements":[]},{"body":{"nodeType":"YulBlock","src":"74:117:15","statements":[{"nodeType":"YulAssignment","src":"84:22:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"99:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"93:5:15"},"nodeType":"YulFunctionCall","src":"93:13:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"84:5:15"}]},{"body":{"nodeType":"YulBlock","src":"169:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"178:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"181:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"171:6:15"},"nodeType":"YulFunctionCall","src":"171:12:15"},"nodeType":"YulExpressionStatement","src":"171:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"128:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"139:5:15"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"154:3:15","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"150:3:15"},"nodeType":"YulFunctionCall","src":"150:11:15"},{"kind":"number","nodeType":"YulLiteral","src":"163:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"146:3:15"},"nodeType":"YulFunctionCall","src":"146:19:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"135:3:15"},"nodeType":"YulFunctionCall","src":"135:31:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"125:2:15"},"nodeType":"YulFunctionCall","src":"125:42:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"118:6:15"},"nodeType":"YulFunctionCall","src":"118:50:15"},"nodeType":"YulIf","src":"115:2:15"}]},"name":"abi_decode_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"53:6:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"64:5:15","type":""}],"src":"14:177:15"},{"body":{"nodeType":"YulBlock","src":"336:1215:15","statements":[{"body":{"nodeType":"YulBlock","src":"382:26:15","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"391:6:15"},{"name":"value0","nodeType":"YulIdentifier","src":"399:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"384:6:15"},"nodeType":"YulFunctionCall","src":"384:22:15"},"nodeType":"YulExpressionStatement","src":"384:22:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"357:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"366:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"353:3:15"},"nodeType":"YulFunctionCall","src":"353:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"378:2:15","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"349:3:15"},"nodeType":"YulFunctionCall","src":"349:32:15"},"nodeType":"YulIf","src":"346:2:15"},{"nodeType":"YulAssignment","src":"417:50:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"457:9:15"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"427:29:15"},"nodeType":"YulFunctionCall","src":"427:40:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"417:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"476:12:15","value":{"kind":"number","nodeType":"YulLiteral","src":"486:2:15","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"480:2:15","type":""}]},{"nodeType":"YulAssignment","src":"497:59:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"541:9:15"},{"name":"_1","nodeType":"YulIdentifier","src":"552:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"537:3:15"},"nodeType":"YulFunctionCall","src":"537:18:15"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"507:29:15"},"nodeType":"YulFunctionCall","src":"507:49:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"497:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"565:39:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"589:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"600:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"585:3:15"},"nodeType":"YulFunctionCall","src":"585:18:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"579:5:15"},"nodeType":"YulFunctionCall","src":"579:25:15"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"569:6:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"613:28:15","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"631:2:15","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"635:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"627:3:15"},"nodeType":"YulFunctionCall","src":"627:10:15"},{"kind":"number","nodeType":"YulLiteral","src":"639:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"623:3:15"},"nodeType":"YulFunctionCall","src":"623:18:15"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"617:2:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"668:26:15","statements":[{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"677:6:15"},{"name":"value2","nodeType":"YulIdentifier","src":"685:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:15"},"nodeType":"YulFunctionCall","src":"670:22:15"},"nodeType":"YulExpressionStatement","src":"670:22:15"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"656:6:15"},{"name":"_2","nodeType":"YulIdentifier","src":"664:2:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"653:2:15"},"nodeType":"YulFunctionCall","src":"653:14:15"},"nodeType":"YulIf","src":"650:2:15"},{"nodeType":"YulVariableDeclaration","src":"703:32:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"717:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"728:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"713:3:15"},"nodeType":"YulFunctionCall","src":"713:22:15"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"707:2:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"783:26:15","statements":[{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"792:6:15"},{"name":"value2","nodeType":"YulIdentifier","src":"800:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"785:6:15"},"nodeType":"YulFunctionCall","src":"785:22:15"},"nodeType":"YulExpressionStatement","src":"785:22:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"762:2:15"},{"kind":"number","nodeType":"YulLiteral","src":"766:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"758:3:15"},"nodeType":"YulFunctionCall","src":"758:13:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"773:7:15"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"754:3:15"},"nodeType":"YulFunctionCall","src":"754:27:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"747:6:15"},"nodeType":"YulFunctionCall","src":"747:35:15"},"nodeType":"YulIf","src":"744:2:15"},{"nodeType":"YulVariableDeclaration","src":"818:19:15","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"834:2:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"828:5:15"},"nodeType":"YulFunctionCall","src":"828:9:15"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"822:2:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"860:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"862:16:15"},"nodeType":"YulFunctionCall","src":"862:18:15"},"nodeType":"YulExpressionStatement","src":"862:18:15"}]},"condition":{"arguments":[{"name":"_4","nodeType":"YulIdentifier","src":"852:2:15"},{"name":"_2","nodeType":"YulIdentifier","src":"856:2:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"849:2:15"},"nodeType":"YulFunctionCall","src":"849:10:15"},"nodeType":"YulIf","src":"846:2:15"},{"nodeType":"YulVariableDeclaration","src":"891:20:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"905:1:15","type":"","value":"5"},{"name":"_4","nodeType":"YulIdentifier","src":"908:2:15"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"901:3:15"},"nodeType":"YulFunctionCall","src":"901:10:15"},"variables":[{"name":"_5","nodeType":"YulTypedName","src":"895:2:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"920:23:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"940:2:15","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"934:5:15"},"nodeType":"YulFunctionCall","src":"934:9:15"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"924:6:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"952:56:15","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"974:6:15"},{"arguments":[{"arguments":[{"name":"_5","nodeType":"YulIdentifier","src":"990:2:15"},{"kind":"number","nodeType":"YulLiteral","src":"994:2:15","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"986:3:15"},"nodeType":"YulFunctionCall","src":"986:11:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1003:2:15","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"999:3:15"},"nodeType":"YulFunctionCall","src":"999:7:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"982:3:15"},"nodeType":"YulFunctionCall","src":"982:25:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"970:3:15"},"nodeType":"YulFunctionCall","src":"970:38:15"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"956:10:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"1067:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1069:16:15"},"nodeType":"YulFunctionCall","src":"1069:18:15"},"nodeType":"YulExpressionStatement","src":"1069:18:15"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1026:10:15"},{"name":"_2","nodeType":"YulIdentifier","src":"1038:2:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1023:2:15"},"nodeType":"YulFunctionCall","src":"1023:18:15"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1046:10:15"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1058:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1043:2:15"},"nodeType":"YulFunctionCall","src":"1043:22:15"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1020:2:15"},"nodeType":"YulFunctionCall","src":"1020:46:15"},"nodeType":"YulIf","src":"1017:2:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1105:2:15","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1109:10:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1098:6:15"},"nodeType":"YulFunctionCall","src":"1098:22:15"},"nodeType":"YulExpressionStatement","src":"1098:22:15"},{"nodeType":"YulVariableDeclaration","src":"1129:17:15","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1140:6:15"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"1133:3:15","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1162:6:15"},{"name":"_4","nodeType":"YulIdentifier","src":"1170:2:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1155:6:15"},"nodeType":"YulFunctionCall","src":"1155:18:15"},"nodeType":"YulExpressionStatement","src":"1155:18:15"},{"nodeType":"YulAssignment","src":"1182:22:15","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1193:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"1201:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1189:3:15"},"nodeType":"YulFunctionCall","src":"1189:15:15"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1182:3:15"}]},{"nodeType":"YulVariableDeclaration","src":"1213:22:15","value":{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1228:2:15"},{"name":"_1","nodeType":"YulIdentifier","src":"1232:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1224:3:15"},"nodeType":"YulFunctionCall","src":"1224:11:15"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"1217:3:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"1281:26:15","statements":[{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"1290:6:15"},{"name":"value2","nodeType":"YulIdentifier","src":"1298:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1283:6:15"},"nodeType":"YulFunctionCall","src":"1283:22:15"},"nodeType":"YulExpressionStatement","src":"1283:22:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nodeType":"YulIdentifier","src":"1258:2:15"},{"name":"_5","nodeType":"YulIdentifier","src":"1262:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1254:3:15"},"nodeType":"YulFunctionCall","src":"1254:11:15"},{"name":"_1","nodeType":"YulIdentifier","src":"1267:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1250:3:15"},"nodeType":"YulFunctionCall","src":"1250:20:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1272:7:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1247:2:15"},"nodeType":"YulFunctionCall","src":"1247:33:15"},"nodeType":"YulIf","src":"1244:2:15"},{"nodeType":"YulVariableDeclaration","src":"1316:15:15","value":{"name":"value2","nodeType":"YulIdentifier","src":"1325:6:15"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1320:1:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"1385:135:15","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1406:3:15"},{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1441:3:15"}],"functionName":{"name":"abi_decode_address_fromMemory","nodeType":"YulIdentifier","src":"1411:29:15"},"nodeType":"YulFunctionCall","src":"1411:34:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1399:6:15"},"nodeType":"YulFunctionCall","src":"1399:47:15"},"nodeType":"YulExpressionStatement","src":"1399:47:15"},{"nodeType":"YulAssignment","src":"1459:19:15","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1470:3:15"},{"name":"_1","nodeType":"YulIdentifier","src":"1475:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1466:3:15"},"nodeType":"YulFunctionCall","src":"1466:12:15"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"1459:3:15"}]},{"nodeType":"YulAssignment","src":"1491:19:15","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1502:3:15"},{"name":"_1","nodeType":"YulIdentifier","src":"1507:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1498:3:15"},"nodeType":"YulFunctionCall","src":"1498:12:15"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"1491:3:15"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1351:1:15"},{"name":"_4","nodeType":"YulIdentifier","src":"1354:2:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1348:2:15"},"nodeType":"YulFunctionCall","src":"1348:9:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1358:18:15","statements":[{"nodeType":"YulAssignment","src":"1360:14:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1369:1:15"},{"kind":"number","nodeType":"YulLiteral","src":"1372:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1365:3:15"},"nodeType":"YulFunctionCall","src":"1365:9:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1360:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"1344:3:15","statements":[]},"src":"1340:180:15"},{"nodeType":"YulAssignment","src":"1529:16:15","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"1539:6:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1529:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_address_$dyn_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"286:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"297:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"309:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"317:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"325:6:15","type":""}],"src":"196:1355:15"},{"body":{"nodeType":"YulBlock","src":"1695:293:15","statements":[{"nodeType":"YulVariableDeclaration","src":"1705:27:15","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1725:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1719:5:15"},"nodeType":"YulFunctionCall","src":"1719:13:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1709:6:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1741:12:15","value":{"name":"end","nodeType":"YulIdentifier","src":"1750:3:15"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1745:1:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"1814:77:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1839:3:15"},{"name":"i","nodeType":"YulIdentifier","src":"1844:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1835:3:15"},"nodeType":"YulFunctionCall","src":"1835:11:15"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1862:6:15"},{"name":"i","nodeType":"YulIdentifier","src":"1870:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1858:3:15"},"nodeType":"YulFunctionCall","src":"1858:14:15"},{"kind":"number","nodeType":"YulLiteral","src":"1874:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1854:3:15"},"nodeType":"YulFunctionCall","src":"1854:25:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1848:5:15"},"nodeType":"YulFunctionCall","src":"1848:32:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1828:6:15"},"nodeType":"YulFunctionCall","src":"1828:53:15"},"nodeType":"YulExpressionStatement","src":"1828:53:15"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1773:1:15"},{"name":"length","nodeType":"YulIdentifier","src":"1776:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1770:2:15"},"nodeType":"YulFunctionCall","src":"1770:13:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1784:21:15","statements":[{"nodeType":"YulAssignment","src":"1786:17:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1795:1:15"},{"kind":"number","nodeType":"YulLiteral","src":"1798:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1791:3:15"},"nodeType":"YulFunctionCall","src":"1791:12:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1786:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"1766:3:15","statements":[]},"src":"1762:129:15"},{"body":{"nodeType":"YulBlock","src":"1917:33:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1930:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"1935:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1926:3:15"},"nodeType":"YulFunctionCall","src":"1926:16:15"},{"name":"end","nodeType":"YulIdentifier","src":"1944:3:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1919:6:15"},"nodeType":"YulFunctionCall","src":"1919:29:15"},"nodeType":"YulExpressionStatement","src":"1919:29:15"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1906:1:15"},{"name":"length","nodeType":"YulIdentifier","src":"1909:6:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1903:2:15"},"nodeType":"YulFunctionCall","src":"1903:13:15"},"nodeType":"YulIf","src":"1900:2:15"},{"nodeType":"YulAssignment","src":"1959:23:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1970:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"1975:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1966:3:15"},"nodeType":"YulFunctionCall","src":"1966:16:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"1959:3:15"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1671:3:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1676:6:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"1687:3:15","type":""}],"src":"1556:432:15"},{"body":{"nodeType":"YulBlock","src":"2185:207:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2202:3:15"},{"kind":"string","nodeType":"YulLiteral","src":"2207:34:15","type":"","value":"EIP712Domain(string name,string "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2195:6:15"},"nodeType":"YulFunctionCall","src":"2195:47:15"},"nodeType":"YulExpressionStatement","src":"2195:47:15"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2262:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"2267:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2258:3:15"},"nodeType":"YulFunctionCall","src":"2258:12:15"},{"kind":"string","nodeType":"YulLiteral","src":"2272:34:15","type":"","value":"version,uint256 chainId,address "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2251:6:15"},"nodeType":"YulFunctionCall","src":"2251:56:15"},"nodeType":"YulExpressionStatement","src":"2251:56:15"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2327:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"2332:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2323:3:15"},"nodeType":"YulFunctionCall","src":"2323:12:15"},{"kind":"string","nodeType":"YulLiteral","src":"2337:20:15","type":"","value":"verifyingContract)"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2316:6:15"},"nodeType":"YulFunctionCall","src":"2316:42:15"},"nodeType":"YulExpressionStatement","src":"2316:42:15"},{"nodeType":"YulAssignment","src":"2367:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2378:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"2383:2:15","type":"","value":"82"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2374:3:15"},"nodeType":"YulFunctionCall","src":"2374:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2367:3:15"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"2169:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2177:3:15","type":""}],"src":"1993:399:15"},{"body":{"nodeType":"YulBlock","src":"2610:276:15","statements":[{"nodeType":"YulAssignment","src":"2620:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2632:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2643:3:15","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2628:3:15"},"nodeType":"YulFunctionCall","src":"2628:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2620:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2663:9:15"},{"name":"value0","nodeType":"YulIdentifier","src":"2674:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2656:6:15"},"nodeType":"YulFunctionCall","src":"2656:25:15"},"nodeType":"YulExpressionStatement","src":"2656:25:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2701:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2712:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2697:3:15"},"nodeType":"YulFunctionCall","src":"2697:18:15"},{"name":"value1","nodeType":"YulIdentifier","src":"2717:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2690:6:15"},"nodeType":"YulFunctionCall","src":"2690:34:15"},"nodeType":"YulExpressionStatement","src":"2690:34:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2744:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2755:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2740:3:15"},"nodeType":"YulFunctionCall","src":"2740:18:15"},{"name":"value2","nodeType":"YulIdentifier","src":"2760:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2733:6:15"},"nodeType":"YulFunctionCall","src":"2733:34:15"},"nodeType":"YulExpressionStatement","src":"2733:34:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2787:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2798:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2783:3:15"},"nodeType":"YulFunctionCall","src":"2783:18:15"},{"name":"value3","nodeType":"YulIdentifier","src":"2803:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2776:6:15"},"nodeType":"YulFunctionCall","src":"2776:34:15"},"nodeType":"YulExpressionStatement","src":"2776:34:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2830:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2841:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2826:3:15"},"nodeType":"YulFunctionCall","src":"2826:19:15"},{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"2851:6:15"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2867:3:15","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"2872:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2863:3:15"},"nodeType":"YulFunctionCall","src":"2863:11:15"},{"kind":"number","nodeType":"YulLiteral","src":"2876:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2859:3:15"},"nodeType":"YulFunctionCall","src":"2859:19:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2847:3:15"},"nodeType":"YulFunctionCall","src":"2847:32:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2819:6:15"},"nodeType":"YulFunctionCall","src":"2819:61:15"},"nodeType":"YulExpressionStatement","src":"2819:61:15"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2547:9:15","type":""},{"name":"value4","nodeType":"YulTypedName","src":"2558:6:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2566:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2574:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2582:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2590:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2601:4:15","type":""}],"src":"2397:489:15"},{"body":{"nodeType":"YulBlock","src":"2946:325:15","statements":[{"nodeType":"YulAssignment","src":"2956:22:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2970:1:15","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"2973:4:15"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2966:3:15"},"nodeType":"YulFunctionCall","src":"2966:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2956:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"2987:38:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3017:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"3023:1:15","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3013:3:15"},"nodeType":"YulFunctionCall","src":"3013:12:15"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"2991:18:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"3064:31:15","statements":[{"nodeType":"YulAssignment","src":"3066:27:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3080:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"3088:4:15","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3076:3:15"},"nodeType":"YulFunctionCall","src":"3076:17:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3066:6:15"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"3044:18:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3037:6:15"},"nodeType":"YulFunctionCall","src":"3037:26:15"},"nodeType":"YulIf","src":"3034:2:15"},{"body":{"nodeType":"YulBlock","src":"3154:111:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3175:1:15","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3182:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3187:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3178:3:15"},"nodeType":"YulFunctionCall","src":"3178:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3168:6:15"},"nodeType":"YulFunctionCall","src":"3168:31:15"},"nodeType":"YulExpressionStatement","src":"3168:31:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3219:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3222:4:15","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3212:6:15"},"nodeType":"YulFunctionCall","src":"3212:15:15"},"nodeType":"YulExpressionStatement","src":"3212:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3247:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3250:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3240:6:15"},"nodeType":"YulFunctionCall","src":"3240:15:15"},"nodeType":"YulExpressionStatement","src":"3240:15:15"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"3110:18:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"3133:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"3141:2:15","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3130:2:15"},"nodeType":"YulFunctionCall","src":"3130:14:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3107:2:15"},"nodeType":"YulFunctionCall","src":"3107:38:15"},"nodeType":"YulIf","src":"3104:2:15"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2926:4:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2935:6:15","type":""}],"src":"2891:380:15"},{"body":{"nodeType":"YulBlock","src":"3323:189:15","statements":[{"body":{"nodeType":"YulBlock","src":"3362:115:15","statements":[{"expression":{"arguments":[{"name":"ret","nodeType":"YulIdentifier","src":"3383:3:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3392:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3397:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3388:3:15"},"nodeType":"YulFunctionCall","src":"3388:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3376:6:15"},"nodeType":"YulFunctionCall","src":"3376:33:15"},"nodeType":"YulExpressionStatement","src":"3376:33:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3429:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3432:4:15","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3422:6:15"},"nodeType":"YulFunctionCall","src":"3422:15:15"},"nodeType":"YulExpressionStatement","src":"3422:15:15"},{"expression":{"arguments":[{"name":"ret","nodeType":"YulIdentifier","src":"3457:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"3462:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3450:6:15"},"nodeType":"YulFunctionCall","src":"3450:17:15"},"nodeType":"YulExpressionStatement","src":"3450:17:15"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3339:5:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3350:1:15","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3346:3:15"},"nodeType":"YulFunctionCall","src":"3346:6:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3336:2:15"},"nodeType":"YulFunctionCall","src":"3336:17:15"},"nodeType":"YulIf","src":"3333:2:15"},{"nodeType":"YulAssignment","src":"3486:20:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3497:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"3504:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3493:3:15"},"nodeType":"YulFunctionCall","src":"3493:13:15"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"3486:3:15"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3305:5:15","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"3315:3:15","type":""}],"src":"3276:236:15"},{"body":{"nodeType":"YulBlock","src":"3549:95:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3566:1:15","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3573:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"3578:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3569:3:15"},"nodeType":"YulFunctionCall","src":"3569:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3559:6:15"},"nodeType":"YulFunctionCall","src":"3559:31:15"},"nodeType":"YulExpressionStatement","src":"3559:31:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3606:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3609:4:15","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3599:6:15"},"nodeType":"YulFunctionCall","src":"3599:15:15"},"nodeType":"YulExpressionStatement","src":"3599:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3630:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3633:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3623:6:15"},"nodeType":"YulFunctionCall","src":"3623:15:15"},"nodeType":"YulExpressionStatement","src":"3623:15:15"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"3517:127:15"}]},"contents":"{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_address_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value0, value0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        let _1 := 32\n        value1 := abi_decode_address_fromMemory(add(headStart, _1))\n        let offset := mload(add(headStart, 64))\n        let _2 := sub(shl(64, 1), 1)\n        if gt(offset, _2) { revert(value2, value2) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(value2, value2) }\n        let _4 := mload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := shl(5, _4)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_5, 63), not(31)))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _4)\n        dst := add(memPtr, _1)\n        let src := add(_3, _1)\n        if gt(add(add(_3, _5), _1), dataEnd) { revert(value2, value2) }\n        let i := value2\n        for { } lt(i, _4) { i := add(i, 1) }\n        {\n            mstore(dst, abi_decode_address_fromMemory(src))\n            dst := add(dst, _1)\n            src := add(src, _1)\n        }\n        value2 := memPtr\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        let i := end\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            mstore(add(pos, i), mload(add(add(value0, i), 0x20)))\n        }\n        if gt(i, length) { mstore(add(pos, length), end) }\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    {\n        mstore(pos, \"EIP712Domain(string name,string \")\n        mstore(add(pos, 32), \"version,uint256 chainId,address \")\n        mstore(add(pos, 64), \"verifyingContract)\")\n        end := add(pos, 82)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0))\n        {\n            mstore(ret, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(ret, 0x24)\n        }\n        ret := add(value, 1)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n}","id":15,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0xE0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x4090 CODESIZE SUB DUP1 PUSH3 0x4090 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x471 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH32 0x436C697070657244697265637420506F6F6C20546F6B656E0000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 DUP3 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE PUSH1 0x8 DUP5 MSTORE PUSH8 0x10D3141491149413 PUSH1 0xC2 SHL SWAP1 DUP5 ADD MSTORE DUP2 MLOAD DUP7 SWAP4 DUP7 SWAP4 DUP7 SWAP4 SWAP1 SWAP3 PUSH3 0x9E SWAP2 PUSH1 0x3 SWAP2 PUSH3 0x3AE JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0xB4 SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x3AE JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x5 SSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT PUSH1 0x60 DUP5 SWAP1 SHL AND PUSH1 0x80 MSTORE DUP1 MLOAD PUSH1 0x0 SWAP1 JUMPDEST DUP1 DUP3 LT ISZERO PUSH3 0x136 JUMPI PUSH3 0x120 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH3 0x102 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x7 PUSH3 0x1BD PUSH1 0x20 SHL PUSH3 0x1C13 OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST POP DUP2 PUSH3 0x12D DUP2 PUSH3 0x5E6 JUMP JUMPDEST SWAP3 POP POP PUSH3 0xD4 JUMP JUMPDEST PUSH3 0x18B PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xD DUP2 MSTORE PUSH1 0x20 ADD PUSH13 0x10DB1A5C1C195C911A5C9958DD PUSH1 0x9A SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x312E302E3 PUSH1 0xDC SHL DUP2 MSTORE POP ADDRESS PUSH3 0x1DD PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0xC0 MSTORE POP POP POP PUSH1 0x60 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT AND PUSH1 0xA0 MSTORE POP PUSH3 0x1B4 PUSH3 0x1AE CALLER SWAP1 JUMP JUMPDEST PUSH3 0x30A JUMP JUMPDEST POP POP POP PUSH3 0x624 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1D4 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH3 0x35C JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x254 SWAP1 PUSH32 0x454950373132446F6D61696E28737472696E67206E616D652C737472696E6720 DUP2 MSTORE PUSH32 0x76657273696F6E2C75696E7432353620636861696E49642C6164647265737320 PUSH1 0x20 DUP3 ADD MSTORE PUSH18 0x766572696679696E67436F6E747261637429 PUSH1 0x70 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x52 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x27D SWAP2 SWAP1 PUSH3 0x56D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH3 0x2A6 SWAP2 SWAP1 PUSH3 0x56D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 SWAP1 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH3 0x3A5 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH3 0x1D7 JUMP JUMPDEST POP PUSH1 0x0 PUSH3 0x1D7 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x3BC SWAP1 PUSH3 0x5A9 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x3E0 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x42B JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x3FB JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x42B JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x42B JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x42B JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x40E JUMP JUMPDEST POP PUSH3 0x439 SWAP3 SWAP2 POP PUSH3 0x43D JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x439 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x43E JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x46C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x486 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH3 0x491 DUP5 PUSH3 0x454 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 PUSH3 0x4A2 DUP2 DUP7 ADD PUSH3 0x454 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x4BF JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x4D3 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH3 0x4E8 JUMPI PUSH3 0x4E8 PUSH3 0x60E JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH3 0x510 JUMPI PUSH3 0x510 PUSH3 0x60E JUMP JUMPDEST PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP6 DUP2 ADD SWAP4 POP DUP5 DUP7 ADD DUP3 DUP7 ADD DUP8 ADD DUP13 LT ISZERO PUSH3 0x52F JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP6 POP JUMPDEST DUP4 DUP7 LT ISZERO PUSH3 0x55C JUMPI PUSH3 0x547 DUP2 PUSH3 0x454 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP7 ADD SWAP4 DUP7 ADD PUSH3 0x533 JUMP JUMPDEST POP DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD DUP2 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x58F JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH3 0x573 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH3 0x59E JUMPI DUP3 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x5BE JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x5E0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH3 0x607 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0x60 SHR PUSH1 0xC0 MLOAD PUSH2 0x39B8 PUSH3 0x6D8 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x2001 ADD MSTORE PUSH2 0x25CD ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x488 ADD MSTORE DUP2 DUP2 PUSH2 0xA73 ADD MSTORE DUP2 DUP2 PUSH2 0xA9F ADD MSTORE DUP2 DUP2 PUSH2 0xAD9 ADD MSTORE DUP2 DUP2 PUSH2 0xB32 ADD MSTORE DUP2 DUP2 PUSH2 0x109B ADD MSTORE DUP2 DUP2 PUSH2 0x1111 ADD MSTORE DUP2 DUP2 PUSH2 0x114C ADD MSTORE DUP2 DUP2 PUSH2 0x11C6 ADD MSTORE DUP2 DUP2 PUSH2 0x1247 ADD MSTORE DUP2 DUP2 PUSH2 0x14C2 ADD MSTORE DUP2 DUP2 PUSH2 0x1531 ADD MSTORE DUP2 DUP2 PUSH2 0x167B ADD MSTORE DUP2 DUP2 PUSH2 0x19FE ADD MSTORE DUP2 DUP2 PUSH2 0x1A41 ADD MSTORE DUP2 DUP2 PUSH2 0x1A7C ADD MSTORE PUSH2 0x1AF6 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x570 ADD MSTORE PUSH2 0x20A6 ADD MSTORE PUSH2 0x39B8 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x21E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5250D730 GT PUSH2 0x123 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0xAB JUMPI DUP1 PUSH4 0xC72DA66A GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xC72DA66A EQ PUSH2 0x670 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x690 JUMPI DUP1 PUSH4 0xEB1C6453 EQ PUSH2 0x6D6 JUMPI DUP1 PUSH4 0xECC7633D EQ PUSH2 0x6F6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x723 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x5B2 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x5C7 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x5E7 JUMPI DUP1 PUSH4 0xC0D5EBFD EQ PUSH2 0x607 JUMPI DUP1 PUSH4 0xC325A549 EQ PUSH2 0x627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0xF2 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x518 JUMPI DUP1 PUSH4 0x87E08C25 EQ PUSH2 0x52D JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x540 JUMPI DUP1 PUSH4 0x8DDA8F3F EQ PUSH2 0x55E JUMPI DUP1 PUSH4 0x92A91A3A EQ PUSH2 0x592 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5250D730 EQ PUSH2 0x463 JUMPI DUP1 PUSH4 0x5AECDDA5 EQ PUSH2 0x476 JUMPI DUP1 PUSH4 0x62FB4E01 EQ PUSH2 0x4C2 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x4E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x29D0C8FC GT PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x368DFC18 GT PUSH2 0x175 JUMPI DUP1 PUSH4 0x368DFC18 EQ PUSH2 0x3CE JUMPI DUP1 PUSH4 0x377A368C EQ PUSH2 0x3EE JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x403 JUMPI DUP1 PUSH4 0x3B26E4EB EQ PUSH2 0x423 JUMPI DUP1 PUSH4 0x4CB6864C EQ PUSH2 0x443 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x29D0C8FC EQ PUSH2 0x352 JUMPI DUP1 PUSH4 0x2B651A6C EQ PUSH2 0x372 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x392 JUMPI DUP1 PUSH4 0x34CB3D7F EQ PUSH2 0x3AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1B6A8759 GT PUSH2 0x1ED JUMPI DUP1 PUSH4 0x1B6A8759 EQ PUSH2 0x2C4 JUMPI DUP1 PUSH4 0x1DC6F5A5 EQ PUSH2 0x2D9 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2FD JUMPI DUP1 PUSH4 0x27A9B424 EQ PUSH2 0x31D JUMPI DUP1 PUSH4 0x298410E5 EQ PUSH2 0x332 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x255 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x285 JUMPI DUP1 PUSH4 0x19F37361 EQ PUSH2 0x2A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x225 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x236 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23F PUSH2 0x743 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24C SWAP2 SWAP1 PUSH2 0x3763 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x261 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x275 PUSH2 0x270 CALLDATASIZE PUSH1 0x4 PUSH2 0x3455 JUMP JUMPDEST PUSH2 0x7D5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x24C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x291 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x24C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x275 PUSH2 0x2BF CALLDATASIZE PUSH1 0x4 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x7EC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x296 PUSH2 0x7F9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EE PUSH2 0x80A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x36D7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x309 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x275 PUSH2 0x318 CALLDATASIZE PUSH1 0x4 PUSH2 0x3296 JUMP JUMPDEST PUSH2 0x977 JUMP JUMPDEST PUSH2 0x330 PUSH2 0x32B CALLDATASIZE PUSH1 0x4 PUSH2 0x34DE JUMP JUMPDEST PUSH2 0xA28 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x330 PUSH2 0x34D CALLDATASIZE PUSH1 0x4 PUSH2 0x324A JUMP JUMPDEST PUSH2 0xB91 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x330 PUSH2 0x36D CALLDATASIZE PUSH1 0x4 PUSH2 0x35BE JUMP JUMPDEST PUSH2 0xBD3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x330 PUSH2 0x38D CALLDATASIZE PUSH1 0x4 PUSH2 0x32D1 JUMP JUMPDEST PUSH2 0xC5F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x24C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x296 PUSH2 0x3C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x324A JUMP JUMPDEST PUSH2 0xDAF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x330 PUSH2 0x3E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x3640 JUMP JUMPDEST PUSH2 0xDD3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x296 PUSH2 0xE4B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x275 PUSH2 0x41E CALLDATASIZE PUSH1 0x4 PUSH2 0x3455 JUMP JUMPDEST PUSH2 0xEE2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x330 PUSH2 0x43E CALLDATASIZE PUSH1 0x4 PUSH2 0x32D1 JUMP JUMPDEST PUSH2 0xF1E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x330 PUSH2 0x45E CALLDATASIZE PUSH1 0x4 PUSH2 0x34DE JUMP JUMPDEST PUSH2 0x104D JUMP JUMPDEST PUSH2 0x330 PUSH2 0x471 CALLDATASIZE PUSH1 0x4 PUSH2 0x33E2 JUMP JUMPDEST PUSH2 0x121B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x482 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AA PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x24C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x330 PUSH2 0x4DD CALLDATASIZE PUSH1 0x4 PUSH2 0x347E JUMP JUMPDEST PUSH2 0x1428 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x296 PUSH2 0x4FD CALLDATASIZE PUSH1 0x4 PUSH2 0x324A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x524 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x330 PUSH2 0x1619 JUMP JUMPDEST PUSH2 0x330 PUSH2 0x53B CALLDATASIZE PUSH1 0x4 PUSH2 0x3377 JUMP JUMPDEST PUSH2 0x164F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x54C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AA PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x59E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AA PUSH2 0x5AD CALLDATASIZE PUSH1 0x4 PUSH2 0x3640 JUMP JUMPDEST PUSH2 0x17E8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23F PUSH2 0x17F5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x275 PUSH2 0x5E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x3455 JUMP JUMPDEST PUSH2 0x1804 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x275 PUSH2 0x602 CALLDATASIZE PUSH1 0x4 PUSH2 0x3455 JUMP JUMPDEST PUSH2 0x189D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x330 PUSH2 0x622 CALLDATASIZE PUSH1 0x4 PUSH2 0x3571 JUMP JUMPDEST PUSH2 0x18AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x633 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x65B PUSH2 0x642 CALLDATASIZE PUSH1 0x4 PUSH2 0x324A JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x24C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x330 PUSH2 0x68B CALLDATASIZE PUSH1 0x4 PUSH2 0x34DE JUMP JUMPDEST PUSH2 0x199B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x69C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x296 PUSH2 0x6AB CALLDATASIZE PUSH1 0x4 PUSH2 0x3264 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x275 PUSH2 0x6F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x1B4B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x702 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x296 PUSH2 0x711 CALLDATASIZE PUSH1 0x4 PUSH2 0x324A JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x72F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x330 PUSH2 0x73E CALLDATASIZE PUSH1 0x4 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x1B7B JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x752 SWAP1 PUSH2 0x38FC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x77E SWAP1 PUSH2 0x38FC JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7CB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7A0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7CB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7AE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E2 CALLER DUP5 DUP5 PUSH2 0x1C28 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E6 PUSH1 0x7 DUP4 PUSH2 0x1D4C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x805 PUSH1 0x7 PUSH2 0x1D6E JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 PUSH2 0x818 PUSH2 0x7F9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x843 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x86C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x898 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x8C1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x95D JUMPI PUSH1 0x0 PUSH2 0x8DA DUP3 PUSH2 0x17E8 JUMP JUMPDEST SWAP1 POP PUSH2 0x8E5 DUP2 PUSH2 0xDAF JUMP JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x905 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x932 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE POP DUP1 PUSH2 0x955 DUP2 PUSH2 0x3931 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x8C7 JUMP JUMPDEST POP DUP2 DUP2 PUSH2 0x969 PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP POP POP POP SWAP1 SWAP2 SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x984 DUP5 DUP5 DUP5 PUSH2 0x1D78 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0xA0E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6C6C6F77616E6365 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA1B DUP6 CALLER DUP6 DUP5 SUB PUSH2 0x1C28 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP5 DUP1 TIMESTAMP GT ISZERO PUSH2 0xA49 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x37CB JUMP JUMPDEST PUSH2 0xA52 DUP10 PUSH2 0x7EC JUMP JUMPDEST PUSH2 0xA6E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x37F5 JUMP JUMPDEST PUSH2 0xA98 PUSH32 0x0 DUP10 PUSH2 0x1F48 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAC8 PUSH32 0x0 DUP12 DUP12 DUP12 DUP12 DUP12 PUSH2 0x1FE9 JUMP JUMPDEST SWAP1 POP PUSH2 0xAD4 DUP2 DUP7 PUSH2 0x2032 JUMP JUMPDEST PUSH2 0xAFE PUSH32 0x0 DUP11 PUSH2 0x2131 JUMP JUMPDEST PUSH2 0xB08 DUP11 DUP10 PUSH2 0x2177 JUMP JUMPDEST PUSH2 0xB1C PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP8 DUP11 PUSH2 0x2196 JUMP JUMPDEST DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3963 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP13 DUP13 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0xB7D SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3825 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xBBB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x3796 JUMP JUMPDEST PUSH2 0xBC6 PUSH1 0x7 DUP3 PUSH2 0x1C13 JUMP JUMPDEST POP PUSH2 0xBD0 DUP2 PUSH2 0x21F9 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP6 JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0xC46 JUMPI PUSH1 0x0 DUP9 DUP9 DUP5 DUP2 DUP2 LT PUSH2 0xC01 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0xC33 JUMPI PUSH2 0xC33 CALLER ADDRESS DUP4 PUSH2 0xC22 DUP8 PUSH2 0x17E8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 SWAP2 SWAP1 PUSH2 0x220B JUMP JUMPDEST DUP3 PUSH2 0xC3D DUP2 PUSH2 0x3931 JUMP JUMPDEST SWAP4 POP POP POP PUSH2 0xBD7 JUMP JUMPDEST PUSH2 0xC55 CALLER DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x121B JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP5 DUP1 TIMESTAMP GT ISZERO PUSH2 0xC80 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x37CB JUMP JUMPDEST PUSH2 0xC89 DUP11 PUSH2 0x7EC JUMP JUMPDEST DUP1 ISZERO PUSH2 0xC99 JUMPI POP PUSH2 0xC99 DUP10 PUSH2 0x7EC JUMP JUMPDEST PUSH2 0xCDF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x436C69707065723A20496E76616C696420746F6B656E73 PUSH1 0x48 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCEF DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 PUSH2 0x1FE9 JUMP JUMPDEST SWAP1 POP PUSH2 0xCFB DUP2 DUP7 PUSH2 0x2032 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0xD07 DUP12 PUSH2 0x2243 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD14 DUP13 PUSH2 0xDAF JUMP JUMPDEST PUSH2 0xD1E SWAP1 DUP4 PUSH2 0x38B9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD2D DUP12 DUP4 DUP13 PUSH2 0x2313 JUMP JUMPDEST SWAP1 POP PUSH2 0xD39 DUP14 DUP5 PUSH2 0x239C JUMP JUMPDEST PUSH2 0xD43 DUP13 DUP3 PUSH2 0x2177 JUMP JUMPDEST PUSH2 0xD57 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 AND DUP10 DUP4 PUSH2 0x2196 JUMP JUMPDEST DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP15 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3963 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP6 DUP6 DUP12 DUP12 PUSH1 0x40 MLOAD PUSH2 0xD98 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3825 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDE PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xDED DUP4 PUSH5 0x2540BE400 PUSH2 0x389A JUMP JUMPDEST PUSH2 0xDF7 SWAP2 SWAP1 PUSH2 0x387A JUMP JUMPDEST SWAP1 POP PUSH2 0xE03 CALLER DUP4 PUSH2 0x23D5 JUMP JUMPDEST PUSH2 0xE0C DUP2 PUSH2 0x2523 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE CALLER SWAP2 PUSH32 0x92CCF450A286A957AF52509BC1C9939D1A6A481783E142E41E2499F0BB66EBC6 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE56 CALLER PUSH2 0x1B4B JUMP JUMPDEST PUSH2 0xEB4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436C69707065724469726563743A204465706F7369742063616E6E6F74206265 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x81D5B9B1BD8DAD959 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST POP CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP2 ADD DUP1 SLOAD SWAP2 DUP4 SWAP1 SSTORE SWAP2 SWAP1 SWAP2 SSTORE SWAP1 PUSH2 0xEDF SWAP1 ADDRESS SWAP1 DUP4 PUSH2 0x1D78 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 PUSH2 0x7E2 SWAP2 DUP6 SWAP1 PUSH2 0xF19 SWAP1 DUP7 SWAP1 PUSH2 0x3862 JUMP JUMPDEST PUSH2 0x1C28 JUMP JUMPDEST DUP5 DUP1 TIMESTAMP GT ISZERO PUSH2 0xF3F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x37CB JUMP JUMPDEST PUSH2 0xF48 DUP11 PUSH2 0x7EC JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF58 JUMPI POP PUSH2 0xF58 DUP10 PUSH2 0x7EC JUMP JUMPDEST PUSH2 0xF9E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x436C69707065723A20496E76616C696420746F6B656E73 PUSH1 0x48 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH2 0xFB3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND CALLER ADDRESS DUP12 PUSH2 0x220B JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFC3 DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 PUSH2 0x1FE9 JUMP JUMPDEST SWAP1 POP PUSH2 0xFCF DUP2 DUP7 PUSH2 0x2032 JUMP JUMPDEST PUSH2 0xFD9 DUP12 DUP11 PUSH2 0x2131 JUMP JUMPDEST PUSH2 0xFE3 DUP11 DUP10 PUSH2 0x2177 JUMP JUMPDEST PUSH2 0xFF7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP8 DUP11 PUSH2 0x2196 JUMP JUMPDEST DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3963 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP13 DUP13 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0x1038 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3825 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP5 DUP1 TIMESTAMP GT ISZERO PUSH2 0x106E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x37CB JUMP JUMPDEST PUSH2 0x1077 DUP10 PUSH2 0x7EC JUMP JUMPDEST PUSH2 0x1093 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x37F5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10C3 DUP11 PUSH32 0x0 DUP12 DUP12 DUP12 DUP12 PUSH2 0x1FE9 JUMP JUMPDEST SWAP1 POP PUSH2 0x10CF DUP2 DUP7 PUSH2 0x2032 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10DA DUP12 PUSH2 0x2243 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x10E7 DUP13 PUSH2 0xDAF JUMP JUMPDEST PUSH2 0x10F1 SWAP1 DUP4 PUSH2 0x38B9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1100 DUP13 DUP4 DUP14 PUSH2 0x2313 JUMP JUMPDEST SWAP1 POP PUSH2 0x110C DUP14 DUP5 PUSH2 0x239C JUMP JUMPDEST PUSH2 0x1136 PUSH32 0x0 DUP3 PUSH2 0x2177 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1198 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x11AC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x11BA DUP10 DUP3 PUSH2 0x1F48 JUMP JUMPDEST DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP15 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3963 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP6 DUP6 DUP13 DUP13 PUSH1 0x40 MLOAD PUSH2 0xD98 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3825 JUMP JUMPDEST DUP2 DUP1 TIMESTAMP GT ISZERO PUSH2 0x123C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x37CB JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x126C JUMPI PUSH2 0x126C PUSH32 0x0 CALLVALUE PUSH2 0x1F48 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND EQ PUSH2 0x12D4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C69737465642073656E64657220646F6573206E6F74206D61746368206D7367 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x1739B2B73232B9 PUSH1 0xC9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12E4 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x258B JUMP JUMPDEST SWAP1 POP PUSH2 0x12F0 DUP2 DUP5 PUSH2 0x2032 JUMP JUMPDEST PUSH1 0x0 DUP8 JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x13CC JUMPI PUSH1 0x0 DUP11 DUP11 DUP5 DUP2 DUP2 LT PUSH2 0x131E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0x13B9 JUMPI PUSH1 0x0 PUSH2 0x133B DUP5 PUSH2 0x17E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1348 DUP3 PUSH2 0x2243 JUMP JUMPDEST SWAP1 POP DUP3 PUSH2 0x1354 DUP4 PUSH2 0xDAF JUMP JUMPDEST PUSH2 0x135E SWAP1 DUP4 PUSH2 0x38B9 JUMP JUMPDEST LT ISZERO PUSH2 0x13AC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420746F6B656E206465706F736974000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH2 0x13B6 DUP3 DUP3 PUSH2 0x239C JUMP JUMPDEST POP POP JUMPDEST DUP3 PUSH2 0x13C3 DUP2 PUSH2 0x3931 JUMP JUMPDEST SWAP4 POP POP POP PUSH2 0x12F4 JUMP JUMPDEST PUSH2 0x13D7 DUP12 DUP10 DUP10 PUSH2 0x259C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 AND SWAP2 PUSH32 0x73A19DD210F1A7F902193214C0EE91DD35EE5B4D920CBA8D519ECA65A7B488CA SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP1 TIMESTAMP GT ISZERO PUSH2 0x1449 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x37CB JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND EQ PUSH2 0x14AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x746F6B656E486F6C64657220646F6573206E6F74206D61746368206D73672E73 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x32B73232B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH2 0x14E6 JUMPI POP PUSH32 0x0 SWAP5 POP PUSH1 0x1 JUMPDEST PUSH1 0x0 PUSH2 0x14F5 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x25B6 JUMP JUMPDEST SWAP1 POP PUSH2 0x1501 DUP2 DUP6 PUSH2 0x2032 JUMP JUMPDEST PUSH2 0x150B CALLER DUP10 PUSH2 0x23D5 JUMP JUMPDEST PUSH2 0x1515 DUP8 DUP8 PUSH2 0x2177 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x15A4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x157D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1591 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x159F CALLER DUP8 PUSH2 0x1F48 JUMP JUMPDEST PUSH2 0x15B8 JUMP JUMPDEST PUSH2 0x15B8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND CALLER DUP9 PUSH2 0x2196 JUMP JUMPDEST DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x41E79959BAD1D45680578F8A544FB5AF76D72B04090E65A51B4D0EAAB959A9AB DUP11 DUP10 PUSH1 0x40 MLOAD PUSH2 0x1606 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1643 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x3796 JUMP JUMPDEST PUSH2 0x164D PUSH1 0x0 PUSH2 0x25FD JUMP JUMPDEST JUMP JUMPDEST DUP2 DUP1 TIMESTAMP GT ISZERO PUSH2 0x1670 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x37CB JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x16A0 JUMPI PUSH2 0x16A0 PUSH32 0x0 CALLVALUE PUSH2 0x1F48 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND EQ DUP1 ISZERO PUSH2 0x16BC JUMPI POP PUSH2 0x16BC DUP8 PUSH2 0x7EC JUMP JUMPDEST PUSH2 0x16F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x125B9D985B1A59081A5B9C1D5D PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1708 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x264F JUMP JUMPDEST SWAP1 POP PUSH2 0x1714 DUP2 DUP5 PUSH2 0x2032 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x171F DUP10 PUSH2 0x2243 JUMP JUMPDEST SWAP1 POP DUP8 PUSH2 0x172B DUP11 PUSH2 0xDAF JUMP JUMPDEST PUSH2 0x1735 SWAP1 DUP4 PUSH2 0x38B9 JUMP JUMPDEST LT ISZERO PUSH2 0x1783 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420746F6B656E206465706F736974000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH2 0x178D DUP10 DUP3 PUSH2 0x239C JUMP JUMPDEST PUSH2 0x1798 DUP11 DUP9 DUP9 PUSH2 0x259C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND SWAP2 PUSH32 0x73A19DD210F1A7F902193214C0EE91DD35EE5B4D920CBA8D519ECA65A7B488CA SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E6 PUSH1 0x7 DUP4 PUSH2 0x2660 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x752 SWAP1 PUSH2 0x38FC JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x1886 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH2 0x1893 CALLER DUP6 DUP6 DUP5 SUB PUSH2 0x1C28 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E2 CALLER DUP5 DUP5 PUSH2 0x1D78 JUMP JUMPDEST DUP2 DUP1 TIMESTAMP GT ISZERO PUSH2 0x18CB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x37CB JUMP JUMPDEST PUSH2 0x18D4 DUP8 PUSH2 0x7EC JUMP JUMPDEST PUSH2 0x1910 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x125B9D985B1A59081A5B9C1D5D PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH2 0x1925 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND CALLER ADDRESS DUP10 PUSH2 0x220B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1935 CALLER DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x264F JUMP JUMPDEST SWAP1 POP PUSH2 0x1941 DUP2 DUP5 PUSH2 0x2032 JUMP JUMPDEST PUSH2 0x194B DUP9 DUP9 PUSH2 0x2131 JUMP JUMPDEST PUSH2 0x1956 CALLER DUP8 DUP8 PUSH2 0x259C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE CALLER SWAP2 PUSH32 0x73A19DD210F1A7F902193214C0EE91DD35EE5B4D920CBA8D519ECA65A7B488CA SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP5 DUP1 TIMESTAMP GT ISZERO PUSH2 0x19BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x37CB JUMP JUMPDEST PUSH2 0x19C5 DUP10 PUSH2 0x7EC JUMP JUMPDEST PUSH2 0x19E1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x37F5 JUMP JUMPDEST PUSH2 0x19F6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND CALLER ADDRESS DUP12 PUSH2 0x220B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A26 DUP11 PUSH32 0x0 DUP12 DUP12 DUP12 DUP12 PUSH2 0x1FE9 JUMP JUMPDEST SWAP1 POP PUSH2 0x1A32 DUP2 DUP7 PUSH2 0x2032 JUMP JUMPDEST PUSH2 0x1A3C DUP11 DUP11 PUSH2 0x2131 JUMP JUMPDEST PUSH2 0x1A66 PUSH32 0x0 DUP10 PUSH2 0x2177 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1AC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1ADC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x1AEA DUP7 DUP10 PUSH2 0x1F48 JUMP JUMPDEST DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3963 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP13 DUP13 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0xB7D SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3825 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0xA21 JUMPI POP SLOAD TIMESTAMP LT ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1BA5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x3796 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1C0A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH2 0xBD0 DUP2 PUSH2 0x25FD JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA21 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x266C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1C8A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1CEB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xA21 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E6 DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1DDC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1E3E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1EB6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x1EED SWAP1 DUP5 SWAP1 PUSH2 0x3862 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x1F39 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1F95 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1F9A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x1FE4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x10D85B1B081DDA5D1A081D985B1D594819985A5B1959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA05 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1FFA DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH2 0x26BB JUMP JUMPDEST SWAP1 POP PUSH2 0x2026 PUSH32 0x0 DUP3 PUSH2 0x27F3 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP4 PUSH2 0x2044 PUSH1 0x20 DUP6 ADD DUP6 PUSH2 0x3670 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 ADD DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0xFF SWAP1 SWAP3 AND DUP3 DUP3 ADD MSTORE SWAP2 DUP6 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP1 DUP5 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2098 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1FE4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D657373616765207369676E656420627920696E636F72726563742061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x213D DUP5 PUSH2 0x2833 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x2155 DUP3 PUSH2 0x2150 DUP6 DUP5 PUSH2 0x3862 JUMP JUMPDEST PUSH2 0x28CB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2183 DUP5 PUSH2 0x2833 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x2155 DUP3 PUSH2 0x2150 DUP6 DUP5 PUSH2 0x38B9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x1FE4 SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x28F7 JUMP JUMPDEST PUSH2 0xBD0 DUP2 PUSH2 0x2206 DUP4 PUSH2 0x2243 JUMP JUMPDEST PUSH2 0x239C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x1F42 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD PUSH2 0x21C2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD ADDRESS PUSH1 0x24 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x44 SWAP1 SWAP2 ADD DUP3 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x70A08231 PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH2 0x229A SWAP2 SWAP1 PUSH2 0x36BB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x22D5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x22DA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x22EE JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST PUSH2 0x22F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x230B SWAP2 SWAP1 PUSH2 0x3658 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 EQ ISZERO PUSH2 0x2324 JUMPI POP DUP1 PUSH2 0xA21 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH2 0x2336 DUP6 PUSH5 0x2540BE400 PUSH2 0x389A JUMP JUMPDEST PUSH2 0x2340 SWAP2 SWAP1 PUSH2 0x387A JUMP JUMPDEST SWAP1 POP PUSH2 0x2355 PUSH5 0x2540BE400 PUSH4 0x2FAF080 PUSH2 0x3862 JUMP JUMPDEST DUP2 LT PUSH2 0x238C JUMPI PUSH5 0x2540BE400 DUP4 PUSH2 0x2370 DUP3 PUSH4 0x2FAF080 PUSH2 0x3862 JUMP JUMPDEST PUSH2 0x237A SWAP2 SWAP1 PUSH2 0x389A JUMP JUMPDEST PUSH2 0x2384 SWAP2 SWAP1 PUSH2 0x387A JUMP JUMPDEST SWAP2 POP POP PUSH2 0xA21 JUMP JUMPDEST PUSH5 0x2540BE400 PUSH2 0x237A DUP5 DUP4 PUSH2 0x389A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23A7 DUP4 PUSH2 0x2833 JUMP JUMPDEST POP SWAP1 POP PUSH2 0x23B4 DUP2 DUP4 PUSH2 0x28CB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2435 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x24A9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP4 DUP4 SUB SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x24D8 SWAP1 DUP5 SWAP1 PUSH2 0x38B9 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2530 PUSH2 0x7F9 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x1F42 JUMPI PUSH1 0x0 PUSH2 0x2546 DUP4 PUSH2 0x17E8 JUMP JUMPDEST SWAP1 POP PUSH5 0x2540BE400 PUSH2 0x2557 DUP3 PUSH2 0xDAF JUMP JUMPDEST PUSH2 0x2561 SWAP1 DUP8 PUSH2 0x389A JUMP JUMPDEST PUSH2 0x256B SWAP2 SWAP1 PUSH2 0x387A JUMP JUMPDEST SWAP4 POP PUSH2 0x2578 DUP2 CALLER DUP7 PUSH2 0x29C9 JUMP JUMPDEST DUP3 PUSH2 0x2582 DUP2 PUSH2 0x3931 JUMP JUMPDEST SWAP4 POP POP POP PUSH2 0x2533 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1FFA DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH2 0x2A48 JUMP JUMPDEST DUP2 PUSH2 0x25AB JUMPI PUSH2 0x1FE4 DUP4 DUP3 PUSH2 0x2B7C JUMP JUMPDEST PUSH2 0x1FE4 DUP4 DUP4 DUP4 PUSH2 0x2C5B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x25C6 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x2DCF JUMP JUMPDEST SWAP1 POP PUSH2 0x25F2 PUSH32 0x0 DUP3 PUSH2 0x27F3 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1FFA DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH2 0x2EEC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA21 DUP4 DUP4 PUSH2 0x2FED JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x26B3 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x7E6 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x7E6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x277A SWAP1 PUSH32 0x4F66666572537472756374286164647265737320696E7075745F746F6B656E2C DUP2 MSTORE PUSH32 0x61646472657373206F75747075745F746F6B656E2C75696E7432353620696E70 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x75745F616D6F756E742C75696E74323536206F75747075745F616D6F756E742C PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x75696E7432353620676F6F645F756E74696C2C61646472657373206465737469 PUSH1 0x60 DUP3 ADD MSTORE PUSH15 0x6E6174696F6E5F6164647265737329 PUSH1 0x88 SHL PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x8F ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 SWAP1 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 DUP9 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD DUP8 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0xC0 DUP3 ADD DUP6 SWAP1 MSTORE DUP4 AND PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 ADD JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x22 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x42 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x62 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 AND SWAP1 PUSH1 0xE0 DUP2 SWAP1 SHR PUSH2 0x2866 ORIGIN NUMBER PUSH2 0x3862 JUMP JUMPDEST SWAP4 POP DUP1 PUSH4 0xFFFFFFFF AND DUP5 PUSH4 0xFFFFFFFF AND EQ ISZERO PUSH2 0x28C4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436C69707065723A204661696C656420747820756E697175656E657373000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA05 JUMP JUMPDEST POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28D6 DUP3 PUSH2 0x3025 JUMP JUMPDEST PUSH2 0xA21 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND PUSH2 0x3862 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x294C DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3092 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x1FE4 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x296A SWAP2 SWAP1 PUSH2 0x3620 JUMP JUMPDEST PUSH2 0x1FE4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x5 SLOAD EQ ISZERO PUSH2 0x2A1C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x5 SSTORE PUSH2 0x2A35 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP4 DUP4 PUSH2 0x2196 JUMP JUMPDEST PUSH2 0x2A3E DUP4 PUSH2 0x21F9 JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x5 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2A5E SWAP3 SWAP2 SWAP1 PUSH2 0x3691 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2B10 SWAP1 PUSH32 0x4465706F73697453747275637428616464726573732073656E6465722C75696E DUP2 MSTORE PUSH32 0x743235365B5D206465706F7369745F616D6F756E74732C75696E743235362064 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x6179735F6C6F636B65642C75696E7432353620706F6F6C5F746F6B656E732C75 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x696E7432353620676F6F645F756E74696C29 PUSH1 0x70 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x72 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 SWAP1 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP2 POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2BD2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA05 JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2BE4 SWAP2 SWAP1 PUSH2 0x3862 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x2C11 SWAP1 DUP5 SWAP1 PUSH2 0x3862 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x2CE6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x4C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436C69707065724469726563743A2043616E6E6F742063726561746520766573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x74696E67206465706F73697420776974686F757420706F736974697665207665 PUSH1 0x64 DUP3 ADD MSTORE PUSH12 0x1CDD1A5B99C81C195C9A5BD9 PUSH1 0xA2 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD ISZERO PUSH2 0x2D6E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436C69707065724469726563743A204465706F7369746F7220616C7265616479 PUSH1 0x44 DUP3 ADD MSTORE PUSH22 0x81A185CC8185B881858DD1A5D994819195C1BDCDA5D PUSH1 0x52 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 PUSH3 0x15180 PUSH2 0x2D8A SWAP2 SWAP1 PUSH2 0x389A JUMP JUMPDEST PUSH2 0x2D94 SWAP1 TIMESTAMP PUSH2 0x3862 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 DUP3 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP3 MLOAD DUP2 SSTORE SWAP1 DUP3 ADD MLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SSTORE SWAP1 POP PUSH2 0x1F42 ADDRESS DUP4 PUSH2 0x2B7C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2E85 SWAP1 PUSH32 0x5769746864726177616C537472756374286164647265737320746F6B656E5F68 DUP2 MSTORE PUSH32 0x6F6C6465722C75696E7432353620706F6F6C5F746F6B656E5F616D6F756E745F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x746F5F6275726E2C616464726573732061737365745F616464726573732C7569 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E743235362061737365745F616D6F756E742C75696E7432353620676F6F645F PUSH1 0x60 DUP3 ADD MSTORE PUSH6 0x756E74696C29 PUSH1 0xD0 SHL PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x86 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 DUP2 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP9 DUP10 AND DUP4 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD SWAP8 SWAP1 SWAP8 MSTORE SWAP5 SWAP1 SWAP7 AND PUSH1 0x80 DUP8 ADD MSTORE POP PUSH1 0xA0 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xC0 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 MLOAD DUP1 DUP6 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xE0 SWAP1 SWAP4 ADD SWAP1 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2F93 SWAP1 PUSH32 0x53696E676C654465706F73697453747275637428616464726573732073656E64 DUP2 MSTORE PUSH32 0x65722C6164647265737320746F6B656E2C75696E7432353620616D6F756E742C PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x75696E7432353620646179735F6C6F636B65642C75696E7432353620706F6F6C PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F746F6B656E732C75696E7432353620676F6F645F756E74696C290000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x7B ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 SWAP1 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP8 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP4 SWAP1 MSTORE PUSH2 0x100 ADD PUSH2 0x27D1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x3012 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP3 GT ISZERO PUSH2 0x308E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2032 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x32342062697473 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x230B DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 DUP5 EXTCODESIZE PUSH2 0x30EB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x3107 SWAP2 SWAP1 PUSH2 0x36BB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3144 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3149 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x25F2 DUP3 DUP3 DUP7 PUSH1 0x60 DUP4 ISZERO PUSH2 0x3163 JUMPI POP DUP2 PUSH2 0xA21 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x3173 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP2 SWAP1 PUSH2 0x3763 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x31A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x31BA JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x31D1 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x31EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3204 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x321B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x31EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3244 JUMPI DUP1 DUP2 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x325B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xA21 DUP3 PUSH2 0x318D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3276 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x327F DUP4 PUSH2 0x318D JUMP JUMPDEST SWAP2 POP PUSH2 0x328D PUSH1 0x20 DUP5 ADD PUSH2 0x318D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x32AA JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x32B3 DUP5 PUSH2 0x318D JUMP JUMPDEST SWAP3 POP PUSH2 0x32C1 PUSH1 0x20 DUP6 ADD PUSH2 0x318D JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x140 DUP11 DUP13 SUB SLT ISZERO PUSH2 0x32EF JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x32F8 DUP11 PUSH2 0x318D JUMP JUMPDEST SWAP9 POP PUSH2 0x3306 PUSH1 0x20 DUP12 ADD PUSH2 0x318D JUMP JUMPDEST SWAP8 POP PUSH1 0x40 DUP11 ADD CALLDATALOAD SWAP7 POP PUSH1 0x60 DUP11 ADD CALLDATALOAD SWAP6 POP PUSH1 0x80 DUP11 ADD CALLDATALOAD SWAP5 POP PUSH2 0x3329 PUSH1 0xA0 DUP12 ADD PUSH2 0x318D JUMP JUMPDEST SWAP4 POP PUSH2 0x3338 DUP12 PUSH1 0xC0 DUP13 ADD PUSH2 0x3233 JUMP JUMPDEST SWAP3 POP PUSH2 0x120 DUP11 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3354 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3360 DUP13 DUP3 DUP14 ADD PUSH2 0x31F3 JUMP JUMPDEST SWAP2 POP DUP1 SWAP4 POP POP DUP1 SWAP2 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x120 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x3392 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x339B DUP9 PUSH2 0x318D JUMP JUMPDEST SWAP7 POP PUSH2 0x33A9 PUSH1 0x20 DUP10 ADD PUSH2 0x318D JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP2 POP PUSH2 0x33D4 DUP10 PUSH1 0xC0 DUP11 ADD PUSH2 0x3233 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x33FD JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3406 DUP9 PUSH2 0x318D JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3421 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x342D DUP11 DUP3 DUP12 ADD PUSH2 0x31A9 JUMP JUMPDEST SWAP1 SWAP8 POP SWAP6 POP POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP PUSH2 0x33D4 DUP10 PUSH1 0xA0 DUP11 ADD PUSH2 0x3233 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3467 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3470 DUP4 PUSH2 0x318D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3497 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x34A0 DUP8 PUSH2 0x318D JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH2 0x34B5 PUSH1 0x40 DUP9 ADD PUSH2 0x318D JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0x34D2 DUP9 PUSH1 0xA0 DUP10 ADD PUSH2 0x3233 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x120 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x34FA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3503 DUP10 PUSH2 0x318D JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH2 0x3526 PUSH1 0x80 DUP11 ADD PUSH2 0x318D JUMP JUMPDEST SWAP4 POP PUSH2 0x3535 DUP11 PUSH1 0xA0 DUP12 ADD PUSH2 0x3233 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3551 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x355D DUP12 DUP3 DUP13 ADD PUSH2 0x31F3 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x358A JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x3593 DUP8 PUSH2 0x318D JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0x34D2 DUP9 PUSH1 0xA0 DUP10 ADD PUSH2 0x3233 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xE0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x35D6 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x35EC JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x35F8 DUP10 DUP3 DUP11 ADD PUSH2 0x31A9 JUMP JUMPDEST SWAP1 SWAP8 POP SWAP6 POP POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0x34D2 DUP9 PUSH1 0x80 DUP10 ADD PUSH2 0x3233 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3631 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xA21 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3651 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3669 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3681 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xA21 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFB SHL SUB DUP4 GT ISZERO PUSH2 0x36A6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP6 DUP5 CALLDATACOPY SWAP2 SWAP1 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x36CD DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x38D0 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP5 MLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x20 SWAP1 PUSH1 0x80 DUP5 ADD SWAP1 DUP3 DUP9 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3710 JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x36F4 JUMP JUMPDEST POP POP POP DUP4 DUP2 SUB DUP3 DUP6 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE DUP7 DUP4 ADD SWAP2 DUP4 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x374D JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x3728 JUMP JUMPDEST POP POP DUP1 SWAP4 POP POP POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x3782 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x38D0 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x10DB1A5C1C195C8E88115E1C1A5C9959 PUSH1 0x82 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x21B634B83832B91D1024B73B30B634B2103A37B5B2B7 PUSH1 0x51 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP5 DUP2 MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE DUP2 PUSH1 0x60 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x80 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x80 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x3875 JUMPI PUSH2 0x3875 PUSH2 0x394C JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3895 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x38B4 JUMPI PUSH2 0x38B4 PUSH2 0x394C JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x38CB JUMPI PUSH2 0x38CB PUSH2 0x394C JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x38EB JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x38D3 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1F42 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x3910 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x3244 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x3945 JUMPI PUSH2 0x3945 PUSH2 0x394C JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID 0x4B 0xE0 0x5C DUP14 SLOAD CREATE2 0xE0 JUMP 0xAB 0x2C STATICCALL SUB RETURNDATACOPY SWAP16 PC KECCAK256 JUMPI STOP SLT PUSH9 0xC3E28561BB999D35D2 0xC8 CALLCODE 0xC8 LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH2 0x6D55 SWAP16 0x5D SUB 0x4E 0x4D GT 0xDA SWAP3 0xDF SWAP3 0xAC 0xD6 DELEGATECALL LT 0xC6 BYTE 0xAD 0xC8 CALLDATALOAD 0xD5 CODECOPY 0xBE SUB PUSH26 0x985DA86FE664736F6C6343000804003300000000000000000000 ","sourceMap":"484:13215:12:-:0;;;788:139;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1963:113:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1963:113:2;;;;2029:13;;890:9:12;;901:10;;913:6;;1963:113:2;;2029:13;;:5;;:13;:::i;:::-;-1:-1:-1;2052:17:2;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;;1701:1:1;1806:7;:22;-1:-1:-1;;;;;;;3512:29:13::1;::::0;;;;::::1;::::0;3568:13;;3547:6:::1;::::0;3587:66:::1;3597:1;3593;:5;3587:66;;;3610:23;3623:6;3630:1;3623:9;;;;;;-1:-1:-1::0;;;3623:9:13::1;;;;;;;;;;;;;;;3610:8;:12;;;;;;:23;;;;:::i;:::-;-1:-1:-1::0;3643:3:13;::::1;::::0;::::1;:::i;:::-;;;;3587:66;;;3677:51;3699:4;;;;;;;;;;;;;-1:-1:-1::0;;;3699:4:13::1;;::::0;3705:7:::1;;;;;;;;;;;;;-1:-1:-1::0;;;3705:7:13::1;;::::0;3722:4:::1;3677:21;;;:51;;:::i;:::-;3658:70;::::0;-1:-1:-1;;;3734:29:13::1;::::0;-1:-1:-1;;;;;;3734:29:13;::::1;::::0;-1:-1:-1;921:32:0;940:12;719:10:7;;640:96;940:12:0;921:18;:32::i;:::-;788:139:12;;;484:13215;;7612:150:11;7682:4;7705:50;7710:3;-1:-1:-1;;;;;7730:23:11;;7705:4;:50::i;:::-;7698:57;;7612:150;;;;;:::o;10582:343:13:-;10698:7;1500:102;;;;;;2207:34:15;2195:47;;2272:34;2267:2;2258:12;;2251:56;-1:-1:-1;;;2332:2:15;2323:12;;2316:42;2383:2;2374:12;;2185:207;1500:102:13;;;;;;;;;;;;;1484:122;;;;;;10808:4;10791:22;;;;;;;;:::i;:::-;;;;;;;;;;;;;10781:33;;;;;;10851:7;10834:25;;;;;;;;:::i;:::-;;;;-1:-1:-1;;10834:25:13;;;;;;;;;10824:36;;10834:25;10824:36;;;;10730:189;;;2656:25:15;;;;2697:18;;2690:34;;;;2740:18;;;2733:34;;;;10878:13:13;2783:18:15;;;2776:34;-1:-1:-1;;;;;2847:32:15;;2826:19;;;2819:61;2628:19;;10730:189:13;;;;;;;;;;;;10720:200;;;;;;10713:207;;10582:343;;;;;:::o;2270:187:0:-;2362:6;;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;;2410:40;;2362:6;;;2378:17;2362:6;;2410:40;;2343:16;;2410:40;2270:187;;:::o;1697:404:11:-;1760:4;3834:19;;;:12;;;:19;;;;;;1776:319;;-1:-1:-1;1818:23:11;;;;;;;;:11;:23;;;;;;;;;;;;;1998:18;;1976:19;;;:12;;;:19;;;;;;:40;;;;2030:11;;1776:319;-1:-1:-1;2079:5:11;2072:12;;484:13215:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;484:13215:12;;;-1:-1:-1;484:13215:12;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:177:15;93:13;;-1:-1:-1;;;;;135:31:15;;125:42;;115:2;;181:1;178;171:12;115:2;74:117;;;:::o;196:1355::-;309:6;317;325;378:2;366:9;357:7;353:23;349:32;346:2;;;399:6;391;384:22;346:2;427:40;457:9;427:40;:::i;:::-;417:50;;486:2;507:49;552:2;541:9;537:18;507:49;:::i;:::-;600:2;585:18;;579:25;497:59;;-1:-1:-1;;;;;;653:14:15;;;650:2;;;685:6;677;670:22;650:2;728:6;717:9;713:22;703:32;;773:7;766:4;762:2;758:13;754:27;744:2;;800:6;792;785:22;744:2;834;828:9;856:2;852;849:10;846:2;;;862:18;;:::i;:::-;908:2;905:1;901:10;940:2;934:9;1003:2;999:7;994:2;990;986:11;982:25;974:6;970:38;1058:6;1046:10;1043:22;1038:2;1026:10;1023:18;1020:46;1017:2;;;1069:18;;:::i;:::-;1105:2;1098:22;1155:18;;;1189:15;;;;-1:-1:-1;1224:11:15;;;1254;;;1250:20;;1247:33;-1:-1:-1;1244:2:15;;;1298:6;1290;1283:22;1244:2;1325:6;1316:15;;1340:180;1354:2;1351:1;1348:9;1340:180;;;1411:34;1441:3;1411:34;:::i;:::-;1399:47;;1372:1;1365:9;;;;;1466:12;;;;1498;;1340:180;;;1344:3;1539:6;1529:16;;;;;;;;336:1215;;;;;:::o;1556:432::-;1687:3;1725:6;1719:13;1750:3;1762:129;1776:6;1773:1;1770:13;1762:129;;;1874:4;1858:14;;;1854:25;;1848:32;1835:11;;;1828:53;1791:12;1762:129;;;1909:6;1906:1;1903:13;1900:2;;;1944:3;1935:6;1930:3;1926:16;1919:29;1900:2;-1:-1:-1;1966:16:15;;;;;1695:293;-1:-1:-1;;1695:293:15:o;2891:380::-;2970:1;2966:12;;;;3013;;;3034:2;;3088:4;3080:6;3076:17;3066:27;;3034:2;3141;3133:6;3130:14;3110:18;3107:38;3104:2;;;3187:10;3182:3;3178:20;3175:1;3168:31;3222:4;3219:1;3212:15;3250:4;3247:1;3240:15;3104:2;;2946:325;;;:::o;3276:236::-;3315:3;-1:-1:-1;;3336:17:15;;3333:2;;;-1:-1:-1;;;3376:33:15;;3432:4;3429:1;3422:15;3462:4;3383:3;3450:17;3333:2;-1:-1:-1;3504:1:15;3493:13;;3323:189::o;3517:127::-;3578:10;3573:3;3569:20;3566:1;3559:31;3609:4;3606:1;3599:15;3633:4;3630:1;3623:15;3549:95;484:13215:12;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:32073:15","statements":[{"nodeType":"YulBlock","src":"6:3:15","statements":[]},{"body":{"nodeType":"YulBlock","src":"63:124:15","statements":[{"nodeType":"YulAssignment","src":"73:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"82:12:15"},"nodeType":"YulFunctionCall","src":"82:20:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"73:5:15"}]},{"body":{"nodeType":"YulBlock","src":"165:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"174:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"177:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"167:6:15"},"nodeType":"YulFunctionCall","src":"167:12:15"},"nodeType":"YulExpressionStatement","src":"167:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"124:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"135:5:15"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:3:15","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"155:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"146:3:15"},"nodeType":"YulFunctionCall","src":"146:11:15"},{"kind":"number","nodeType":"YulLiteral","src":"159:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"142:3:15"},"nodeType":"YulFunctionCall","src":"142:19:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"131:3:15"},"nodeType":"YulFunctionCall","src":"131:31:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"121:2:15"},"nodeType":"YulFunctionCall","src":"121:42:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"114:6:15"},"nodeType":"YulFunctionCall","src":"114:50:15"},"nodeType":"YulIf","src":"111:2:15"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"42:6:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"53:5:15","type":""}],"src":"14:173:15"},{"body":{"nodeType":"YulBlock","src":"276:311:15","statements":[{"body":{"nodeType":"YulBlock","src":"325:30:15","statements":[{"expression":{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"334:8:15"},{"name":"arrayPos","nodeType":"YulIdentifier","src":"344:8:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"327:6:15"},"nodeType":"YulFunctionCall","src":"327:26:15"},"nodeType":"YulExpressionStatement","src":"327:26:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"304:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"312:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"300:3:15"},"nodeType":"YulFunctionCall","src":"300:17:15"},{"name":"end","nodeType":"YulIdentifier","src":"319:3:15"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"296:3:15"},"nodeType":"YulFunctionCall","src":"296:27:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"289:6:15"},"nodeType":"YulFunctionCall","src":"289:35:15"},"nodeType":"YulIf","src":"286:2:15"},{"nodeType":"YulAssignment","src":"364:30:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"387:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"374:12:15"},"nodeType":"YulFunctionCall","src":"374:20:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"364:6:15"}]},{"body":{"nodeType":"YulBlock","src":"437:30:15","statements":[{"expression":{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"446:8:15"},{"name":"arrayPos","nodeType":"YulIdentifier","src":"456:8:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"439:6:15"},"nodeType":"YulFunctionCall","src":"439:26:15"},"nodeType":"YulExpressionStatement","src":"439:26:15"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"409:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"417:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"406:2:15"},"nodeType":"YulFunctionCall","src":"406:30:15"},"nodeType":"YulIf","src":"403:2:15"},{"nodeType":"YulAssignment","src":"476:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"492:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"500:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"488:3:15"},"nodeType":"YulFunctionCall","src":"488:17:15"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"476:8:15"}]},{"body":{"nodeType":"YulBlock","src":"565:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"574:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"577:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"567:6:15"},"nodeType":"YulFunctionCall","src":"567:12:15"},"nodeType":"YulExpressionStatement","src":"567:12:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"528:6:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"540:1:15","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"543:6:15"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"536:3:15"},"nodeType":"YulFunctionCall","src":"536:14:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"524:3:15"},"nodeType":"YulFunctionCall","src":"524:27:15"},{"kind":"number","nodeType":"YulLiteral","src":"553:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"520:3:15"},"nodeType":"YulFunctionCall","src":"520:38:15"},{"name":"end","nodeType":"YulIdentifier","src":"560:3:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"517:2:15"},"nodeType":"YulFunctionCall","src":"517:47:15"},"nodeType":"YulIf","src":"514:2:15"}]},"name":"abi_decode_array_uint256_dyn_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"239:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"247:3:15","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"255:8:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"265:6:15","type":""}],"src":"192:395:15"},{"body":{"nodeType":"YulBlock","src":"664:303:15","statements":[{"body":{"nodeType":"YulBlock","src":"713:30:15","statements":[{"expression":{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"722:8:15"},{"name":"arrayPos","nodeType":"YulIdentifier","src":"732:8:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"715:6:15"},"nodeType":"YulFunctionCall","src":"715:26:15"},"nodeType":"YulExpressionStatement","src":"715:26:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"692:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"700:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"688:3:15"},"nodeType":"YulFunctionCall","src":"688:17:15"},{"name":"end","nodeType":"YulIdentifier","src":"707:3:15"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"684:3:15"},"nodeType":"YulFunctionCall","src":"684:27:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"677:6:15"},"nodeType":"YulFunctionCall","src":"677:35:15"},"nodeType":"YulIf","src":"674:2:15"},{"nodeType":"YulAssignment","src":"752:30:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"775:6:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"762:12:15"},"nodeType":"YulFunctionCall","src":"762:20:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"752:6:15"}]},{"body":{"nodeType":"YulBlock","src":"825:30:15","statements":[{"expression":{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"834:8:15"},{"name":"arrayPos","nodeType":"YulIdentifier","src":"844:8:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"827:6:15"},"nodeType":"YulFunctionCall","src":"827:26:15"},"nodeType":"YulExpressionStatement","src":"827:26:15"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"797:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"805:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"794:2:15"},"nodeType":"YulFunctionCall","src":"794:30:15"},"nodeType":"YulIf","src":"791:2:15"},{"nodeType":"YulAssignment","src":"864:29:15","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"880:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"888:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"876:3:15"},"nodeType":"YulFunctionCall","src":"876:17:15"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"864:8:15"}]},{"body":{"nodeType":"YulBlock","src":"945:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"954:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"957:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"947:6:15"},"nodeType":"YulFunctionCall","src":"947:12:15"},"nodeType":"YulExpressionStatement","src":"947:12:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"916:6:15"},{"name":"length","nodeType":"YulIdentifier","src":"924:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"912:3:15"},"nodeType":"YulFunctionCall","src":"912:19:15"},{"kind":"number","nodeType":"YulLiteral","src":"933:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"908:3:15"},"nodeType":"YulFunctionCall","src":"908:30:15"},{"name":"end","nodeType":"YulIdentifier","src":"940:3:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"905:2:15"},"nodeType":"YulFunctionCall","src":"905:39:15"},"nodeType":"YulIf","src":"902:2:15"}]},"name":"abi_decode_bytes_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"627:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"635:3:15","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"643:8:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"653:6:15","type":""}],"src":"592:375:15"},{"body":{"nodeType":"YulBlock","src":"1044:93:15","statements":[{"body":{"nodeType":"YulBlock","src":"1083:24:15","statements":[{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1092:5:15"},{"name":"value","nodeType":"YulIdentifier","src":"1099:5:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1085:6:15"},"nodeType":"YulFunctionCall","src":"1085:20:15"},"nodeType":"YulExpressionStatement","src":"1085:20:15"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"1065:3:15"},{"name":"offset","nodeType":"YulIdentifier","src":"1070:6:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1061:3:15"},"nodeType":"YulFunctionCall","src":"1061:16:15"},{"kind":"number","nodeType":"YulLiteral","src":"1079:2:15","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1057:3:15"},"nodeType":"YulFunctionCall","src":"1057:25:15"},"nodeType":"YulIf","src":"1054:2:15"},{"nodeType":"YulAssignment","src":"1116:15:15","value":{"name":"offset","nodeType":"YulIdentifier","src":"1125:6:15"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1116:5:15"}]}]},"name":"abi_decode_struct_Signature_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1018:6:15","type":""},{"name":"end","nodeType":"YulTypedName","src":"1026:3:15","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1034:5:15","type":""}],"src":"972:165:15"},{"body":{"nodeType":"YulBlock","src":"1212:126:15","statements":[{"body":{"nodeType":"YulBlock","src":"1258:26:15","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1267:6:15"},{"name":"value0","nodeType":"YulIdentifier","src":"1275:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1260:6:15"},"nodeType":"YulFunctionCall","src":"1260:22:15"},"nodeType":"YulExpressionStatement","src":"1260:22:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1233:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"1242:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1229:3:15"},"nodeType":"YulFunctionCall","src":"1229:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"1254:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1225:3:15"},"nodeType":"YulFunctionCall","src":"1225:32:15"},"nodeType":"YulIf","src":"1222:2:15"},{"nodeType":"YulAssignment","src":"1293:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1322:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1303:18:15"},"nodeType":"YulFunctionCall","src":"1303:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1293:6:15"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1178:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1189:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1201:6:15","type":""}],"src":"1142:196:15"},{"body":{"nodeType":"YulBlock","src":"1430:183:15","statements":[{"body":{"nodeType":"YulBlock","src":"1476:26:15","statements":[{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"1485:6:15"},{"name":"value1","nodeType":"YulIdentifier","src":"1493:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1478:6:15"},"nodeType":"YulFunctionCall","src":"1478:22:15"},"nodeType":"YulExpressionStatement","src":"1478:22:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1451:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"1460:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1447:3:15"},"nodeType":"YulFunctionCall","src":"1447:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"1472:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1443:3:15"},"nodeType":"YulFunctionCall","src":"1443:32:15"},"nodeType":"YulIf","src":"1440:2:15"},{"nodeType":"YulAssignment","src":"1511:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1540:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1521:18:15"},"nodeType":"YulFunctionCall","src":"1521:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1511:6:15"}]},{"nodeType":"YulAssignment","src":"1559:48:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1592:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"1603:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1588:3:15"},"nodeType":"YulFunctionCall","src":"1588:18:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1569:18:15"},"nodeType":"YulFunctionCall","src":"1569:38:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1559:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1388:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1399:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1411:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1419:6:15","type":""}],"src":"1343:270:15"},{"body":{"nodeType":"YulBlock","src":"1722:234:15","statements":[{"body":{"nodeType":"YulBlock","src":"1768:26:15","statements":[{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"1777:6:15"},{"name":"value2","nodeType":"YulIdentifier","src":"1785:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1770:6:15"},"nodeType":"YulFunctionCall","src":"1770:22:15"},"nodeType":"YulExpressionStatement","src":"1770:22:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1743:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"1752:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1739:3:15"},"nodeType":"YulFunctionCall","src":"1739:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"1764:2:15","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1735:3:15"},"nodeType":"YulFunctionCall","src":"1735:32:15"},"nodeType":"YulIf","src":"1732:2:15"},{"nodeType":"YulAssignment","src":"1803:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1832:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1813:18:15"},"nodeType":"YulFunctionCall","src":"1813:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1803:6:15"}]},{"nodeType":"YulAssignment","src":"1851:48:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1884:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"1895:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1880:3:15"},"nodeType":"YulFunctionCall","src":"1880:18:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1861:18:15"},"nodeType":"YulFunctionCall","src":"1861:38:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1851:6:15"}]},{"nodeType":"YulAssignment","src":"1908:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1935:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"1946:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1931:3:15"},"nodeType":"YulFunctionCall","src":"1931:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1918:12:15"},"nodeType":"YulFunctionCall","src":"1918:32:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1908:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1672:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1683:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1695:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1703:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1711:6:15","type":""}],"src":"1618:338:15"},{"body":{"nodeType":"YulBlock","src":"2198:753:15","statements":[{"body":{"nodeType":"YulBlock","src":"2245:26:15","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"2254:6:15"},{"name":"value4","nodeType":"YulIdentifier","src":"2262:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2247:6:15"},"nodeType":"YulFunctionCall","src":"2247:22:15"},"nodeType":"YulExpressionStatement","src":"2247:22:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2219:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"2228:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2215:3:15"},"nodeType":"YulFunctionCall","src":"2215:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"2240:3:15","type":"","value":"320"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2211:3:15"},"nodeType":"YulFunctionCall","src":"2211:33:15"},"nodeType":"YulIf","src":"2208:2:15"},{"nodeType":"YulAssignment","src":"2280:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2309:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2290:18:15"},"nodeType":"YulFunctionCall","src":"2290:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2280:6:15"}]},{"nodeType":"YulAssignment","src":"2328:48:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2361:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2372:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2357:3:15"},"nodeType":"YulFunctionCall","src":"2357:18:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2338:18:15"},"nodeType":"YulFunctionCall","src":"2338:38:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2328:6:15"}]},{"nodeType":"YulAssignment","src":"2385:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2412:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2423:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2408:3:15"},"nodeType":"YulFunctionCall","src":"2408:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2395:12:15"},"nodeType":"YulFunctionCall","src":"2395:32:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2385:6:15"}]},{"nodeType":"YulAssignment","src":"2436:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2463:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2474:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2459:3:15"},"nodeType":"YulFunctionCall","src":"2459:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2446:12:15"},"nodeType":"YulFunctionCall","src":"2446:32:15"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"2436:6:15"}]},{"nodeType":"YulAssignment","src":"2487:43:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2514:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2525:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2510:3:15"},"nodeType":"YulFunctionCall","src":"2510:19:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2497:12:15"},"nodeType":"YulFunctionCall","src":"2497:33:15"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"2487:6:15"}]},{"nodeType":"YulAssignment","src":"2539:49:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2572:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2583:3:15","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2568:3:15"},"nodeType":"YulFunctionCall","src":"2568:19:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2549:18:15"},"nodeType":"YulFunctionCall","src":"2549:39:15"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"2539:6:15"}]},{"nodeType":"YulAssignment","src":"2597:76:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2648:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2659:3:15","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2644:3:15"},"nodeType":"YulFunctionCall","src":"2644:19:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2665:7:15"}],"functionName":{"name":"abi_decode_struct_Signature_calldata","nodeType":"YulIdentifier","src":"2607:36:15"},"nodeType":"YulFunctionCall","src":"2607:66:15"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"2597:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"2682:47:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2713:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"2724:3:15","type":"","value":"288"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2709:3:15"},"nodeType":"YulFunctionCall","src":"2709:19:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2696:12:15"},"nodeType":"YulFunctionCall","src":"2696:33:15"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2686:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"2772:26:15","statements":[{"expression":{"arguments":[{"name":"value7","nodeType":"YulIdentifier","src":"2781:6:15"},{"name":"value7","nodeType":"YulIdentifier","src":"2789:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2774:6:15"},"nodeType":"YulFunctionCall","src":"2774:22:15"},"nodeType":"YulExpressionStatement","src":"2774:22:15"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2744:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"2752:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2741:2:15"},"nodeType":"YulFunctionCall","src":"2741:30:15"},"nodeType":"YulIf","src":"2738:2:15"},{"nodeType":"YulVariableDeclaration","src":"2807:84:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2863:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"2874:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2859:3:15"},"nodeType":"YulFunctionCall","src":"2859:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2883:7:15"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"2833:25:15"},"nodeType":"YulFunctionCall","src":"2833:58:15"},"variables":[{"name":"value7_1","nodeType":"YulTypedName","src":"2811:8:15","type":""},{"name":"value8_1","nodeType":"YulTypedName","src":"2821:8:15","type":""}]},{"nodeType":"YulAssignment","src":"2900:18:15","value":{"name":"value7_1","nodeType":"YulIdentifier","src":"2910:8:15"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"2900:6:15"}]},{"nodeType":"YulAssignment","src":"2927:18:15","value":{"name":"value8_1","nodeType":"YulIdentifier","src":"2937:8:15"},"variableNames":[{"name":"value8","nodeType":"YulIdentifier","src":"2927:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint256t_addresst_struct$_Signature_$4123_calldata_ptrt_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2100:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2111:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2123:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2131:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2139:6:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2147:6:15","type":""},{"name":"value4","nodeType":"YulTypedName","src":"2155:6:15","type":""},{"name":"value5","nodeType":"YulTypedName","src":"2163:6:15","type":""},{"name":"value6","nodeType":"YulTypedName","src":"2171:6:15","type":""},{"name":"value7","nodeType":"YulTypedName","src":"2179:6:15","type":""},{"name":"value8","nodeType":"YulTypedName","src":"2187:6:15","type":""}],"src":"1961:990:15"},{"body":{"nodeType":"YulBlock","src":"3157:475:15","statements":[{"body":{"nodeType":"YulBlock","src":"3204:26:15","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"3213:6:15"},{"name":"value4","nodeType":"YulIdentifier","src":"3221:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3206:6:15"},"nodeType":"YulFunctionCall","src":"3206:22:15"},"nodeType":"YulExpressionStatement","src":"3206:22:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3178:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"3187:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3174:3:15"},"nodeType":"YulFunctionCall","src":"3174:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"3199:3:15","type":"","value":"288"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3170:3:15"},"nodeType":"YulFunctionCall","src":"3170:33:15"},"nodeType":"YulIf","src":"3167:2:15"},{"nodeType":"YulAssignment","src":"3239:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3268:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3249:18:15"},"nodeType":"YulFunctionCall","src":"3249:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3239:6:15"}]},{"nodeType":"YulAssignment","src":"3287:48:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3320:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3331:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3316:3:15"},"nodeType":"YulFunctionCall","src":"3316:18:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3297:18:15"},"nodeType":"YulFunctionCall","src":"3297:38:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3287:6:15"}]},{"nodeType":"YulAssignment","src":"3344:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3371:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3382:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3367:3:15"},"nodeType":"YulFunctionCall","src":"3367:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3354:12:15"},"nodeType":"YulFunctionCall","src":"3354:32:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3344:6:15"}]},{"nodeType":"YulAssignment","src":"3395:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3422:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3433:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3418:3:15"},"nodeType":"YulFunctionCall","src":"3418:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3405:12:15"},"nodeType":"YulFunctionCall","src":"3405:32:15"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"3395:6:15"}]},{"nodeType":"YulAssignment","src":"3446:43:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3473:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3484:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3469:3:15"},"nodeType":"YulFunctionCall","src":"3469:19:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3456:12:15"},"nodeType":"YulFunctionCall","src":"3456:33:15"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"3446:6:15"}]},{"nodeType":"YulAssignment","src":"3498:43:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3525:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3536:3:15","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3521:3:15"},"nodeType":"YulFunctionCall","src":"3521:19:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3508:12:15"},"nodeType":"YulFunctionCall","src":"3508:33:15"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"3498:6:15"}]},{"nodeType":"YulAssignment","src":"3550:76:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3601:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"3612:3:15","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3597:3:15"},"nodeType":"YulFunctionCall","src":"3597:19:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3618:7:15"}],"functionName":{"name":"abi_decode_struct_Signature_calldata","nodeType":"YulIdentifier","src":"3560:36:15"},"nodeType":"YulFunctionCall","src":"3560:66:15"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"3550:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint256t_uint256t_struct$_Signature_$4123_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3075:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3086:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3098:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3106:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3114:6:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3122:6:15","type":""},{"name":"value4","nodeType":"YulTypedName","src":"3130:6:15","type":""},{"name":"value5","nodeType":"YulTypedName","src":"3138:6:15","type":""},{"name":"value6","nodeType":"YulTypedName","src":"3146:6:15","type":""}],"src":"2956:676:15"},{"body":{"nodeType":"YulBlock","src":"3856:649:15","statements":[{"body":{"nodeType":"YulBlock","src":"3903:26:15","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"3912:6:15"},{"name":"value4","nodeType":"YulIdentifier","src":"3920:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3905:6:15"},"nodeType":"YulFunctionCall","src":"3905:22:15"},"nodeType":"YulExpressionStatement","src":"3905:22:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3877:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"3886:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3873:3:15"},"nodeType":"YulFunctionCall","src":"3873:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"3898:3:15","type":"","value":"256"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3869:3:15"},"nodeType":"YulFunctionCall","src":"3869:33:15"},"nodeType":"YulIf","src":"3866:2:15"},{"nodeType":"YulAssignment","src":"3938:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3967:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3948:18:15"},"nodeType":"YulFunctionCall","src":"3948:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3938:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"3986:46:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4017:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4028:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4013:3:15"},"nodeType":"YulFunctionCall","src":"4013:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4000:12:15"},"nodeType":"YulFunctionCall","src":"4000:32:15"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3990:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"4075:26:15","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"4084:6:15"},{"name":"value4","nodeType":"YulIdentifier","src":"4092:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4077:6:15"},"nodeType":"YulFunctionCall","src":"4077:22:15"},"nodeType":"YulExpressionStatement","src":"4077:22:15"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4047:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"4055:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4044:2:15"},"nodeType":"YulFunctionCall","src":"4044:30:15"},"nodeType":"YulIf","src":"4041:2:15"},{"nodeType":"YulVariableDeclaration","src":"4110:96:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4178:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"4189:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4174:3:15"},"nodeType":"YulFunctionCall","src":"4174:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4198:7:15"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nodeType":"YulIdentifier","src":"4136:37:15"},"nodeType":"YulFunctionCall","src":"4136:70:15"},"variables":[{"name":"value1_1","nodeType":"YulTypedName","src":"4114:8:15","type":""},{"name":"value2_1","nodeType":"YulTypedName","src":"4124:8:15","type":""}]},{"nodeType":"YulAssignment","src":"4215:18:15","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"4225:8:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4215:6:15"}]},{"nodeType":"YulAssignment","src":"4242:18:15","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"4252:8:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4242:6:15"}]},{"nodeType":"YulAssignment","src":"4269:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4296:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4307:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4292:3:15"},"nodeType":"YulFunctionCall","src":"4292:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4279:12:15"},"nodeType":"YulFunctionCall","src":"4279:32:15"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4269:6:15"}]},{"nodeType":"YulAssignment","src":"4320:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4347:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4358:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4343:3:15"},"nodeType":"YulFunctionCall","src":"4343:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4330:12:15"},"nodeType":"YulFunctionCall","src":"4330:32:15"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"4320:6:15"}]},{"nodeType":"YulAssignment","src":"4371:43:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4398:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4409:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4394:3:15"},"nodeType":"YulFunctionCall","src":"4394:19:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4381:12:15"},"nodeType":"YulFunctionCall","src":"4381:33:15"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"4371:6:15"}]},{"nodeType":"YulAssignment","src":"4423:76:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4474:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4485:3:15","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4470:3:15"},"nodeType":"YulFunctionCall","src":"4470:19:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4491:7:15"}],"functionName":{"name":"abi_decode_struct_Signature_calldata","nodeType":"YulIdentifier","src":"4433:36:15"},"nodeType":"YulFunctionCall","src":"4433:66:15"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"4423:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_calldata_ptrt_uint256t_uint256t_uint256t_struct$_Signature_$4123_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3774:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3785:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3797:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3805:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3813:6:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3821:6:15","type":""},{"name":"value4","nodeType":"YulTypedName","src":"3829:6:15","type":""},{"name":"value5","nodeType":"YulTypedName","src":"3837:6:15","type":""},{"name":"value6","nodeType":"YulTypedName","src":"3845:6:15","type":""}],"src":"3637:868:15"},{"body":{"nodeType":"YulBlock","src":"4597:177:15","statements":[{"body":{"nodeType":"YulBlock","src":"4643:26:15","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4652:6:15"},{"name":"value0","nodeType":"YulIdentifier","src":"4660:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4645:6:15"},"nodeType":"YulFunctionCall","src":"4645:22:15"},"nodeType":"YulExpressionStatement","src":"4645:22:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4618:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"4627:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4614:3:15"},"nodeType":"YulFunctionCall","src":"4614:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"4639:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4610:3:15"},"nodeType":"YulFunctionCall","src":"4610:32:15"},"nodeType":"YulIf","src":"4607:2:15"},{"nodeType":"YulAssignment","src":"4678:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4707:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"4688:18:15"},"nodeType":"YulFunctionCall","src":"4688:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4678:6:15"}]},{"nodeType":"YulAssignment","src":"4726:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4753:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"4764:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4749:3:15"},"nodeType":"YulFunctionCall","src":"4749:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4736:12:15"},"nodeType":"YulFunctionCall","src":"4736:32:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4726:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4555:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4566:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4578:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4586:6:15","type":""}],"src":"4510:264:15"},{"body":{"nodeType":"YulBlock","src":"4963:423:15","statements":[{"body":{"nodeType":"YulBlock","src":"5010:26:15","statements":[{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"5019:6:15"},{"name":"value4","nodeType":"YulIdentifier","src":"5027:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5012:6:15"},"nodeType":"YulFunctionCall","src":"5012:22:15"},"nodeType":"YulExpressionStatement","src":"5012:22:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4984:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"4993:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4980:3:15"},"nodeType":"YulFunctionCall","src":"4980:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"5005:3:15","type":"","value":"256"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4976:3:15"},"nodeType":"YulFunctionCall","src":"4976:33:15"},"nodeType":"YulIf","src":"4973:2:15"},{"nodeType":"YulAssignment","src":"5045:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5074:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5055:18:15"},"nodeType":"YulFunctionCall","src":"5055:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5045:6:15"}]},{"nodeType":"YulAssignment","src":"5093:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5120:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5131:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5116:3:15"},"nodeType":"YulFunctionCall","src":"5116:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5103:12:15"},"nodeType":"YulFunctionCall","src":"5103:32:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5093:6:15"}]},{"nodeType":"YulAssignment","src":"5144:48:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5177:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5188:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5173:3:15"},"nodeType":"YulFunctionCall","src":"5173:18:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5154:18:15"},"nodeType":"YulFunctionCall","src":"5154:38:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5144:6:15"}]},{"nodeType":"YulAssignment","src":"5201:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5228:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5239:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5224:3:15"},"nodeType":"YulFunctionCall","src":"5224:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5211:12:15"},"nodeType":"YulFunctionCall","src":"5211:32:15"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5201:6:15"}]},{"nodeType":"YulAssignment","src":"5252:43:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5279:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5290:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5275:3:15"},"nodeType":"YulFunctionCall","src":"5275:19:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5262:12:15"},"nodeType":"YulFunctionCall","src":"5262:33:15"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"5252:6:15"}]},{"nodeType":"YulAssignment","src":"5304:76:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5355:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5366:3:15","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5351:3:15"},"nodeType":"YulFunctionCall","src":"5351:19:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5372:7:15"}],"functionName":{"name":"abi_decode_struct_Signature_calldata","nodeType":"YulIdentifier","src":"5314:36:15"},"nodeType":"YulFunctionCall","src":"5314:66:15"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"5304:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_addresst_uint256t_uint256t_struct$_Signature_$4123_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4889:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4900:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4912:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4920:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4928:6:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4936:6:15","type":""},{"name":"value4","nodeType":"YulTypedName","src":"4944:6:15","type":""},{"name":"value5","nodeType":"YulTypedName","src":"4952:6:15","type":""}],"src":"4779:607:15"},{"body":{"nodeType":"YulBlock","src":"5611:695:15","statements":[{"body":{"nodeType":"YulBlock","src":"5658:26:15","statements":[{"expression":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"5667:6:15"},{"name":"value6","nodeType":"YulIdentifier","src":"5675:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5660:6:15"},"nodeType":"YulFunctionCall","src":"5660:22:15"},"nodeType":"YulExpressionStatement","src":"5660:22:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5632:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"5641:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5628:3:15"},"nodeType":"YulFunctionCall","src":"5628:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"5653:3:15","type":"","value":"288"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5624:3:15"},"nodeType":"YulFunctionCall","src":"5624:33:15"},"nodeType":"YulIf","src":"5621:2:15"},{"nodeType":"YulAssignment","src":"5693:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5722:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5703:18:15"},"nodeType":"YulFunctionCall","src":"5703:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5693:6:15"}]},{"nodeType":"YulAssignment","src":"5741:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5768:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5779:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5764:3:15"},"nodeType":"YulFunctionCall","src":"5764:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5751:12:15"},"nodeType":"YulFunctionCall","src":"5751:32:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5741:6:15"}]},{"nodeType":"YulAssignment","src":"5792:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5819:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5830:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5815:3:15"},"nodeType":"YulFunctionCall","src":"5815:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5802:12:15"},"nodeType":"YulFunctionCall","src":"5802:32:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5792:6:15"}]},{"nodeType":"YulAssignment","src":"5843:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5870:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5881:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5866:3:15"},"nodeType":"YulFunctionCall","src":"5866:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5853:12:15"},"nodeType":"YulFunctionCall","src":"5853:32:15"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5843:6:15"}]},{"nodeType":"YulAssignment","src":"5894:49:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5927:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"5938:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5923:3:15"},"nodeType":"YulFunctionCall","src":"5923:19:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"5904:18:15"},"nodeType":"YulFunctionCall","src":"5904:39:15"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"5894:6:15"}]},{"nodeType":"YulAssignment","src":"5952:76:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6003:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6014:3:15","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5999:3:15"},"nodeType":"YulFunctionCall","src":"5999:19:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6020:7:15"}],"functionName":{"name":"abi_decode_struct_Signature_calldata","nodeType":"YulIdentifier","src":"5962:36:15"},"nodeType":"YulFunctionCall","src":"5962:66:15"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"5952:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"6037:47:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6068:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6079:3:15","type":"","value":"256"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6064:3:15"},"nodeType":"YulFunctionCall","src":"6064:19:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6051:12:15"},"nodeType":"YulFunctionCall","src":"6051:33:15"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6041:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"6127:26:15","statements":[{"expression":{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"6136:6:15"},{"name":"value6","nodeType":"YulIdentifier","src":"6144:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6129:6:15"},"nodeType":"YulFunctionCall","src":"6129:22:15"},"nodeType":"YulExpressionStatement","src":"6129:22:15"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6099:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"6107:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6096:2:15"},"nodeType":"YulFunctionCall","src":"6096:30:15"},"nodeType":"YulIf","src":"6093:2:15"},{"nodeType":"YulVariableDeclaration","src":"6162:84:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6218:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"6229:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6214:3:15"},"nodeType":"YulFunctionCall","src":"6214:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6238:7:15"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"6188:25:15"},"nodeType":"YulFunctionCall","src":"6188:58:15"},"variables":[{"name":"value6_1","nodeType":"YulTypedName","src":"6166:8:15","type":""},{"name":"value7_1","nodeType":"YulTypedName","src":"6176:8:15","type":""}]},{"nodeType":"YulAssignment","src":"6255:18:15","value":{"name":"value6_1","nodeType":"YulIdentifier","src":"6265:8:15"},"variableNames":[{"name":"value6","nodeType":"YulIdentifier","src":"6255:6:15"}]},{"nodeType":"YulAssignment","src":"6282:18:15","value":{"name":"value7_1","nodeType":"YulIdentifier","src":"6292:8:15"},"variableNames":[{"name":"value7","nodeType":"YulIdentifier","src":"6282:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_uint256t_uint256t_addresst_struct$_Signature_$4123_calldata_ptrt_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5521:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5532:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5544:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5552:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5560:6:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5568:6:15","type":""},{"name":"value4","nodeType":"YulTypedName","src":"5576:6:15","type":""},{"name":"value5","nodeType":"YulTypedName","src":"5584:6:15","type":""},{"name":"value6","nodeType":"YulTypedName","src":"5592:6:15","type":""},{"name":"value7","nodeType":"YulTypedName","src":"5600:6:15","type":""}],"src":"5391:915:15"},{"body":{"nodeType":"YulBlock","src":"6495:417:15","statements":[{"body":{"nodeType":"YulBlock","src":"6542:26:15","statements":[{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"6551:6:15"},{"name":"value2","nodeType":"YulIdentifier","src":"6559:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6544:6:15"},"nodeType":"YulFunctionCall","src":"6544:22:15"},"nodeType":"YulExpressionStatement","src":"6544:22:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6516:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"6525:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6512:3:15"},"nodeType":"YulFunctionCall","src":"6512:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"6537:3:15","type":"","value":"256"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6508:3:15"},"nodeType":"YulFunctionCall","src":"6508:33:15"},"nodeType":"YulIf","src":"6505:2:15"},{"nodeType":"YulAssignment","src":"6577:39:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6606:9:15"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"6587:18:15"},"nodeType":"YulFunctionCall","src":"6587:29:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6577:6:15"}]},{"nodeType":"YulAssignment","src":"6625:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6652:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6663:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6648:3:15"},"nodeType":"YulFunctionCall","src":"6648:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6635:12:15"},"nodeType":"YulFunctionCall","src":"6635:32:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6625:6:15"}]},{"nodeType":"YulAssignment","src":"6676:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6703:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6714:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6699:3:15"},"nodeType":"YulFunctionCall","src":"6699:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6686:12:15"},"nodeType":"YulFunctionCall","src":"6686:32:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"6676:6:15"}]},{"nodeType":"YulAssignment","src":"6727:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6754:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6765:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6750:3:15"},"nodeType":"YulFunctionCall","src":"6750:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6737:12:15"},"nodeType":"YulFunctionCall","src":"6737:32:15"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"6727:6:15"}]},{"nodeType":"YulAssignment","src":"6778:43:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6805:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6816:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6801:3:15"},"nodeType":"YulFunctionCall","src":"6801:19:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6788:12:15"},"nodeType":"YulFunctionCall","src":"6788:33:15"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"6778:6:15"}]},{"nodeType":"YulAssignment","src":"6830:76:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6881:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"6892:3:15","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6877:3:15"},"nodeType":"YulFunctionCall","src":"6877:19:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6898:7:15"}],"functionName":{"name":"abi_decode_struct_Signature_calldata","nodeType":"YulIdentifier","src":"6840:36:15"},"nodeType":"YulFunctionCall","src":"6840:66:15"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"6830:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_uint256t_uint256t_uint256t_struct$_Signature_$4123_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6421:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6432:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6444:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6452:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6460:6:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6468:6:15","type":""},{"name":"value4","nodeType":"YulTypedName","src":"6476:6:15","type":""},{"name":"value5","nodeType":"YulTypedName","src":"6484:6:15","type":""}],"src":"6311:601:15"},{"body":{"nodeType":"YulBlock","src":"7119:591:15","statements":[{"body":{"nodeType":"YulBlock","src":"7166:26:15","statements":[{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"7175:6:15"},{"name":"value2","nodeType":"YulIdentifier","src":"7183:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7168:6:15"},"nodeType":"YulFunctionCall","src":"7168:22:15"},"nodeType":"YulExpressionStatement","src":"7168:22:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7140:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"7149:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7136:3:15"},"nodeType":"YulFunctionCall","src":"7136:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"7161:3:15","type":"","value":"224"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7132:3:15"},"nodeType":"YulFunctionCall","src":"7132:33:15"},"nodeType":"YulIf","src":"7129:2:15"},{"nodeType":"YulVariableDeclaration","src":"7201:37:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7228:9:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7215:12:15"},"nodeType":"YulFunctionCall","src":"7215:23:15"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"7205:6:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"7281:26:15","statements":[{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"7290:6:15"},{"name":"value2","nodeType":"YulIdentifier","src":"7298:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7283:6:15"},"nodeType":"YulFunctionCall","src":"7283:22:15"},"nodeType":"YulExpressionStatement","src":"7283:22:15"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"7253:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"7261:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7250:2:15"},"nodeType":"YulFunctionCall","src":"7250:30:15"},"nodeType":"YulIf","src":"7247:2:15"},{"nodeType":"YulVariableDeclaration","src":"7316:96:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7384:9:15"},{"name":"offset","nodeType":"YulIdentifier","src":"7395:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7380:3:15"},"nodeType":"YulFunctionCall","src":"7380:22:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7404:7:15"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nodeType":"YulIdentifier","src":"7342:37:15"},"nodeType":"YulFunctionCall","src":"7342:70:15"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"7320:8:15","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"7330:8:15","type":""}]},{"nodeType":"YulAssignment","src":"7421:18:15","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"7431:8:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7421:6:15"}]},{"nodeType":"YulAssignment","src":"7448:18:15","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"7458:8:15"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"7448:6:15"}]},{"nodeType":"YulAssignment","src":"7475:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7502:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7513:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7498:3:15"},"nodeType":"YulFunctionCall","src":"7498:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7485:12:15"},"nodeType":"YulFunctionCall","src":"7485:32:15"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"7475:6:15"}]},{"nodeType":"YulAssignment","src":"7526:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7553:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7564:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7549:3:15"},"nodeType":"YulFunctionCall","src":"7549:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7536:12:15"},"nodeType":"YulFunctionCall","src":"7536:32:15"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"7526:6:15"}]},{"nodeType":"YulAssignment","src":"7577:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7604:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7615:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7600:3:15"},"nodeType":"YulFunctionCall","src":"7600:18:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"7587:12:15"},"nodeType":"YulFunctionCall","src":"7587:32:15"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"7577:6:15"}]},{"nodeType":"YulAssignment","src":"7628:76:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7679:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"7690:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7675:3:15"},"nodeType":"YulFunctionCall","src":"7675:19:15"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"7696:7:15"}],"functionName":{"name":"abi_decode_struct_Signature_calldata","nodeType":"YulIdentifier","src":"7638:36:15"},"nodeType":"YulFunctionCall","src":"7638:66:15"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"7628:6:15"}]}]},"name":"abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptrt_uint256t_uint256t_uint256t_struct$_Signature_$4123_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7045:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7056:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7068:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7076:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7084:6:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7092:6:15","type":""},{"name":"value4","nodeType":"YulTypedName","src":"7100:6:15","type":""},{"name":"value5","nodeType":"YulTypedName","src":"7108:6:15","type":""}],"src":"6917:793:15"},{"body":{"nodeType":"YulBlock","src":"7793:219:15","statements":[{"body":{"nodeType":"YulBlock","src":"7839:26:15","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7848:6:15"},{"name":"value0","nodeType":"YulIdentifier","src":"7856:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7841:6:15"},"nodeType":"YulFunctionCall","src":"7841:22:15"},"nodeType":"YulExpressionStatement","src":"7841:22:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7814:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"7823:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7810:3:15"},"nodeType":"YulFunctionCall","src":"7810:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"7835:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7806:3:15"},"nodeType":"YulFunctionCall","src":"7806:32:15"},"nodeType":"YulIf","src":"7803:2:15"},{"nodeType":"YulVariableDeclaration","src":"7874:29:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7893:9:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7887:5:15"},"nodeType":"YulFunctionCall","src":"7887:16:15"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7878:5:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"7956:26:15","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7965:6:15"},{"name":"value0","nodeType":"YulIdentifier","src":"7973:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7958:6:15"},"nodeType":"YulFunctionCall","src":"7958:22:15"},"nodeType":"YulExpressionStatement","src":"7958:22:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7925:5:15"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7946:5:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7939:6:15"},"nodeType":"YulFunctionCall","src":"7939:13:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7932:6:15"},"nodeType":"YulFunctionCall","src":"7932:21:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"7922:2:15"},"nodeType":"YulFunctionCall","src":"7922:32:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"7915:6:15"},"nodeType":"YulFunctionCall","src":"7915:40:15"},"nodeType":"YulIf","src":"7912:2:15"},{"nodeType":"YulAssignment","src":"7991:15:15","value":{"name":"value","nodeType":"YulIdentifier","src":"8001:5:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"7991:6:15"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7759:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7770:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7782:6:15","type":""}],"src":"7715:297:15"},{"body":{"nodeType":"YulBlock","src":"8087:120:15","statements":[{"body":{"nodeType":"YulBlock","src":"8133:26:15","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8142:6:15"},{"name":"value0","nodeType":"YulIdentifier","src":"8150:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8135:6:15"},"nodeType":"YulFunctionCall","src":"8135:22:15"},"nodeType":"YulExpressionStatement","src":"8135:22:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8108:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"8117:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8104:3:15"},"nodeType":"YulFunctionCall","src":"8104:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"8129:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8100:3:15"},"nodeType":"YulFunctionCall","src":"8100:32:15"},"nodeType":"YulIf","src":"8097:2:15"},{"nodeType":"YulAssignment","src":"8168:33:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8191:9:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8178:12:15"},"nodeType":"YulFunctionCall","src":"8178:23:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8168:6:15"}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8053:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8064:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8076:6:15","type":""}],"src":"8017:190:15"},{"body":{"nodeType":"YulBlock","src":"8293:113:15","statements":[{"body":{"nodeType":"YulBlock","src":"8339:26:15","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8348:6:15"},{"name":"value0","nodeType":"YulIdentifier","src":"8356:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8341:6:15"},"nodeType":"YulFunctionCall","src":"8341:22:15"},"nodeType":"YulExpressionStatement","src":"8341:22:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8314:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"8323:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8310:3:15"},"nodeType":"YulFunctionCall","src":"8310:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"8335:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8306:3:15"},"nodeType":"YulFunctionCall","src":"8306:32:15"},"nodeType":"YulIf","src":"8303:2:15"},{"nodeType":"YulAssignment","src":"8374:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8390:9:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8384:5:15"},"nodeType":"YulFunctionCall","src":"8384:16:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8374:6:15"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8259:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8270:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8282:6:15","type":""}],"src":"8212:194:15"},{"body":{"nodeType":"YulBlock","src":"8479:221:15","statements":[{"body":{"nodeType":"YulBlock","src":"8525:26:15","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8534:6:15"},{"name":"value0","nodeType":"YulIdentifier","src":"8542:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8527:6:15"},"nodeType":"YulFunctionCall","src":"8527:22:15"},"nodeType":"YulExpressionStatement","src":"8527:22:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8500:7:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"8509:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8496:3:15"},"nodeType":"YulFunctionCall","src":"8496:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"8521:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8492:3:15"},"nodeType":"YulFunctionCall","src":"8492:32:15"},"nodeType":"YulIf","src":"8489:2:15"},{"nodeType":"YulVariableDeclaration","src":"8560:36:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8586:9:15"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8573:12:15"},"nodeType":"YulFunctionCall","src":"8573:23:15"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"8564:5:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"8644:26:15","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8653:6:15"},{"name":"value0","nodeType":"YulIdentifier","src":"8661:6:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8646:6:15"},"nodeType":"YulFunctionCall","src":"8646:22:15"},"nodeType":"YulExpressionStatement","src":"8646:22:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8618:5:15"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8629:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"8636:4:15","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8625:3:15"},"nodeType":"YulFunctionCall","src":"8625:16:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8615:2:15"},"nodeType":"YulFunctionCall","src":"8615:27:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8608:6:15"},"nodeType":"YulFunctionCall","src":"8608:35:15"},"nodeType":"YulIf","src":"8605:2:15"},{"nodeType":"YulAssignment","src":"8679:15:15","value":{"name":"value","nodeType":"YulIdentifier","src":"8689:5:15"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8679:6:15"}]}]},"name":"abi_decode_tuple_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8445:9:15","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8456:7:15","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8468:6:15","type":""}],"src":"8411:289:15"},{"body":{"nodeType":"YulBlock","src":"8884:227:15","statements":[{"body":{"nodeType":"YulBlock","src":"8929:20:15","statements":[{"expression":{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"8938:3:15"},{"name":"end","nodeType":"YulIdentifier","src":"8943:3:15"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8931:6:15"},"nodeType":"YulFunctionCall","src":"8931:16:15"},"nodeType":"YulExpressionStatement","src":"8931:16:15"}]},"condition":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"8900:6:15"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8916:3:15","type":"","value":"251"},{"kind":"number","nodeType":"YulLiteral","src":"8921:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8912:3:15"},"nodeType":"YulFunctionCall","src":"8912:11:15"},{"kind":"number","nodeType":"YulLiteral","src":"8925:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8908:3:15"},"nodeType":"YulFunctionCall","src":"8908:19:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8897:2:15"},"nodeType":"YulFunctionCall","src":"8897:31:15"},"nodeType":"YulIf","src":"8894:2:15"},{"nodeType":"YulVariableDeclaration","src":"8958:28:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8976:1:15","type":"","value":"5"},{"name":"value1","nodeType":"YulIdentifier","src":"8979:6:15"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"8972:3:15"},"nodeType":"YulFunctionCall","src":"8972:14:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8962:6:15","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9008:3:15"},{"name":"value0","nodeType":"YulIdentifier","src":"9013:6:15"},{"name":"length","nodeType":"YulIdentifier","src":"9021:6:15"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"8995:12:15"},"nodeType":"YulFunctionCall","src":"8995:33:15"},"nodeType":"YulExpressionStatement","src":"8995:33:15"},{"nodeType":"YulVariableDeclaration","src":"9037:26:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9051:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"9056:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9047:3:15"},"nodeType":"YulFunctionCall","src":"9047:16:15"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"9041:2:15","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"9079:2:15"},{"name":"end","nodeType":"YulIdentifier","src":"9083:3:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9072:6:15"},"nodeType":"YulFunctionCall","src":"9072:15:15"},"nodeType":"YulExpressionStatement","src":"9072:15:15"},{"nodeType":"YulAssignment","src":"9096:9:15","value":{"name":"_1","nodeType":"YulIdentifier","src":"9103:2:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9096:3:15"}]}]},"name":"abi_encode_tuple_packed_t_array$_t_uint256_$dyn_calldata_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8852:3:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8857:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8865:6:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8876:3:15","type":""}],"src":"8705:406:15"},{"body":{"nodeType":"YulBlock","src":"9253:137:15","statements":[{"nodeType":"YulVariableDeclaration","src":"9263:27:15","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9283:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9277:5:15"},"nodeType":"YulFunctionCall","src":"9277:13:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"9267:6:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9325:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"9333:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9321:3:15"},"nodeType":"YulFunctionCall","src":"9321:17:15"},{"name":"pos","nodeType":"YulIdentifier","src":"9340:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"9345:6:15"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"9299:21:15"},"nodeType":"YulFunctionCall","src":"9299:53:15"},"nodeType":"YulExpressionStatement","src":"9299:53:15"},{"nodeType":"YulAssignment","src":"9361:23:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9372:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"9377:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9368:3:15"},"nodeType":"YulFunctionCall","src":"9368:16:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9361:3:15"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9229:3:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9234:6:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9245:3:15","type":""}],"src":"9116:274:15"},{"body":{"nodeType":"YulBlock","src":"9643:144:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9660:3:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9669:3:15","type":"","value":"240"},{"kind":"number","nodeType":"YulLiteral","src":"9674:4:15","type":"","value":"6401"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"9665:3:15"},"nodeType":"YulFunctionCall","src":"9665:14:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9653:6:15"},"nodeType":"YulFunctionCall","src":"9653:27:15"},"nodeType":"YulExpressionStatement","src":"9653:27:15"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9700:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"9705:1:15","type":"","value":"2"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9696:3:15"},"nodeType":"YulFunctionCall","src":"9696:11:15"},{"name":"value0","nodeType":"YulIdentifier","src":"9709:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9689:6:15"},"nodeType":"YulFunctionCall","src":"9689:27:15"},"nodeType":"YulExpressionStatement","src":"9689:27:15"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9736:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"9741:2:15","type":"","value":"34"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9732:3:15"},"nodeType":"YulFunctionCall","src":"9732:12:15"},{"name":"value1","nodeType":"YulIdentifier","src":"9746:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9725:6:15"},"nodeType":"YulFunctionCall","src":"9725:28:15"},"nodeType":"YulExpressionStatement","src":"9725:28:15"},{"nodeType":"YulAssignment","src":"9762:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9773:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"9778:2:15","type":"","value":"66"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9769:3:15"},"nodeType":"YulFunctionCall","src":"9769:12:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9762:3:15"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9611:3:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9616:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9624:6:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9635:3:15","type":""}],"src":"9395:392:15"},{"body":{"nodeType":"YulBlock","src":"9984:336:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10001:3:15"},{"kind":"string","nodeType":"YulLiteral","src":"10006:34:15","type":"","value":"OfferStruct(address input_token,"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9994:6:15"},"nodeType":"YulFunctionCall","src":"9994:47:15"},"nodeType":"YulExpressionStatement","src":"9994:47:15"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10061:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"10066:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10057:3:15"},"nodeType":"YulFunctionCall","src":"10057:12:15"},{"kind":"string","nodeType":"YulLiteral","src":"10071:34:15","type":"","value":"address output_token,uint256 inp"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10050:6:15"},"nodeType":"YulFunctionCall","src":"10050:56:15"},"nodeType":"YulExpressionStatement","src":"10050:56:15"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10126:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"10131:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10122:3:15"},"nodeType":"YulFunctionCall","src":"10122:12:15"},{"kind":"string","nodeType":"YulLiteral","src":"10136:34:15","type":"","value":"ut_amount,uint256 output_amount,"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10115:6:15"},"nodeType":"YulFunctionCall","src":"10115:56:15"},"nodeType":"YulExpressionStatement","src":"10115:56:15"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10191:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"10196:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10187:3:15"},"nodeType":"YulFunctionCall","src":"10187:12:15"},{"kind":"string","nodeType":"YulLiteral","src":"10201:34:15","type":"","value":"uint256 good_until,address desti"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10180:6:15"},"nodeType":"YulFunctionCall","src":"10180:56:15"},"nodeType":"YulExpressionStatement","src":"10180:56:15"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10256:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"10261:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10252:3:15"},"nodeType":"YulFunctionCall","src":"10252:13:15"},{"kind":"string","nodeType":"YulLiteral","src":"10267:17:15","type":"","value":"nation_address)"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10245:6:15"},"nodeType":"YulFunctionCall","src":"10245:40:15"},"nodeType":"YulExpressionStatement","src":"10245:40:15"},{"nodeType":"YulAssignment","src":"10294:20:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10305:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"10310:3:15","type":"","value":"143"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10301:3:15"},"nodeType":"YulFunctionCall","src":"10301:13:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10294:3:15"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_3d319feca9505847d767ce348342f57eba6cb498cab9ba7b04781d05d0a55349__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9968:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9976:3:15","type":""}],"src":"9792:528:15"},{"body":{"nodeType":"YulBlock","src":"10517:273:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10534:3:15"},{"kind":"string","nodeType":"YulLiteral","src":"10539:34:15","type":"","value":"DepositStruct(address sender,uin"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10527:6:15"},"nodeType":"YulFunctionCall","src":"10527:47:15"},"nodeType":"YulExpressionStatement","src":"10527:47:15"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10594:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"10599:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10590:3:15"},"nodeType":"YulFunctionCall","src":"10590:12:15"},{"kind":"string","nodeType":"YulLiteral","src":"10604:34:15","type":"","value":"t256[] deposit_amounts,uint256 d"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10583:6:15"},"nodeType":"YulFunctionCall","src":"10583:56:15"},"nodeType":"YulExpressionStatement","src":"10583:56:15"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10659:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"10664:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10655:3:15"},"nodeType":"YulFunctionCall","src":"10655:12:15"},{"kind":"string","nodeType":"YulLiteral","src":"10669:34:15","type":"","value":"ays_locked,uint256 pool_tokens,u"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10648:6:15"},"nodeType":"YulFunctionCall","src":"10648:56:15"},"nodeType":"YulExpressionStatement","src":"10648:56:15"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10724:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"10729:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10720:3:15"},"nodeType":"YulFunctionCall","src":"10720:12:15"},{"kind":"string","nodeType":"YulLiteral","src":"10734:20:15","type":"","value":"int256 good_until)"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10713:6:15"},"nodeType":"YulFunctionCall","src":"10713:42:15"},"nodeType":"YulExpressionStatement","src":"10713:42:15"},{"nodeType":"YulAssignment","src":"10764:20:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10775:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"10780:3:15","type":"","value":"114"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10771:3:15"},"nodeType":"YulFunctionCall","src":"10771:13:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10764:3:15"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_3d95a7a25279d7c707569f0dafa90e17b8a66217592b9c7256c24bb0889e50d5__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10501:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10509:3:15","type":""}],"src":"10325:465:15"},{"body":{"nodeType":"YulBlock","src":"10987:282:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11004:3:15"},{"kind":"string","nodeType":"YulLiteral","src":"11009:34:15","type":"","value":"SingleDepositStruct(address send"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10997:6:15"},"nodeType":"YulFunctionCall","src":"10997:47:15"},"nodeType":"YulExpressionStatement","src":"10997:47:15"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11064:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"11069:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11060:3:15"},"nodeType":"YulFunctionCall","src":"11060:12:15"},{"kind":"string","nodeType":"YulLiteral","src":"11074:34:15","type":"","value":"er,address token,uint256 amount,"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11053:6:15"},"nodeType":"YulFunctionCall","src":"11053:56:15"},"nodeType":"YulExpressionStatement","src":"11053:56:15"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11129:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"11134:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11125:3:15"},"nodeType":"YulFunctionCall","src":"11125:12:15"},{"kind":"string","nodeType":"YulLiteral","src":"11139:34:15","type":"","value":"uint256 days_locked,uint256 pool"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11118:6:15"},"nodeType":"YulFunctionCall","src":"11118:56:15"},"nodeType":"YulExpressionStatement","src":"11118:56:15"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11194:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"11199:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11190:3:15"},"nodeType":"YulFunctionCall","src":"11190:12:15"},{"kind":"string","nodeType":"YulLiteral","src":"11204:29:15","type":"","value":"_tokens,uint256 good_until)"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11183:6:15"},"nodeType":"YulFunctionCall","src":"11183:51:15"},"nodeType":"YulExpressionStatement","src":"11183:51:15"},{"nodeType":"YulAssignment","src":"11243:20:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11254:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"11259:3:15","type":"","value":"123"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11250:3:15"},"nodeType":"YulFunctionCall","src":"11250:13:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11243:3:15"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_854ab15a95f8efcfc79672735ef6fcd525fb264c79010da797a6381b3dc7dd0b__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10971:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10979:3:15","type":""}],"src":"10795:474:15"},{"body":{"nodeType":"YulBlock","src":"11465:14:15","statements":[{"nodeType":"YulAssignment","src":"11467:10:15","value":{"name":"pos","nodeType":"YulIdentifier","src":"11474:3:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11467:3:15"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11449:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11457:3:15","type":""}],"src":"11274:205:15"},{"body":{"nodeType":"YulBlock","src":"11676:327:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11693:3:15"},{"kind":"string","nodeType":"YulLiteral","src":"11698:34:15","type":"","value":"WithdrawalStruct(address token_h"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11686:6:15"},"nodeType":"YulFunctionCall","src":"11686:47:15"},"nodeType":"YulExpressionStatement","src":"11686:47:15"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11753:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"11758:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11749:3:15"},"nodeType":"YulFunctionCall","src":"11749:12:15"},{"kind":"string","nodeType":"YulLiteral","src":"11763:34:15","type":"","value":"older,uint256 pool_token_amount_"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11742:6:15"},"nodeType":"YulFunctionCall","src":"11742:56:15"},"nodeType":"YulExpressionStatement","src":"11742:56:15"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11818:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"11823:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11814:3:15"},"nodeType":"YulFunctionCall","src":"11814:12:15"},{"kind":"string","nodeType":"YulLiteral","src":"11828:34:15","type":"","value":"to_burn,address asset_address,ui"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11807:6:15"},"nodeType":"YulFunctionCall","src":"11807:56:15"},"nodeType":"YulExpressionStatement","src":"11807:56:15"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11883:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"11888:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11879:3:15"},"nodeType":"YulFunctionCall","src":"11879:12:15"},{"kind":"string","nodeType":"YulLiteral","src":"11893:34:15","type":"","value":"nt256 asset_amount,uint256 good_"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11872:6:15"},"nodeType":"YulFunctionCall","src":"11872:56:15"},"nodeType":"YulExpressionStatement","src":"11872:56:15"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11948:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"11953:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11944:3:15"},"nodeType":"YulFunctionCall","src":"11944:13:15"},{"kind":"string","nodeType":"YulLiteral","src":"11959:8:15","type":"","value":"until)"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11937:6:15"},"nodeType":"YulFunctionCall","src":"11937:31:15"},"nodeType":"YulExpressionStatement","src":"11937:31:15"},{"nodeType":"YulAssignment","src":"11977:20:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11988:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"11993:3:15","type":"","value":"134"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11984:3:15"},"nodeType":"YulFunctionCall","src":"11984:13:15"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11977:3:15"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_dc1c16bb50e2d77a5e5db83f15aa87d86ccbd45a25d5d48b51189b91d01a66ea__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11660:3:15","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11668:3:15","type":""}],"src":"11484:519:15"},{"body":{"nodeType":"YulBlock","src":"12109:102:15","statements":[{"nodeType":"YulAssignment","src":"12119:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12131:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12142:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12127:3:15"},"nodeType":"YulFunctionCall","src":"12127:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12119:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12161:9:15"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12176:6:15"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12192:3:15","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"12197:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12188:3:15"},"nodeType":"YulFunctionCall","src":"12188:11:15"},{"kind":"number","nodeType":"YulLiteral","src":"12201:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12184:3:15"},"nodeType":"YulFunctionCall","src":"12184:19:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12172:3:15"},"nodeType":"YulFunctionCall","src":"12172:32:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12154:6:15"},"nodeType":"YulFunctionCall","src":"12154:51:15"},"nodeType":"YulExpressionStatement","src":"12154:51:15"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12078:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12089:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12100:4:15","type":""}],"src":"12008:203:15"},{"body":{"nodeType":"YulBlock","src":"12373:218:15","statements":[{"nodeType":"YulAssignment","src":"12383:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12395:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12406:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12391:3:15"},"nodeType":"YulFunctionCall","src":"12391:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12383:4:15"}]},{"nodeType":"YulVariableDeclaration","src":"12418:29:15","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12436:3:15","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"12441:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12432:3:15"},"nodeType":"YulFunctionCall","src":"12432:11:15"},{"kind":"number","nodeType":"YulLiteral","src":"12445:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12428:3:15"},"nodeType":"YulFunctionCall","src":"12428:19:15"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"12422:2:15","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12463:9:15"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12478:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"12486:2:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12474:3:15"},"nodeType":"YulFunctionCall","src":"12474:15:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12456:6:15"},"nodeType":"YulFunctionCall","src":"12456:34:15"},"nodeType":"YulExpressionStatement","src":"12456:34:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12510:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12521:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12506:3:15"},"nodeType":"YulFunctionCall","src":"12506:18:15"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"12530:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"12538:2:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12526:3:15"},"nodeType":"YulFunctionCall","src":"12526:15:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12499:6:15"},"nodeType":"YulFunctionCall","src":"12499:43:15"},"nodeType":"YulExpressionStatement","src":"12499:43:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12562:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12573:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12558:3:15"},"nodeType":"YulFunctionCall","src":"12558:18:15"},{"name":"value2","nodeType":"YulIdentifier","src":"12578:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12551:6:15"},"nodeType":"YulFunctionCall","src":"12551:34:15"},"nodeType":"YulExpressionStatement","src":"12551:34:15"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12326:9:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"12337:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12345:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12353:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12364:4:15","type":""}],"src":"12216:375:15"},{"body":{"nodeType":"YulBlock","src":"12725:145:15","statements":[{"nodeType":"YulAssignment","src":"12735:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12747:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12758:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12743:3:15"},"nodeType":"YulFunctionCall","src":"12743:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12735:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12777:9:15"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"12792:6:15"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12808:3:15","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"12813:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12804:3:15"},"nodeType":"YulFunctionCall","src":"12804:11:15"},{"kind":"number","nodeType":"YulLiteral","src":"12817:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12800:3:15"},"nodeType":"YulFunctionCall","src":"12800:19:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12788:3:15"},"nodeType":"YulFunctionCall","src":"12788:32:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12770:6:15"},"nodeType":"YulFunctionCall","src":"12770:51:15"},"nodeType":"YulExpressionStatement","src":"12770:51:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12841:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"12852:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12837:3:15"},"nodeType":"YulFunctionCall","src":"12837:18:15"},{"name":"value1","nodeType":"YulIdentifier","src":"12857:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12830:6:15"},"nodeType":"YulFunctionCall","src":"12830:34:15"},"nodeType":"YulExpressionStatement","src":"12830:34:15"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12686:9:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"12697:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"12705:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12716:4:15","type":""}],"src":"12596:274:15"},{"body":{"nodeType":"YulBlock","src":"13132:999:15","statements":[{"nodeType":"YulVariableDeclaration","src":"13142:32:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13160:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"13171:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13156:3:15"},"nodeType":"YulFunctionCall","src":"13156:18:15"},"variables":[{"name":"tail_1","nodeType":"YulTypedName","src":"13146:6:15","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13190:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"13201:2:15","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13183:6:15"},"nodeType":"YulFunctionCall","src":"13183:21:15"},"nodeType":"YulExpressionStatement","src":"13183:21:15"},{"nodeType":"YulVariableDeclaration","src":"13213:17:15","value":{"name":"tail_1","nodeType":"YulIdentifier","src":"13224:6:15"},"variables":[{"name":"pos","nodeType":"YulTypedName","src":"13217:3:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13239:27:15","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13259:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13253:5:15"},"nodeType":"YulFunctionCall","src":"13253:13:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"13243:6:15","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nodeType":"YulIdentifier","src":"13282:6:15"},{"name":"length","nodeType":"YulIdentifier","src":"13290:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13275:6:15"},"nodeType":"YulFunctionCall","src":"13275:22:15"},"nodeType":"YulExpressionStatement","src":"13275:22:15"},{"nodeType":"YulAssignment","src":"13306:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13317:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"13328:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13313:3:15"},"nodeType":"YulFunctionCall","src":"13313:19:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13306:3:15"}]},{"nodeType":"YulVariableDeclaration","src":"13341:14:15","value":{"kind":"number","nodeType":"YulLiteral","src":"13351:4:15","type":"","value":"0x20"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"13345:2:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13364:29:15","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13382:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"13390:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13378:3:15"},"nodeType":"YulFunctionCall","src":"13378:15:15"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"13368:6:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13402:13:15","value":{"name":"tail","nodeType":"YulIdentifier","src":"13411:4:15"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"13406:1:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"13473:120:15","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13494:3:15"},{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"13505:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13499:5:15"},"nodeType":"YulFunctionCall","src":"13499:13:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13487:6:15"},"nodeType":"YulFunctionCall","src":"13487:26:15"},"nodeType":"YulExpressionStatement","src":"13487:26:15"},{"nodeType":"YulAssignment","src":"13526:19:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13537:3:15"},{"name":"_1","nodeType":"YulIdentifier","src":"13542:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13533:3:15"},"nodeType":"YulFunctionCall","src":"13533:12:15"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13526:3:15"}]},{"nodeType":"YulAssignment","src":"13558:25:15","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"13572:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"13580:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13568:3:15"},"nodeType":"YulFunctionCall","src":"13568:15:15"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"13558:6:15"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"13435:1:15"},{"name":"length","nodeType":"YulIdentifier","src":"13438:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13432:2:15"},"nodeType":"YulFunctionCall","src":"13432:13:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"13446:18:15","statements":[{"nodeType":"YulAssignment","src":"13448:14:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"13457:1:15"},{"kind":"number","nodeType":"YulLiteral","src":"13460:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13453:3:15"},"nodeType":"YulFunctionCall","src":"13453:9:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"13448:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"13428:3:15","statements":[]},"src":"13424:169:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13613:9:15"},{"name":"_1","nodeType":"YulIdentifier","src":"13624:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13609:3:15"},"nodeType":"YulFunctionCall","src":"13609:18:15"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13633:3:15"},{"name":"headStart","nodeType":"YulIdentifier","src":"13638:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13629:3:15"},"nodeType":"YulFunctionCall","src":"13629:19:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13602:6:15"},"nodeType":"YulFunctionCall","src":"13602:47:15"},"nodeType":"YulExpressionStatement","src":"13602:47:15"},{"nodeType":"YulVariableDeclaration","src":"13658:16:15","value":{"name":"pos","nodeType":"YulIdentifier","src":"13671:3:15"},"variables":[{"name":"pos_1","nodeType":"YulTypedName","src":"13662:5:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13683:29:15","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13705:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13699:5:15"},"nodeType":"YulFunctionCall","src":"13699:13:15"},"variables":[{"name":"length_1","nodeType":"YulTypedName","src":"13687:8:15","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13728:3:15"},{"name":"length_1","nodeType":"YulIdentifier","src":"13733:8:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13721:6:15"},"nodeType":"YulFunctionCall","src":"13721:21:15"},"nodeType":"YulExpressionStatement","src":"13721:21:15"},{"nodeType":"YulAssignment","src":"13751:21:15","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13764:3:15"},{"name":"_1","nodeType":"YulIdentifier","src":"13769:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13760:3:15"},"nodeType":"YulFunctionCall","src":"13760:12:15"},"variableNames":[{"name":"pos_1","nodeType":"YulIdentifier","src":"13751:5:15"}]},{"nodeType":"YulVariableDeclaration","src":"13781:31:15","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13801:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"13809:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13797:3:15"},"nodeType":"YulFunctionCall","src":"13797:15:15"},"variables":[{"name":"srcPtr_1","nodeType":"YulTypedName","src":"13785:8:15","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13821:15:15","value":{"name":"tail","nodeType":"YulIdentifier","src":"13832:4:15"},"variables":[{"name":"i_1","nodeType":"YulTypedName","src":"13825:3:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"13902:158:15","statements":[{"expression":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"13923:5:15"},{"arguments":[{"arguments":[{"name":"srcPtr_1","nodeType":"YulIdentifier","src":"13940:8:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13934:5:15"},"nodeType":"YulFunctionCall","src":"13934:15:15"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13959:3:15","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"13964:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"13955:3:15"},"nodeType":"YulFunctionCall","src":"13955:11:15"},{"kind":"number","nodeType":"YulLiteral","src":"13968:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13951:3:15"},"nodeType":"YulFunctionCall","src":"13951:19:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13930:3:15"},"nodeType":"YulFunctionCall","src":"13930:41:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13916:6:15"},"nodeType":"YulFunctionCall","src":"13916:56:15"},"nodeType":"YulExpressionStatement","src":"13916:56:15"},{"nodeType":"YulAssignment","src":"13985:23:15","value":{"arguments":[{"name":"pos_1","nodeType":"YulIdentifier","src":"13998:5:15"},{"name":"_1","nodeType":"YulIdentifier","src":"14005:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13994:3:15"},"nodeType":"YulFunctionCall","src":"13994:14:15"},"variableNames":[{"name":"pos_1","nodeType":"YulIdentifier","src":"13985:5:15"}]},{"nodeType":"YulAssignment","src":"14021:29:15","value":{"arguments":[{"name":"srcPtr_1","nodeType":"YulIdentifier","src":"14037:8:15"},{"name":"_1","nodeType":"YulIdentifier","src":"14047:2:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14033:3:15"},"nodeType":"YulFunctionCall","src":"14033:17:15"},"variableNames":[{"name":"srcPtr_1","nodeType":"YulIdentifier","src":"14021:8:15"}]}]},"condition":{"arguments":[{"name":"i_1","nodeType":"YulIdentifier","src":"13856:3:15"},{"name":"length_1","nodeType":"YulIdentifier","src":"13861:8:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13853:2:15"},"nodeType":"YulFunctionCall","src":"13853:17:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"13871:22:15","statements":[{"nodeType":"YulAssignment","src":"13873:18:15","value":{"arguments":[{"name":"i_1","nodeType":"YulIdentifier","src":"13884:3:15"},{"kind":"number","nodeType":"YulLiteral","src":"13889:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13880:3:15"},"nodeType":"YulFunctionCall","src":"13880:11:15"},"variableNames":[{"name":"i_1","nodeType":"YulIdentifier","src":"13873:3:15"}]}]},"pre":{"nodeType":"YulBlock","src":"13849:3:15","statements":[]},"src":"13845:215:15"},{"nodeType":"YulAssignment","src":"14069:13:15","value":{"name":"pos_1","nodeType":"YulIdentifier","src":"14077:5:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14069:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14102:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"14113:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14098:3:15"},"nodeType":"YulFunctionCall","src":"14098:18:15"},{"name":"value2","nodeType":"YulIdentifier","src":"14118:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14091:6:15"},"nodeType":"YulFunctionCall","src":"14091:34:15"},"nodeType":"YulExpressionStatement","src":"14091:34:15"}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_address_$dyn_memory_ptr_t_uint256__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_address_$dyn_memory_ptr_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13085:9:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13096:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13104:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13112:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13123:4:15","type":""}],"src":"12875:1256:15"},{"body":{"nodeType":"YulBlock","src":"14231:92:15","statements":[{"nodeType":"YulAssignment","src":"14241:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14253:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"14264:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14249:3:15"},"nodeType":"YulFunctionCall","src":"14249:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14241:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14283:9:15"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14308:6:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14301:6:15"},"nodeType":"YulFunctionCall","src":"14301:14:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14294:6:15"},"nodeType":"YulFunctionCall","src":"14294:22:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14276:6:15"},"nodeType":"YulFunctionCall","src":"14276:41:15"},"nodeType":"YulExpressionStatement","src":"14276:41:15"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14200:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14211:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14222:4:15","type":""}],"src":"14136:187:15"},{"body":{"nodeType":"YulBlock","src":"14597:403:15","statements":[{"nodeType":"YulAssignment","src":"14607:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14619:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"14630:3:15","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14615:3:15"},"nodeType":"YulFunctionCall","src":"14615:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14607:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14650:9:15"},{"name":"value0","nodeType":"YulIdentifier","src":"14661:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14643:6:15"},"nodeType":"YulFunctionCall","src":"14643:25:15"},"nodeType":"YulExpressionStatement","src":"14643:25:15"},{"nodeType":"YulVariableDeclaration","src":"14677:29:15","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14695:3:15","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"14700:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"14691:3:15"},"nodeType":"YulFunctionCall","src":"14691:11:15"},{"kind":"number","nodeType":"YulLiteral","src":"14704:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14687:3:15"},"nodeType":"YulFunctionCall","src":"14687:19:15"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"14681:2:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14726:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"14737:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14722:3:15"},"nodeType":"YulFunctionCall","src":"14722:18:15"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"14746:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"14754:2:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14742:3:15"},"nodeType":"YulFunctionCall","src":"14742:15:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14715:6:15"},"nodeType":"YulFunctionCall","src":"14715:43:15"},"nodeType":"YulExpressionStatement","src":"14715:43:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14778:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"14789:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14774:3:15"},"nodeType":"YulFunctionCall","src":"14774:18:15"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"14798:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"14806:2:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14794:3:15"},"nodeType":"YulFunctionCall","src":"14794:15:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14767:6:15"},"nodeType":"YulFunctionCall","src":"14767:43:15"},"nodeType":"YulExpressionStatement","src":"14767:43:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14830:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"14841:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14826:3:15"},"nodeType":"YulFunctionCall","src":"14826:18:15"},{"name":"value3","nodeType":"YulIdentifier","src":"14846:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14819:6:15"},"nodeType":"YulFunctionCall","src":"14819:34:15"},"nodeType":"YulExpressionStatement","src":"14819:34:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14873:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"14884:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14869:3:15"},"nodeType":"YulFunctionCall","src":"14869:19:15"},{"name":"value4","nodeType":"YulIdentifier","src":"14890:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14862:6:15"},"nodeType":"YulFunctionCall","src":"14862:35:15"},"nodeType":"YulExpressionStatement","src":"14862:35:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14917:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"14928:3:15","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14913:3:15"},"nodeType":"YulFunctionCall","src":"14913:19:15"},{"name":"value5","nodeType":"YulIdentifier","src":"14934:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14906:6:15"},"nodeType":"YulFunctionCall","src":"14906:35:15"},"nodeType":"YulExpressionStatement","src":"14906:35:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14961:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"14972:3:15","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14957:3:15"},"nodeType":"YulFunctionCall","src":"14957:19:15"},{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"14982:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"14990:2:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"14978:3:15"},"nodeType":"YulFunctionCall","src":"14978:15:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14950:6:15"},"nodeType":"YulFunctionCall","src":"14950:44:15"},"nodeType":"YulExpressionStatement","src":"14950:44:15"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256_t_address__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14518:9:15","type":""},{"name":"value6","nodeType":"YulTypedName","src":"14529:6:15","type":""},{"name":"value5","nodeType":"YulTypedName","src":"14537:6:15","type":""},{"name":"value4","nodeType":"YulTypedName","src":"14545:6:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"14553:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"14561:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14569:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14577:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14588:4:15","type":""}],"src":"14328:672:15"},{"body":{"nodeType":"YulBlock","src":"15274:394:15","statements":[{"nodeType":"YulAssignment","src":"15284:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15296:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"15307:3:15","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15292:3:15"},"nodeType":"YulFunctionCall","src":"15292:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15284:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15327:9:15"},{"name":"value0","nodeType":"YulIdentifier","src":"15338:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15320:6:15"},"nodeType":"YulFunctionCall","src":"15320:25:15"},"nodeType":"YulExpressionStatement","src":"15320:25:15"},{"nodeType":"YulVariableDeclaration","src":"15354:29:15","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15372:3:15","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"15377:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"15368:3:15"},"nodeType":"YulFunctionCall","src":"15368:11:15"},{"kind":"number","nodeType":"YulLiteral","src":"15381:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15364:3:15"},"nodeType":"YulFunctionCall","src":"15364:19:15"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"15358:2:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15403:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"15414:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15399:3:15"},"nodeType":"YulFunctionCall","src":"15399:18:15"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15423:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"15431:2:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15419:3:15"},"nodeType":"YulFunctionCall","src":"15419:15:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15392:6:15"},"nodeType":"YulFunctionCall","src":"15392:43:15"},"nodeType":"YulExpressionStatement","src":"15392:43:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15455:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"15466:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15451:3:15"},"nodeType":"YulFunctionCall","src":"15451:18:15"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"15475:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"15483:2:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15471:3:15"},"nodeType":"YulFunctionCall","src":"15471:15:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15444:6:15"},"nodeType":"YulFunctionCall","src":"15444:43:15"},"nodeType":"YulExpressionStatement","src":"15444:43:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15507:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"15518:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15503:3:15"},"nodeType":"YulFunctionCall","src":"15503:18:15"},{"name":"value3","nodeType":"YulIdentifier","src":"15523:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15496:6:15"},"nodeType":"YulFunctionCall","src":"15496:34:15"},"nodeType":"YulExpressionStatement","src":"15496:34:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15550:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"15561:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15546:3:15"},"nodeType":"YulFunctionCall","src":"15546:19:15"},{"name":"value4","nodeType":"YulIdentifier","src":"15567:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15539:6:15"},"nodeType":"YulFunctionCall","src":"15539:35:15"},"nodeType":"YulExpressionStatement","src":"15539:35:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15594:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"15605:3:15","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15590:3:15"},"nodeType":"YulFunctionCall","src":"15590:19:15"},{"name":"value5","nodeType":"YulIdentifier","src":"15611:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15583:6:15"},"nodeType":"YulFunctionCall","src":"15583:35:15"},"nodeType":"YulExpressionStatement","src":"15583:35:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15638:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"15649:3:15","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15634:3:15"},"nodeType":"YulFunctionCall","src":"15634:19:15"},{"name":"value6","nodeType":"YulIdentifier","src":"15655:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15627:6:15"},"nodeType":"YulFunctionCall","src":"15627:35:15"},"nodeType":"YulExpressionStatement","src":"15627:35:15"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15195:9:15","type":""},{"name":"value6","nodeType":"YulTypedName","src":"15206:6:15","type":""},{"name":"value5","nodeType":"YulTypedName","src":"15214:6:15","type":""},{"name":"value4","nodeType":"YulTypedName","src":"15222:6:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"15230:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15238:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15246:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15254:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15265:4:15","type":""}],"src":"15005:663:15"},{"body":{"nodeType":"YulBlock","src":"15914:320:15","statements":[{"nodeType":"YulAssignment","src":"15924:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15936:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"15947:3:15","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15932:3:15"},"nodeType":"YulFunctionCall","src":"15932:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15924:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15967:9:15"},{"name":"value0","nodeType":"YulIdentifier","src":"15978:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15960:6:15"},"nodeType":"YulFunctionCall","src":"15960:25:15"},"nodeType":"YulExpressionStatement","src":"15960:25:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16005:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16016:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16001:3:15"},"nodeType":"YulFunctionCall","src":"16001:18:15"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"16025:6:15"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16041:3:15","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"16046:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16037:3:15"},"nodeType":"YulFunctionCall","src":"16037:11:15"},{"kind":"number","nodeType":"YulLiteral","src":"16050:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16033:3:15"},"nodeType":"YulFunctionCall","src":"16033:19:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16021:3:15"},"nodeType":"YulFunctionCall","src":"16021:32:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15994:6:15"},"nodeType":"YulFunctionCall","src":"15994:60:15"},"nodeType":"YulExpressionStatement","src":"15994:60:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16074:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16085:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16070:3:15"},"nodeType":"YulFunctionCall","src":"16070:18:15"},{"name":"value2","nodeType":"YulIdentifier","src":"16090:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16063:6:15"},"nodeType":"YulFunctionCall","src":"16063:34:15"},"nodeType":"YulExpressionStatement","src":"16063:34:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16117:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16128:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16113:3:15"},"nodeType":"YulFunctionCall","src":"16113:18:15"},{"name":"value3","nodeType":"YulIdentifier","src":"16133:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16106:6:15"},"nodeType":"YulFunctionCall","src":"16106:34:15"},"nodeType":"YulExpressionStatement","src":"16106:34:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16160:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16171:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16156:3:15"},"nodeType":"YulFunctionCall","src":"16156:19:15"},{"name":"value4","nodeType":"YulIdentifier","src":"16177:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16149:6:15"},"nodeType":"YulFunctionCall","src":"16149:35:15"},"nodeType":"YulExpressionStatement","src":"16149:35:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16204:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16215:3:15","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16200:3:15"},"nodeType":"YulFunctionCall","src":"16200:19:15"},{"name":"value5","nodeType":"YulIdentifier","src":"16221:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16193:6:15"},"nodeType":"YulFunctionCall","src":"16193:35:15"},"nodeType":"YulExpressionStatement","src":"16193:35:15"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_bytes32_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_bytes32_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15843:9:15","type":""},{"name":"value5","nodeType":"YulTypedName","src":"15854:6:15","type":""},{"name":"value4","nodeType":"YulTypedName","src":"15862:6:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"15870:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"15878:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"15886:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"15894:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15905:4:15","type":""}],"src":"15673:561:15"},{"body":{"nodeType":"YulBlock","src":"16480:350:15","statements":[{"nodeType":"YulAssignment","src":"16490:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16502:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16513:3:15","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16498:3:15"},"nodeType":"YulFunctionCall","src":"16498:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16490:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16533:9:15"},{"name":"value0","nodeType":"YulIdentifier","src":"16544:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16526:6:15"},"nodeType":"YulFunctionCall","src":"16526:25:15"},"nodeType":"YulExpressionStatement","src":"16526:25:15"},{"nodeType":"YulVariableDeclaration","src":"16560:29:15","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16578:3:15","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"16583:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"16574:3:15"},"nodeType":"YulFunctionCall","src":"16574:11:15"},{"kind":"number","nodeType":"YulLiteral","src":"16587:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"16570:3:15"},"nodeType":"YulFunctionCall","src":"16570:19:15"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"16564:2:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16609:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16620:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16605:3:15"},"nodeType":"YulFunctionCall","src":"16605:18:15"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"16629:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"16637:2:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16625:3:15"},"nodeType":"YulFunctionCall","src":"16625:15:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16598:6:15"},"nodeType":"YulFunctionCall","src":"16598:43:15"},"nodeType":"YulExpressionStatement","src":"16598:43:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16661:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16672:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16657:3:15"},"nodeType":"YulFunctionCall","src":"16657:18:15"},{"name":"value2","nodeType":"YulIdentifier","src":"16677:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16650:6:15"},"nodeType":"YulFunctionCall","src":"16650:34:15"},"nodeType":"YulExpressionStatement","src":"16650:34:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16704:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16715:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16700:3:15"},"nodeType":"YulFunctionCall","src":"16700:18:15"},{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"16724:6:15"},{"name":"_1","nodeType":"YulIdentifier","src":"16732:2:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16720:3:15"},"nodeType":"YulFunctionCall","src":"16720:15:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16693:6:15"},"nodeType":"YulFunctionCall","src":"16693:43:15"},"nodeType":"YulExpressionStatement","src":"16693:43:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16756:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16767:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16752:3:15"},"nodeType":"YulFunctionCall","src":"16752:19:15"},{"name":"value4","nodeType":"YulIdentifier","src":"16773:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16745:6:15"},"nodeType":"YulFunctionCall","src":"16745:35:15"},"nodeType":"YulExpressionStatement","src":"16745:35:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16800:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"16811:3:15","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16796:3:15"},"nodeType":"YulFunctionCall","src":"16796:19:15"},{"name":"value5","nodeType":"YulIdentifier","src":"16817:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16789:6:15"},"nodeType":"YulFunctionCall","src":"16789:35:15"},"nodeType":"YulExpressionStatement","src":"16789:35:15"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_uint256_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_address_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16409:9:15","type":""},{"name":"value5","nodeType":"YulTypedName","src":"16420:6:15","type":""},{"name":"value4","nodeType":"YulTypedName","src":"16428:6:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"16436:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"16444:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16452:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16460:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16471:4:15","type":""}],"src":"16239:591:15"},{"body":{"nodeType":"YulBlock","src":"17016:217:15","statements":[{"nodeType":"YulAssignment","src":"17026:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17038:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"17049:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17034:3:15"},"nodeType":"YulFunctionCall","src":"17034:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17026:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17069:9:15"},{"name":"value0","nodeType":"YulIdentifier","src":"17080:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17062:6:15"},"nodeType":"YulFunctionCall","src":"17062:25:15"},"nodeType":"YulExpressionStatement","src":"17062:25:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17107:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"17118:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17103:3:15"},"nodeType":"YulFunctionCall","src":"17103:18:15"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17127:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"17135:4:15","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17123:3:15"},"nodeType":"YulFunctionCall","src":"17123:17:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17096:6:15"},"nodeType":"YulFunctionCall","src":"17096:45:15"},"nodeType":"YulExpressionStatement","src":"17096:45:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17161:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"17172:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17157:3:15"},"nodeType":"YulFunctionCall","src":"17157:18:15"},{"name":"value2","nodeType":"YulIdentifier","src":"17177:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17150:6:15"},"nodeType":"YulFunctionCall","src":"17150:34:15"},"nodeType":"YulExpressionStatement","src":"17150:34:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17204:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"17215:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17200:3:15"},"nodeType":"YulFunctionCall","src":"17200:18:15"},{"name":"value3","nodeType":"YulIdentifier","src":"17220:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17193:6:15"},"nodeType":"YulFunctionCall","src":"17193:34:15"},"nodeType":"YulExpressionStatement","src":"17193:34:15"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16961:9:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"16972:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"16980:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16988:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16996:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17007:4:15","type":""}],"src":"16835:398:15"},{"body":{"nodeType":"YulBlock","src":"17359:262:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17376:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"17387:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17369:6:15"},"nodeType":"YulFunctionCall","src":"17369:21:15"},"nodeType":"YulExpressionStatement","src":"17369:21:15"},{"nodeType":"YulVariableDeclaration","src":"17399:27:15","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17419:6:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17413:5:15"},"nodeType":"YulFunctionCall","src":"17413:13:15"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"17403:6:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17446:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"17457:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17442:3:15"},"nodeType":"YulFunctionCall","src":"17442:18:15"},{"name":"length","nodeType":"YulIdentifier","src":"17462:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17435:6:15"},"nodeType":"YulFunctionCall","src":"17435:34:15"},"nodeType":"YulExpressionStatement","src":"17435:34:15"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17504:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"17512:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17500:3:15"},"nodeType":"YulFunctionCall","src":"17500:15:15"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17521:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"17532:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17517:3:15"},"nodeType":"YulFunctionCall","src":"17517:18:15"},{"name":"length","nodeType":"YulIdentifier","src":"17537:6:15"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"17478:21:15"},"nodeType":"YulFunctionCall","src":"17478:66:15"},"nodeType":"YulExpressionStatement","src":"17478:66:15"},{"nodeType":"YulAssignment","src":"17553:62:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17569:9:15"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"17588:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"17596:2:15","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17584:3:15"},"nodeType":"YulFunctionCall","src":"17584:15:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17605:2:15","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"17601:3:15"},"nodeType":"YulFunctionCall","src":"17601:7:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"17580:3:15"},"nodeType":"YulFunctionCall","src":"17580:29:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17565:3:15"},"nodeType":"YulFunctionCall","src":"17565:45:15"},{"kind":"number","nodeType":"YulLiteral","src":"17612:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17561:3:15"},"nodeType":"YulFunctionCall","src":"17561:54:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17553:4:15"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17328:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17339:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17350:4:15","type":""}],"src":"17238:383:15"},{"body":{"nodeType":"YulBlock","src":"17800:225:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17817:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"17828:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17810:6:15"},"nodeType":"YulFunctionCall","src":"17810:21:15"},"nodeType":"YulExpressionStatement","src":"17810:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17851:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"17862:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17847:3:15"},"nodeType":"YulFunctionCall","src":"17847:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"17867:2:15","type":"","value":"35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17840:6:15"},"nodeType":"YulFunctionCall","src":"17840:30:15"},"nodeType":"YulExpressionStatement","src":"17840:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17890:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"17901:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17886:3:15"},"nodeType":"YulFunctionCall","src":"17886:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"17906:34:15","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17879:6:15"},"nodeType":"YulFunctionCall","src":"17879:62:15"},"nodeType":"YulExpressionStatement","src":"17879:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17961:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"17972:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17957:3:15"},"nodeType":"YulFunctionCall","src":"17957:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"17977:5:15","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17950:6:15"},"nodeType":"YulFunctionCall","src":"17950:33:15"},"nodeType":"YulExpressionStatement","src":"17950:33:15"},{"nodeType":"YulAssignment","src":"17992:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18004:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"18015:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18000:3:15"},"nodeType":"YulFunctionCall","src":"18000:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17992:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17777:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17791:4:15","type":""}],"src":"17626:399:15"},{"body":{"nodeType":"YulBlock","src":"18204:229:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18221:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"18232:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18214:6:15"},"nodeType":"YulFunctionCall","src":"18214:21:15"},"nodeType":"YulExpressionStatement","src":"18214:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18255:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"18266:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18251:3:15"},"nodeType":"YulFunctionCall","src":"18251:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"18271:2:15","type":"","value":"39"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18244:6:15"},"nodeType":"YulFunctionCall","src":"18244:30:15"},"nodeType":"YulExpressionStatement","src":"18244:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18294:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"18305:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18290:3:15"},"nodeType":"YulFunctionCall","src":"18290:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"18310:34:15","type":"","value":"Listed sender does not match msg"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18283:6:15"},"nodeType":"YulFunctionCall","src":"18283:62:15"},"nodeType":"YulExpressionStatement","src":"18283:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18365:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"18376:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18361:3:15"},"nodeType":"YulFunctionCall","src":"18361:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"18381:9:15","type":"","value":".sender"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18354:6:15"},"nodeType":"YulFunctionCall","src":"18354:37:15"},"nodeType":"YulExpressionStatement","src":"18354:37:15"},{"nodeType":"YulAssignment","src":"18400:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18412:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"18423:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18408:3:15"},"nodeType":"YulFunctionCall","src":"18408:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18400:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_0a5ae24586c42853089a7adae7ba167ef36c90975655ae5080f5e82d93812c06__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18181:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18195:4:15","type":""}],"src":"18030:403:15"},{"body":{"nodeType":"YulBlock","src":"18612:224:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18629:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"18640:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18622:6:15"},"nodeType":"YulFunctionCall","src":"18622:21:15"},"nodeType":"YulExpressionStatement","src":"18622:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18663:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"18674:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18659:3:15"},"nodeType":"YulFunctionCall","src":"18659:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"18679:2:15","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18652:6:15"},"nodeType":"YulFunctionCall","src":"18652:30:15"},"nodeType":"YulExpressionStatement","src":"18652:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18702:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"18713:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18698:3:15"},"nodeType":"YulFunctionCall","src":"18698:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"18718:34:15","type":"","value":"ERC20: burn amount exceeds balan"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18691:6:15"},"nodeType":"YulFunctionCall","src":"18691:62:15"},"nodeType":"YulExpressionStatement","src":"18691:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18773:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"18784:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18769:3:15"},"nodeType":"YulFunctionCall","src":"18769:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"18789:4:15","type":"","value":"ce"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18762:6:15"},"nodeType":"YulFunctionCall","src":"18762:32:15"},"nodeType":"YulExpressionStatement","src":"18762:32:15"},{"nodeType":"YulAssignment","src":"18803:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18815:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"18826:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18811:3:15"},"nodeType":"YulFunctionCall","src":"18811:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18803:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18589:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18603:4:15","type":""}],"src":"18438:398:15"},{"body":{"nodeType":"YulBlock","src":"19015:306:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19032:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19043:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19025:6:15"},"nodeType":"YulFunctionCall","src":"19025:21:15"},"nodeType":"YulExpressionStatement","src":"19025:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19066:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19077:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19062:3:15"},"nodeType":"YulFunctionCall","src":"19062:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"19082:2:15","type":"","value":"76"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19055:6:15"},"nodeType":"YulFunctionCall","src":"19055:30:15"},"nodeType":"YulExpressionStatement","src":"19055:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19105:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19116:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19101:3:15"},"nodeType":"YulFunctionCall","src":"19101:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"19121:34:15","type":"","value":"ClipperDirect: Cannot create ves"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19094:6:15"},"nodeType":"YulFunctionCall","src":"19094:62:15"},"nodeType":"YulExpressionStatement","src":"19094:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19176:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19187:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19172:3:15"},"nodeType":"YulFunctionCall","src":"19172:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"19192:34:15","type":"","value":"ting deposit without positive ve"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19165:6:15"},"nodeType":"YulFunctionCall","src":"19165:62:15"},"nodeType":"YulExpressionStatement","src":"19165:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19247:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19258:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19243:3:15"},"nodeType":"YulFunctionCall","src":"19243:19:15"},{"kind":"string","nodeType":"YulLiteral","src":"19264:14:15","type":"","value":"sting period"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19236:6:15"},"nodeType":"YulFunctionCall","src":"19236:43:15"},"nodeType":"YulExpressionStatement","src":"19236:43:15"},{"nodeType":"YulAssignment","src":"19288:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19300:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19311:3:15","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19296:3:15"},"nodeType":"YulFunctionCall","src":"19296:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19288:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_19ff38d14ee2c2908afcc6eb0c8a649dac6714ac12747a949ef1d3ae43ab7c31__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18992:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19006:4:15","type":""}],"src":"18841:480:15"},{"body":{"nodeType":"YulBlock","src":"19500:228:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19517:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19528:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19510:6:15"},"nodeType":"YulFunctionCall","src":"19510:21:15"},"nodeType":"YulExpressionStatement","src":"19510:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19551:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19562:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19547:3:15"},"nodeType":"YulFunctionCall","src":"19547:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"19567:2:15","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19540:6:15"},"nodeType":"YulFunctionCall","src":"19540:30:15"},"nodeType":"YulExpressionStatement","src":"19540:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19590:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19601:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19586:3:15"},"nodeType":"YulFunctionCall","src":"19586:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"19606:34:15","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19579:6:15"},"nodeType":"YulFunctionCall","src":"19579:62:15"},"nodeType":"YulExpressionStatement","src":"19579:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19661:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19672:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19657:3:15"},"nodeType":"YulFunctionCall","src":"19657:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"19677:8:15","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19650:6:15"},"nodeType":"YulFunctionCall","src":"19650:36:15"},"nodeType":"YulExpressionStatement","src":"19650:36:15"},{"nodeType":"YulAssignment","src":"19695:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19707:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19718:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19703:3:15"},"nodeType":"YulFunctionCall","src":"19703:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19695:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19477:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19491:4:15","type":""}],"src":"19326:402:15"},{"body":{"nodeType":"YulBlock","src":"19907:224:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19924:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19935:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19917:6:15"},"nodeType":"YulFunctionCall","src":"19917:21:15"},"nodeType":"YulExpressionStatement","src":"19917:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19958:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"19969:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19954:3:15"},"nodeType":"YulFunctionCall","src":"19954:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"19974:2:15","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19947:6:15"},"nodeType":"YulFunctionCall","src":"19947:30:15"},"nodeType":"YulExpressionStatement","src":"19947:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19997:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"20008:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19993:3:15"},"nodeType":"YulFunctionCall","src":"19993:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"20013:34:15","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19986:6:15"},"nodeType":"YulFunctionCall","src":"19986:62:15"},"nodeType":"YulExpressionStatement","src":"19986:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20068:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"20079:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20064:3:15"},"nodeType":"YulFunctionCall","src":"20064:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"20084:4:15","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20057:6:15"},"nodeType":"YulFunctionCall","src":"20057:32:15"},"nodeType":"YulExpressionStatement","src":"20057:32:15"},{"nodeType":"YulAssignment","src":"20098:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20110:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"20121:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20106:3:15"},"nodeType":"YulFunctionCall","src":"20106:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20098:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19884:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19898:4:15","type":""}],"src":"19733:398:15"},{"body":{"nodeType":"YulBlock","src":"20310:173:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20327:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"20338:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20320:6:15"},"nodeType":"YulFunctionCall","src":"20320:21:15"},"nodeType":"YulExpressionStatement","src":"20320:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20361:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"20372:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20357:3:15"},"nodeType":"YulFunctionCall","src":"20357:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"20377:2:15","type":"","value":"23"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20350:6:15"},"nodeType":"YulFunctionCall","src":"20350:30:15"},"nodeType":"YulExpressionStatement","src":"20350:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20400:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"20411:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20396:3:15"},"nodeType":"YulFunctionCall","src":"20396:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"20416:25:15","type":"","value":"Clipper: Invalid tokens"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20389:6:15"},"nodeType":"YulFunctionCall","src":"20389:53:15"},"nodeType":"YulExpressionStatement","src":"20389:53:15"},{"nodeType":"YulAssignment","src":"20451:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20463:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"20474:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20459:3:15"},"nodeType":"YulFunctionCall","src":"20459:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20451:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_256e74c97ba3a0a86219f8fb02d60dd0721213192300fa9f90b7e3a3ba038027__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20287:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20301:4:15","type":""}],"src":"20136:347:15"},{"body":{"nodeType":"YulBlock","src":"20662:228:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20679:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"20690:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20672:6:15"},"nodeType":"YulFunctionCall","src":"20672:21:15"},"nodeType":"YulExpressionStatement","src":"20672:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20713:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"20724:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20709:3:15"},"nodeType":"YulFunctionCall","src":"20709:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"20729:2:15","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20702:6:15"},"nodeType":"YulFunctionCall","src":"20702:30:15"},"nodeType":"YulExpressionStatement","src":"20702:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20752:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"20763:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20748:3:15"},"nodeType":"YulFunctionCall","src":"20748:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"20768:34:15","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20741:6:15"},"nodeType":"YulFunctionCall","src":"20741:62:15"},"nodeType":"YulExpressionStatement","src":"20741:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20823:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"20834:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20819:3:15"},"nodeType":"YulFunctionCall","src":"20819:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"20839:8:15","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20812:6:15"},"nodeType":"YulFunctionCall","src":"20812:36:15"},"nodeType":"YulExpressionStatement","src":"20812:36:15"},{"nodeType":"YulAssignment","src":"20857:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20869:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"20880:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20865:3:15"},"nodeType":"YulFunctionCall","src":"20865:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20857:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20639:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20653:4:15","type":""}],"src":"20488:402:15"},{"body":{"nodeType":"YulBlock","src":"21069:172:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21086:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"21097:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21079:6:15"},"nodeType":"YulFunctionCall","src":"21079:21:15"},"nodeType":"YulExpressionStatement","src":"21079:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21120:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"21131:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21116:3:15"},"nodeType":"YulFunctionCall","src":"21116:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"21136:2:15","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21109:6:15"},"nodeType":"YulFunctionCall","src":"21109:30:15"},"nodeType":"YulExpressionStatement","src":"21109:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21159:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"21170:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21155:3:15"},"nodeType":"YulFunctionCall","src":"21155:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"21175:24:15","type":"","value":"Call with value failed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21148:6:15"},"nodeType":"YulFunctionCall","src":"21148:52:15"},"nodeType":"YulExpressionStatement","src":"21148:52:15"},{"nodeType":"YulAssignment","src":"21209:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21221:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"21232:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21217:3:15"},"nodeType":"YulFunctionCall","src":"21217:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21209:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_4dc1c474fdcd167f46d49bd57ba7980d9cbb51b933d21fdea056c810554c3a4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21046:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21060:4:15","type":""}],"src":"20895:346:15"},{"body":{"nodeType":"YulBlock","src":"21420:228:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21437:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"21448:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21430:6:15"},"nodeType":"YulFunctionCall","src":"21430:21:15"},"nodeType":"YulExpressionStatement","src":"21430:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21471:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"21482:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21467:3:15"},"nodeType":"YulFunctionCall","src":"21467:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"21487:2:15","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21460:6:15"},"nodeType":"YulFunctionCall","src":"21460:30:15"},"nodeType":"YulExpressionStatement","src":"21460:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21510:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"21521:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21506:3:15"},"nodeType":"YulFunctionCall","src":"21506:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"21526:34:15","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21499:6:15"},"nodeType":"YulFunctionCall","src":"21499:62:15"},"nodeType":"YulExpressionStatement","src":"21499:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21581:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"21592:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21577:3:15"},"nodeType":"YulFunctionCall","src":"21577:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"21597:8:15","type":"","value":"r call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21570:6:15"},"nodeType":"YulFunctionCall","src":"21570:36:15"},"nodeType":"YulExpressionStatement","src":"21570:36:15"},{"nodeType":"YulAssignment","src":"21615:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21627:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"21638:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21623:3:15"},"nodeType":"YulFunctionCall","src":"21623:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21615:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21397:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21411:4:15","type":""}],"src":"21246:402:15"},{"body":{"nodeType":"YulBlock","src":"21827:179:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21844:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"21855:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21837:6:15"},"nodeType":"YulFunctionCall","src":"21837:21:15"},"nodeType":"YulExpressionStatement","src":"21837:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21878:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"21889:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21874:3:15"},"nodeType":"YulFunctionCall","src":"21874:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"21894:2:15","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21867:6:15"},"nodeType":"YulFunctionCall","src":"21867:30:15"},"nodeType":"YulExpressionStatement","src":"21867:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21917:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"21928:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21913:3:15"},"nodeType":"YulFunctionCall","src":"21913:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"21933:31:15","type":"","value":"Clipper: Failed tx uniqueness"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21906:6:15"},"nodeType":"YulFunctionCall","src":"21906:59:15"},"nodeType":"YulExpressionStatement","src":"21906:59:15"},{"nodeType":"YulAssignment","src":"21974:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21986:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"21997:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21982:3:15"},"nodeType":"YulFunctionCall","src":"21982:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21974:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_608a4c33c62dcf473a62cc3c30aeb4a9099b0f5ad15014a7c93bc32b3f3fbd15__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21804:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21818:4:15","type":""}],"src":"21653:353:15"},{"body":{"nodeType":"YulBlock","src":"22185:231:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22202:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"22213:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22195:6:15"},"nodeType":"YulFunctionCall","src":"22195:21:15"},"nodeType":"YulExpressionStatement","src":"22195:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22236:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"22247:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22232:3:15"},"nodeType":"YulFunctionCall","src":"22232:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"22252:2:15","type":"","value":"41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22225:6:15"},"nodeType":"YulFunctionCall","src":"22225:30:15"},"nodeType":"YulExpressionStatement","src":"22225:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22275:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"22286:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22271:3:15"},"nodeType":"YulFunctionCall","src":"22271:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"22291:34:15","type":"","value":"ClipperDirect: Deposit cannot be"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22264:6:15"},"nodeType":"YulFunctionCall","src":"22264:62:15"},"nodeType":"YulExpressionStatement","src":"22264:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22346:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"22357:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22342:3:15"},"nodeType":"YulFunctionCall","src":"22342:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"22362:11:15","type":"","value":" unlocked"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22335:6:15"},"nodeType":"YulFunctionCall","src":"22335:39:15"},"nodeType":"YulExpressionStatement","src":"22335:39:15"},{"nodeType":"YulAssignment","src":"22383:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22395:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"22406:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22391:3:15"},"nodeType":"YulFunctionCall","src":"22391:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22383:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_7752a0b69c0076da7afc70c2a8e6086ce10326f392001ea0eea0240ca51b8a6e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22162:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22176:4:15","type":""}],"src":"22011:405:15"},{"body":{"nodeType":"YulBlock","src":"22595:225:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22612:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"22623:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22605:6:15"},"nodeType":"YulFunctionCall","src":"22605:21:15"},"nodeType":"YulExpressionStatement","src":"22605:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22646:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"22657:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22642:3:15"},"nodeType":"YulFunctionCall","src":"22642:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"22662:2:15","type":"","value":"35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22635:6:15"},"nodeType":"YulFunctionCall","src":"22635:30:15"},"nodeType":"YulExpressionStatement","src":"22635:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22685:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"22696:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22681:3:15"},"nodeType":"YulFunctionCall","src":"22681:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"22701:34:15","type":"","value":"Message signed by incorrect addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22674:6:15"},"nodeType":"YulFunctionCall","src":"22674:62:15"},"nodeType":"YulExpressionStatement","src":"22674:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22756:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"22767:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22752:3:15"},"nodeType":"YulFunctionCall","src":"22752:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"22772:5:15","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22745:6:15"},"nodeType":"YulFunctionCall","src":"22745:33:15"},"nodeType":"YulExpressionStatement","src":"22745:33:15"},{"nodeType":"YulAssignment","src":"22787:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22799:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"22810:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22795:3:15"},"nodeType":"YulFunctionCall","src":"22795:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22787:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_8ddfa2ee14efeb6e6e95cd728978f72934a39c67dc5c070d37711dde99b562e6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22572:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22586:4:15","type":""}],"src":"22421:399:15"},{"body":{"nodeType":"YulBlock","src":"22999:230:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23016:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23027:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23009:6:15"},"nodeType":"YulFunctionCall","src":"23009:21:15"},"nodeType":"YulExpressionStatement","src":"23009:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23050:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23061:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23046:3:15"},"nodeType":"YulFunctionCall","src":"23046:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"23066:2:15","type":"","value":"40"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23039:6:15"},"nodeType":"YulFunctionCall","src":"23039:30:15"},"nodeType":"YulExpressionStatement","src":"23039:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23089:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23100:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23085:3:15"},"nodeType":"YulFunctionCall","src":"23085:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"23105:34:15","type":"","value":"ERC20: transfer amount exceeds a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23078:6:15"},"nodeType":"YulFunctionCall","src":"23078:62:15"},"nodeType":"YulExpressionStatement","src":"23078:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23160:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23171:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23156:3:15"},"nodeType":"YulFunctionCall","src":"23156:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"23176:10:15","type":"","value":"llowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23149:6:15"},"nodeType":"YulFunctionCall","src":"23149:38:15"},"nodeType":"YulExpressionStatement","src":"23149:38:15"},{"nodeType":"YulAssignment","src":"23196:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23208:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23219:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23204:3:15"},"nodeType":"YulFunctionCall","src":"23204:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23196:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22976:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22990:4:15","type":""}],"src":"22825:404:15"},{"body":{"nodeType":"YulBlock","src":"23408:182:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23425:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23436:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23418:6:15"},"nodeType":"YulFunctionCall","src":"23418:21:15"},"nodeType":"YulExpressionStatement","src":"23418:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23459:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23470:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23455:3:15"},"nodeType":"YulFunctionCall","src":"23455:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"23475:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23448:6:15"},"nodeType":"YulFunctionCall","src":"23448:30:15"},"nodeType":"YulExpressionStatement","src":"23448:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23498:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23509:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23494:3:15"},"nodeType":"YulFunctionCall","src":"23494:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"23514:34:15","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23487:6:15"},"nodeType":"YulFunctionCall","src":"23487:62:15"},"nodeType":"YulExpressionStatement","src":"23487:62:15"},{"nodeType":"YulAssignment","src":"23558:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23570:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23581:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23566:3:15"},"nodeType":"YulFunctionCall","src":"23566:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23558:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23385:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23399:4:15","type":""}],"src":"23234:356:15"},{"body":{"nodeType":"YulBlock","src":"23769:229:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23786:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23797:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23779:6:15"},"nodeType":"YulFunctionCall","src":"23779:21:15"},"nodeType":"YulExpressionStatement","src":"23779:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23820:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23831:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23816:3:15"},"nodeType":"YulFunctionCall","src":"23816:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"23836:2:15","type":"","value":"39"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23809:6:15"},"nodeType":"YulFunctionCall","src":"23809:30:15"},"nodeType":"YulExpressionStatement","src":"23809:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23859:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23870:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23855:3:15"},"nodeType":"YulFunctionCall","src":"23855:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"23875:34:15","type":"","value":"SafeCast: value doesn't fit in 2"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23848:6:15"},"nodeType":"YulFunctionCall","src":"23848:62:15"},"nodeType":"YulExpressionStatement","src":"23848:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23930:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23941:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23926:3:15"},"nodeType":"YulFunctionCall","src":"23926:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"23946:9:15","type":"","value":"24 bits"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23919:6:15"},"nodeType":"YulFunctionCall","src":"23919:37:15"},"nodeType":"YulExpressionStatement","src":"23919:37:15"},{"nodeType":"YulAssignment","src":"23965:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23977:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"23988:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23973:3:15"},"nodeType":"YulFunctionCall","src":"23973:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23965:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23746:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23760:4:15","type":""}],"src":"23595:403:15"},{"body":{"nodeType":"YulBlock","src":"24177:163:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24194:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"24205:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24187:6:15"},"nodeType":"YulFunctionCall","src":"24187:21:15"},"nodeType":"YulExpressionStatement","src":"24187:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24228:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"24239:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24224:3:15"},"nodeType":"YulFunctionCall","src":"24224:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"24244:2:15","type":"","value":"13"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24217:6:15"},"nodeType":"YulFunctionCall","src":"24217:30:15"},"nodeType":"YulExpressionStatement","src":"24217:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24267:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"24278:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24263:3:15"},"nodeType":"YulFunctionCall","src":"24263:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"24283:15:15","type":"","value":"Invalid input"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24256:6:15"},"nodeType":"YulFunctionCall","src":"24256:43:15"},"nodeType":"YulExpressionStatement","src":"24256:43:15"},{"nodeType":"YulAssignment","src":"24308:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24320:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"24331:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24316:3:15"},"nodeType":"YulFunctionCall","src":"24316:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24308:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_af39b50065ba9648c753f781fa674704d13ce8309cf446a262799d7aceba8e5b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24154:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24168:4:15","type":""}],"src":"24003:337:15"},{"body":{"nodeType":"YulBlock","src":"24519:223:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24536:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"24547:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24529:6:15"},"nodeType":"YulFunctionCall","src":"24529:21:15"},"nodeType":"YulExpressionStatement","src":"24529:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24570:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"24581:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24566:3:15"},"nodeType":"YulFunctionCall","src":"24566:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"24586:2:15","type":"","value":"33"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24559:6:15"},"nodeType":"YulFunctionCall","src":"24559:30:15"},"nodeType":"YulExpressionStatement","src":"24559:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24609:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"24620:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24605:3:15"},"nodeType":"YulFunctionCall","src":"24605:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"24625:34:15","type":"","value":"ERC20: burn from the zero addres"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24598:6:15"},"nodeType":"YulFunctionCall","src":"24598:62:15"},"nodeType":"YulExpressionStatement","src":"24598:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24680:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"24691:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24676:3:15"},"nodeType":"YulFunctionCall","src":"24676:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"24696:3:15","type":"","value":"s"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24669:6:15"},"nodeType":"YulFunctionCall","src":"24669:31:15"},"nodeType":"YulExpressionStatement","src":"24669:31:15"},{"nodeType":"YulAssignment","src":"24709:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24721:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"24732:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24717:3:15"},"nodeType":"YulFunctionCall","src":"24717:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24709:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24496:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24510:4:15","type":""}],"src":"24345:397:15"},{"body":{"nodeType":"YulBlock","src":"24921:227:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24938:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"24949:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24931:6:15"},"nodeType":"YulFunctionCall","src":"24931:21:15"},"nodeType":"YulExpressionStatement","src":"24931:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24972:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"24983:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24968:3:15"},"nodeType":"YulFunctionCall","src":"24968:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"24988:2:15","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24961:6:15"},"nodeType":"YulFunctionCall","src":"24961:30:15"},"nodeType":"YulExpressionStatement","src":"24961:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25011:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"25022:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25007:3:15"},"nodeType":"YulFunctionCall","src":"25007:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"25027:34:15","type":"","value":"tokenHolder does not match msg.s"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25000:6:15"},"nodeType":"YulFunctionCall","src":"25000:62:15"},"nodeType":"YulExpressionStatement","src":"25000:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25082:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"25093:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25078:3:15"},"nodeType":"YulFunctionCall","src":"25078:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"25098:7:15","type":"","value":"ender"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25071:6:15"},"nodeType":"YulFunctionCall","src":"25071:35:15"},"nodeType":"YulExpressionStatement","src":"25071:35:15"},{"nodeType":"YulAssignment","src":"25115:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25127:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"25138:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25123:3:15"},"nodeType":"YulFunctionCall","src":"25123:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25115:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_b2e7f454dbc6babd6451ad1bf447f62df9ea96c532a05de66c902fb77f0f38a7__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24898:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"24912:4:15","type":""}],"src":"24747:401:15"},{"body":{"nodeType":"YulBlock","src":"25327:166:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25344:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"25355:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25337:6:15"},"nodeType":"YulFunctionCall","src":"25337:21:15"},"nodeType":"YulExpressionStatement","src":"25337:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25378:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"25389:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25374:3:15"},"nodeType":"YulFunctionCall","src":"25374:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"25394:2:15","type":"","value":"16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25367:6:15"},"nodeType":"YulFunctionCall","src":"25367:30:15"},"nodeType":"YulExpressionStatement","src":"25367:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25417:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"25428:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25413:3:15"},"nodeType":"YulFunctionCall","src":"25413:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"25433:18:15","type":"","value":"Clipper: Expired"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25406:6:15"},"nodeType":"YulFunctionCall","src":"25406:46:15"},"nodeType":"YulExpressionStatement","src":"25406:46:15"},{"nodeType":"YulAssignment","src":"25461:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25473:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"25484:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25469:3:15"},"nodeType":"YulFunctionCall","src":"25469:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25461:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_b4838544ed32dc7400dc567a81ef084e7663b12ee0a684d6bc21e07543aac47e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25304:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25318:4:15","type":""}],"src":"25153:340:15"},{"body":{"nodeType":"YulBlock","src":"25672:227:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25689:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"25700:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25682:6:15"},"nodeType":"YulFunctionCall","src":"25682:21:15"},"nodeType":"YulExpressionStatement","src":"25682:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25723:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"25734:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25719:3:15"},"nodeType":"YulFunctionCall","src":"25719:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"25739:2:15","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25712:6:15"},"nodeType":"YulFunctionCall","src":"25712:30:15"},"nodeType":"YulExpressionStatement","src":"25712:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25762:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"25773:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25758:3:15"},"nodeType":"YulFunctionCall","src":"25758:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"25778:34:15","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25751:6:15"},"nodeType":"YulFunctionCall","src":"25751:62:15"},"nodeType":"YulExpressionStatement","src":"25751:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25833:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"25844:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25829:3:15"},"nodeType":"YulFunctionCall","src":"25829:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"25849:7:15","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25822:6:15"},"nodeType":"YulFunctionCall","src":"25822:35:15"},"nodeType":"YulExpressionStatement","src":"25822:35:15"},{"nodeType":"YulAssignment","src":"25866:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"25878:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"25889:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"25874:3:15"},"nodeType":"YulFunctionCall","src":"25874:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"25866:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"25649:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"25663:4:15","type":""}],"src":"25498:401:15"},{"body":{"nodeType":"YulBlock","src":"26078:176:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26095:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"26106:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26088:6:15"},"nodeType":"YulFunctionCall","src":"26088:21:15"},"nodeType":"YulExpressionStatement","src":"26088:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26129:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"26140:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26125:3:15"},"nodeType":"YulFunctionCall","src":"26125:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"26145:2:15","type":"","value":"26"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26118:6:15"},"nodeType":"YulFunctionCall","src":"26118:30:15"},"nodeType":"YulExpressionStatement","src":"26118:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26168:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"26179:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26164:3:15"},"nodeType":"YulFunctionCall","src":"26164:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"26184:28:15","type":"","value":"Insufficient token deposit"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26157:6:15"},"nodeType":"YulFunctionCall","src":"26157:56:15"},"nodeType":"YulExpressionStatement","src":"26157:56:15"},{"nodeType":"YulAssignment","src":"26222:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26234:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"26245:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26230:3:15"},"nodeType":"YulFunctionCall","src":"26230:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26222:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_c3b8e321ec86b64dbc87238aa56bcc8637dcad3c3963acd9ea3a39154ec1fd47__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26055:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26069:4:15","type":""}],"src":"25904:350:15"},{"body":{"nodeType":"YulBlock","src":"26433:226:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26450:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"26461:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26443:6:15"},"nodeType":"YulFunctionCall","src":"26443:21:15"},"nodeType":"YulExpressionStatement","src":"26443:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26484:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"26495:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26480:3:15"},"nodeType":"YulFunctionCall","src":"26480:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"26500:2:15","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26473:6:15"},"nodeType":"YulFunctionCall","src":"26473:30:15"},"nodeType":"YulExpressionStatement","src":"26473:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26523:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"26534:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26519:3:15"},"nodeType":"YulFunctionCall","src":"26519:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"26539:34:15","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26512:6:15"},"nodeType":"YulFunctionCall","src":"26512:62:15"},"nodeType":"YulExpressionStatement","src":"26512:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26594:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"26605:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26590:3:15"},"nodeType":"YulFunctionCall","src":"26590:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"26610:6:15","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26583:6:15"},"nodeType":"YulFunctionCall","src":"26583:34:15"},"nodeType":"YulExpressionStatement","src":"26583:34:15"},{"nodeType":"YulAssignment","src":"26626:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26638:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"26649:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26634:3:15"},"nodeType":"YulFunctionCall","src":"26634:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26626:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26410:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26424:4:15","type":""}],"src":"26259:400:15"},{"body":{"nodeType":"YulBlock","src":"26838:179:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26855:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"26866:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26848:6:15"},"nodeType":"YulFunctionCall","src":"26848:21:15"},"nodeType":"YulExpressionStatement","src":"26848:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26889:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"26900:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26885:3:15"},"nodeType":"YulFunctionCall","src":"26885:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"26905:2:15","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26878:6:15"},"nodeType":"YulFunctionCall","src":"26878:30:15"},"nodeType":"YulExpressionStatement","src":"26878:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26928:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"26939:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26924:3:15"},"nodeType":"YulFunctionCall","src":"26924:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"26944:31:15","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"26917:6:15"},"nodeType":"YulFunctionCall","src":"26917:59:15"},"nodeType":"YulExpressionStatement","src":"26917:59:15"},{"nodeType":"YulAssignment","src":"26985:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"26997:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"27008:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"26993:3:15"},"nodeType":"YulFunctionCall","src":"26993:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"26985:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"26815:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"26829:4:15","type":""}],"src":"26664:353:15"},{"body":{"nodeType":"YulBlock","src":"27196:244:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27213:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"27224:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27206:6:15"},"nodeType":"YulFunctionCall","src":"27206:21:15"},"nodeType":"YulExpressionStatement","src":"27206:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27247:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"27258:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27243:3:15"},"nodeType":"YulFunctionCall","src":"27243:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"27263:2:15","type":"","value":"54"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27236:6:15"},"nodeType":"YulFunctionCall","src":"27236:30:15"},"nodeType":"YulExpressionStatement","src":"27236:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27286:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"27297:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27282:3:15"},"nodeType":"YulFunctionCall","src":"27282:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"27302:34:15","type":"","value":"ClipperDirect: Depositor already"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27275:6:15"},"nodeType":"YulFunctionCall","src":"27275:62:15"},"nodeType":"YulExpressionStatement","src":"27275:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27357:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"27368:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27353:3:15"},"nodeType":"YulFunctionCall","src":"27353:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"27373:24:15","type":"","value":" has an active deposit"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27346:6:15"},"nodeType":"YulFunctionCall","src":"27346:52:15"},"nodeType":"YulExpressionStatement","src":"27346:52:15"},{"nodeType":"YulAssignment","src":"27407:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27419:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"27430:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27415:3:15"},"nodeType":"YulFunctionCall","src":"27415:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27407:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_cd825181652e8fbad9ecb87c70046c17b8e7e9f7a6a8a4255462a3bda85689f1__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27173:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27187:4:15","type":""}],"src":"27022:418:15"},{"body":{"nodeType":"YulBlock","src":"27619:172:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27636:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"27647:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27629:6:15"},"nodeType":"YulFunctionCall","src":"27629:21:15"},"nodeType":"YulExpressionStatement","src":"27629:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27670:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"27681:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27666:3:15"},"nodeType":"YulFunctionCall","src":"27666:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"27686:2:15","type":"","value":"22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27659:6:15"},"nodeType":"YulFunctionCall","src":"27659:30:15"},"nodeType":"YulExpressionStatement","src":"27659:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27709:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"27720:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27705:3:15"},"nodeType":"YulFunctionCall","src":"27705:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"27725:24:15","type":"","value":"Clipper: Invalid token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27698:6:15"},"nodeType":"YulFunctionCall","src":"27698:52:15"},"nodeType":"YulExpressionStatement","src":"27698:52:15"},{"nodeType":"YulAssignment","src":"27759:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27771:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"27782:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"27767:3:15"},"nodeType":"YulFunctionCall","src":"27767:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"27759:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_d0a47af91f1b1a2f3f452d01e66dad30e81422fcdfdf1642690c315fda980a5b__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27596:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27610:4:15","type":""}],"src":"27445:346:15"},{"body":{"nodeType":"YulBlock","src":"27970:232:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"27987:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"27998:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"27980:6:15"},"nodeType":"YulFunctionCall","src":"27980:21:15"},"nodeType":"YulExpressionStatement","src":"27980:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28021:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"28032:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28017:3:15"},"nodeType":"YulFunctionCall","src":"28017:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"28037:2:15","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28010:6:15"},"nodeType":"YulFunctionCall","src":"28010:30:15"},"nodeType":"YulExpressionStatement","src":"28010:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28060:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"28071:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28056:3:15"},"nodeType":"YulFunctionCall","src":"28056:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"28076:34:15","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28049:6:15"},"nodeType":"YulFunctionCall","src":"28049:62:15"},"nodeType":"YulExpressionStatement","src":"28049:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28131:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"28142:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28127:3:15"},"nodeType":"YulFunctionCall","src":"28127:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"28147:12:15","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28120:6:15"},"nodeType":"YulFunctionCall","src":"28120:40:15"},"nodeType":"YulExpressionStatement","src":"28120:40:15"},{"nodeType":"YulAssignment","src":"28169:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28181:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"28192:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28177:3:15"},"nodeType":"YulFunctionCall","src":"28177:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28169:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"27947:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"27961:4:15","type":""}],"src":"27796:406:15"},{"body":{"nodeType":"YulBlock","src":"28381:181:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28398:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"28409:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28391:6:15"},"nodeType":"YulFunctionCall","src":"28391:21:15"},"nodeType":"YulExpressionStatement","src":"28391:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28432:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"28443:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28428:3:15"},"nodeType":"YulFunctionCall","src":"28428:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"28448:2:15","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28421:6:15"},"nodeType":"YulFunctionCall","src":"28421:30:15"},"nodeType":"YulExpressionStatement","src":"28421:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28471:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"28482:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28467:3:15"},"nodeType":"YulFunctionCall","src":"28467:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"28487:33:15","type":"","value":"ReentrancyGuard: reentrant call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28460:6:15"},"nodeType":"YulFunctionCall","src":"28460:61:15"},"nodeType":"YulExpressionStatement","src":"28460:61:15"},{"nodeType":"YulAssignment","src":"28530:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28542:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"28553:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28538:3:15"},"nodeType":"YulFunctionCall","src":"28538:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28530:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28358:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28372:4:15","type":""}],"src":"28207:355:15"},{"body":{"nodeType":"YulBlock","src":"28741:227:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28758:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"28769:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28751:6:15"},"nodeType":"YulFunctionCall","src":"28751:21:15"},"nodeType":"YulExpressionStatement","src":"28751:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28792:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"28803:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28788:3:15"},"nodeType":"YulFunctionCall","src":"28788:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"28808:2:15","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28781:6:15"},"nodeType":"YulFunctionCall","src":"28781:30:15"},"nodeType":"YulExpressionStatement","src":"28781:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28831:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"28842:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28827:3:15"},"nodeType":"YulFunctionCall","src":"28827:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"28847:34:15","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28820:6:15"},"nodeType":"YulFunctionCall","src":"28820:62:15"},"nodeType":"YulExpressionStatement","src":"28820:62:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28902:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"28913:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28898:3:15"},"nodeType":"YulFunctionCall","src":"28898:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"28918:7:15","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"28891:6:15"},"nodeType":"YulFunctionCall","src":"28891:35:15"},"nodeType":"YulExpressionStatement","src":"28891:35:15"},{"nodeType":"YulAssignment","src":"28935:27:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"28947:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"28958:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"28943:3:15"},"nodeType":"YulFunctionCall","src":"28943:19:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"28935:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"28718:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"28732:4:15","type":""}],"src":"28567:401:15"},{"body":{"nodeType":"YulBlock","src":"29147:181:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29164:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"29175:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29157:6:15"},"nodeType":"YulFunctionCall","src":"29157:21:15"},"nodeType":"YulExpressionStatement","src":"29157:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29198:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"29209:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29194:3:15"},"nodeType":"YulFunctionCall","src":"29194:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"29214:2:15","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29187:6:15"},"nodeType":"YulFunctionCall","src":"29187:30:15"},"nodeType":"YulExpressionStatement","src":"29187:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29237:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"29248:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29233:3:15"},"nodeType":"YulFunctionCall","src":"29233:18:15"},{"kind":"string","nodeType":"YulLiteral","src":"29253:33:15","type":"","value":"ERC20: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29226:6:15"},"nodeType":"YulFunctionCall","src":"29226:61:15"},"nodeType":"YulExpressionStatement","src":"29226:61:15"},{"nodeType":"YulAssignment","src":"29296:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29308:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"29319:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29304:3:15"},"nodeType":"YulFunctionCall","src":"29304:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29296:4:15"}]}]},"name":"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29124:9:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29138:4:15","type":""}],"src":"28973:355:15"},{"body":{"nodeType":"YulBlock","src":"29434:76:15","statements":[{"nodeType":"YulAssignment","src":"29444:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29456:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"29467:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29452:3:15"},"nodeType":"YulFunctionCall","src":"29452:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29444:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29486:9:15"},{"name":"value0","nodeType":"YulIdentifier","src":"29497:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29479:6:15"},"nodeType":"YulFunctionCall","src":"29479:25:15"},"nodeType":"YulExpressionStatement","src":"29479:25:15"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29403:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"29414:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29425:4:15","type":""}],"src":"29333:177:15"},{"body":{"nodeType":"YulBlock","src":"29644:119:15","statements":[{"nodeType":"YulAssignment","src":"29654:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29666:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"29677:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29662:3:15"},"nodeType":"YulFunctionCall","src":"29662:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"29654:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29696:9:15"},{"name":"value0","nodeType":"YulIdentifier","src":"29707:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29689:6:15"},"nodeType":"YulFunctionCall","src":"29689:25:15"},"nodeType":"YulExpressionStatement","src":"29689:25:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29734:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"29745:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"29730:3:15"},"nodeType":"YulFunctionCall","src":"29730:18:15"},{"name":"value1","nodeType":"YulIdentifier","src":"29750:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29723:6:15"},"nodeType":"YulFunctionCall","src":"29723:34:15"},"nodeType":"YulExpressionStatement","src":"29723:34:15"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29605:9:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"29616:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"29624:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29635:4:15","type":""}],"src":"29515:248:15"},{"body":{"nodeType":"YulBlock","src":"29953:351:15","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"29970:9:15"},{"name":"value0","nodeType":"YulIdentifier","src":"29981:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29963:6:15"},"nodeType":"YulFunctionCall","src":"29963:25:15"},"nodeType":"YulExpressionStatement","src":"29963:25:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30008:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"30019:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30004:3:15"},"nodeType":"YulFunctionCall","src":"30004:18:15"},{"name":"value1","nodeType":"YulIdentifier","src":"30024:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"29997:6:15"},"nodeType":"YulFunctionCall","src":"29997:34:15"},"nodeType":"YulExpressionStatement","src":"29997:34:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30051:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"30062:2:15","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30047:3:15"},"nodeType":"YulFunctionCall","src":"30047:18:15"},{"kind":"number","nodeType":"YulLiteral","src":"30067:2:15","type":"","value":"96"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30040:6:15"},"nodeType":"YulFunctionCall","src":"30040:30:15"},"nodeType":"YulExpressionStatement","src":"30040:30:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30090:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"30101:2:15","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30086:3:15"},"nodeType":"YulFunctionCall","src":"30086:18:15"},{"name":"value3","nodeType":"YulIdentifier","src":"30106:6:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30079:6:15"},"nodeType":"YulFunctionCall","src":"30079:34:15"},"nodeType":"YulExpressionStatement","src":"30079:34:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30139:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"30150:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30135:3:15"},"nodeType":"YulFunctionCall","src":"30135:19:15"},{"name":"value2","nodeType":"YulIdentifier","src":"30156:6:15"},{"name":"value3","nodeType":"YulIdentifier","src":"30164:6:15"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"30122:12:15"},"nodeType":"YulFunctionCall","src":"30122:49:15"},"nodeType":"YulExpressionStatement","src":"30122:49:15"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30195:9:15"},{"name":"value3","nodeType":"YulIdentifier","src":"30206:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30191:3:15"},"nodeType":"YulFunctionCall","src":"30191:22:15"},{"kind":"number","nodeType":"YulLiteral","src":"30215:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30187:3:15"},"nodeType":"YulFunctionCall","src":"30187:32:15"},{"name":"tail","nodeType":"YulIdentifier","src":"30221:4:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30180:6:15"},"nodeType":"YulFunctionCall","src":"30180:46:15"},"nodeType":"YulExpressionStatement","src":"30180:46:15"},{"nodeType":"YulAssignment","src":"30235:63:15","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30251:9:15"},{"arguments":[{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"30270:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"30278:2:15","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30266:3:15"},"nodeType":"YulFunctionCall","src":"30266:15:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30287:2:15","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"30283:3:15"},"nodeType":"YulFunctionCall","src":"30283:7:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"30262:3:15"},"nodeType":"YulFunctionCall","src":"30262:29:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30247:3:15"},"nodeType":"YulFunctionCall","src":"30247:45:15"},{"kind":"number","nodeType":"YulLiteral","src":"30294:3:15","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30243:3:15"},"nodeType":"YulFunctionCall","src":"30243:55:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30235:4:15"}]}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_bytes_calldata_ptr__to_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"29898:9:15","type":""},{"name":"value3","nodeType":"YulTypedName","src":"29909:6:15","type":""},{"name":"value2","nodeType":"YulTypedName","src":"29917:6:15","type":""},{"name":"value1","nodeType":"YulTypedName","src":"29925:6:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"29933:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"29944:4:15","type":""}],"src":"29768:536:15"},{"body":{"nodeType":"YulBlock","src":"30406:87:15","statements":[{"nodeType":"YulAssignment","src":"30416:26:15","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30428:9:15"},{"kind":"number","nodeType":"YulLiteral","src":"30439:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30424:3:15"},"nodeType":"YulFunctionCall","src":"30424:18:15"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"30416:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"30458:9:15"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"30473:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"30481:4:15","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"30469:3:15"},"nodeType":"YulFunctionCall","src":"30469:17:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30451:6:15"},"nodeType":"YulFunctionCall","src":"30451:36:15"},"nodeType":"YulExpressionStatement","src":"30451:36:15"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"30375:9:15","type":""},{"name":"value0","nodeType":"YulTypedName","src":"30386:6:15","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"30397:4:15","type":""}],"src":"30309:184:15"},{"body":{"nodeType":"YulBlock","src":"30546:80:15","statements":[{"body":{"nodeType":"YulBlock","src":"30573:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"30575:16:15"},"nodeType":"YulFunctionCall","src":"30575:18:15"},"nodeType":"YulExpressionStatement","src":"30575:18:15"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"30562:1:15"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"30569:1:15"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"30565:3:15"},"nodeType":"YulFunctionCall","src":"30565:6:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"30559:2:15"},"nodeType":"YulFunctionCall","src":"30559:13:15"},"nodeType":"YulIf","src":"30556:2:15"},{"nodeType":"YulAssignment","src":"30604:16:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"30615:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"30618:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"30611:3:15"},"nodeType":"YulFunctionCall","src":"30611:9:15"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"30604:3:15"}]}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"30529:1:15","type":""},{"name":"y","nodeType":"YulTypedName","src":"30532:1:15","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"30538:3:15","type":""}],"src":"30498:128:15"},{"body":{"nodeType":"YulBlock","src":"30677:171:15","statements":[{"body":{"nodeType":"YulBlock","src":"30708:111:15","statements":[{"expression":{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"30729:1:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30736:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"30741:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"30732:3:15"},"nodeType":"YulFunctionCall","src":"30732:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30722:6:15"},"nodeType":"YulFunctionCall","src":"30722:31:15"},"nodeType":"YulExpressionStatement","src":"30722:31:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30773:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"30776:4:15","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"30766:6:15"},"nodeType":"YulFunctionCall","src":"30766:15:15"},"nodeType":"YulExpressionStatement","src":"30766:15:15"},{"expression":{"arguments":[{"name":"r","nodeType":"YulIdentifier","src":"30801:1:15"},{"kind":"number","nodeType":"YulLiteral","src":"30804:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"30794:6:15"},"nodeType":"YulFunctionCall","src":"30794:15:15"},"nodeType":"YulExpressionStatement","src":"30794:15:15"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"30697:1:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"30690:6:15"},"nodeType":"YulFunctionCall","src":"30690:9:15"},"nodeType":"YulIf","src":"30687:2:15"},{"nodeType":"YulAssignment","src":"30828:14:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"30837:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"30840:1:15"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"30833:3:15"},"nodeType":"YulFunctionCall","src":"30833:9:15"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"30828:1:15"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"30662:1:15","type":""},{"name":"y","nodeType":"YulTypedName","src":"30665:1:15","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"30671:1:15","type":""}],"src":"30631:217:15"},{"body":{"nodeType":"YulBlock","src":"30905:116:15","statements":[{"body":{"nodeType":"YulBlock","src":"30964:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"30966:16:15"},"nodeType":"YulFunctionCall","src":"30966:18:15"},"nodeType":"YulExpressionStatement","src":"30966:18:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"30936:1:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"30929:6:15"},"nodeType":"YulFunctionCall","src":"30929:9:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"30922:6:15"},"nodeType":"YulFunctionCall","src":"30922:17:15"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"30944:1:15"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"30955:1:15","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"30951:3:15"},"nodeType":"YulFunctionCall","src":"30951:6:15"},{"name":"x","nodeType":"YulIdentifier","src":"30959:1:15"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"30947:3:15"},"nodeType":"YulFunctionCall","src":"30947:14:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"30941:2:15"},"nodeType":"YulFunctionCall","src":"30941:21:15"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"30918:3:15"},"nodeType":"YulFunctionCall","src":"30918:45:15"},"nodeType":"YulIf","src":"30915:2:15"},{"nodeType":"YulAssignment","src":"30995:20:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"31010:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"31013:1:15"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"31006:3:15"},"nodeType":"YulFunctionCall","src":"31006:9:15"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"30995:7:15"}]}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"30884:1:15","type":""},{"name":"y","nodeType":"YulTypedName","src":"30887:1:15","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"30893:7:15","type":""}],"src":"30853:168:15"},{"body":{"nodeType":"YulBlock","src":"31075:76:15","statements":[{"body":{"nodeType":"YulBlock","src":"31097:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"31099:16:15"},"nodeType":"YulFunctionCall","src":"31099:18:15"},"nodeType":"YulExpressionStatement","src":"31099:18:15"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"31091:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"31094:1:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"31088:2:15"},"nodeType":"YulFunctionCall","src":"31088:8:15"},"nodeType":"YulIf","src":"31085:2:15"},{"nodeType":"YulAssignment","src":"31128:17:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"31140:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"31143:1:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"31136:3:15"},"nodeType":"YulFunctionCall","src":"31136:9:15"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"31128:4:15"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"31057:1:15","type":""},{"name":"y","nodeType":"YulTypedName","src":"31060:1:15","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"31066:4:15","type":""}],"src":"31026:125:15"},{"body":{"nodeType":"YulBlock","src":"31209:205:15","statements":[{"nodeType":"YulVariableDeclaration","src":"31219:10:15","value":{"kind":"number","nodeType":"YulLiteral","src":"31228:1:15","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"31223:1:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"31288:63:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"31313:3:15"},{"name":"i","nodeType":"YulIdentifier","src":"31318:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31309:3:15"},"nodeType":"YulFunctionCall","src":"31309:11:15"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"31332:3:15"},{"name":"i","nodeType":"YulIdentifier","src":"31337:1:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31328:3:15"},"nodeType":"YulFunctionCall","src":"31328:11:15"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"31322:5:15"},"nodeType":"YulFunctionCall","src":"31322:18:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31302:6:15"},"nodeType":"YulFunctionCall","src":"31302:39:15"},"nodeType":"YulExpressionStatement","src":"31302:39:15"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"31249:1:15"},{"name":"length","nodeType":"YulIdentifier","src":"31252:6:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"31246:2:15"},"nodeType":"YulFunctionCall","src":"31246:13:15"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"31260:19:15","statements":[{"nodeType":"YulAssignment","src":"31262:15:15","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"31271:1:15"},{"kind":"number","nodeType":"YulLiteral","src":"31274:2:15","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31267:3:15"},"nodeType":"YulFunctionCall","src":"31267:10:15"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"31262:1:15"}]}]},"pre":{"nodeType":"YulBlock","src":"31242:3:15","statements":[]},"src":"31238:113:15"},{"body":{"nodeType":"YulBlock","src":"31377:31:15","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"31390:3:15"},{"name":"length","nodeType":"YulIdentifier","src":"31395:6:15"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31386:3:15"},"nodeType":"YulFunctionCall","src":"31386:16:15"},{"kind":"number","nodeType":"YulLiteral","src":"31404:1:15","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31379:6:15"},"nodeType":"YulFunctionCall","src":"31379:27:15"},"nodeType":"YulExpressionStatement","src":"31379:27:15"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"31366:1:15"},{"name":"length","nodeType":"YulIdentifier","src":"31369:6:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"31363:2:15"},"nodeType":"YulFunctionCall","src":"31363:13:15"},"nodeType":"YulIf","src":"31360:2:15"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"31187:3:15","type":""},{"name":"dst","nodeType":"YulTypedName","src":"31192:3:15","type":""},{"name":"length","nodeType":"YulTypedName","src":"31197:6:15","type":""}],"src":"31156:258:15"},{"body":{"nodeType":"YulBlock","src":"31474:325:15","statements":[{"nodeType":"YulAssignment","src":"31484:22:15","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31498:1:15","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"31501:4:15"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"31494:3:15"},"nodeType":"YulFunctionCall","src":"31494:12:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"31484:6:15"}]},{"nodeType":"YulVariableDeclaration","src":"31515:38:15","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"31545:4:15"},{"kind":"number","nodeType":"YulLiteral","src":"31551:1:15","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"31541:3:15"},"nodeType":"YulFunctionCall","src":"31541:12:15"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"31519:18:15","type":""}]},{"body":{"nodeType":"YulBlock","src":"31592:31:15","statements":[{"nodeType":"YulAssignment","src":"31594:27:15","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"31608:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"31616:4:15","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"31604:3:15"},"nodeType":"YulFunctionCall","src":"31604:17:15"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"31594:6:15"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"31572:18:15"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"31565:6:15"},"nodeType":"YulFunctionCall","src":"31565:26:15"},"nodeType":"YulIf","src":"31562:2:15"},{"body":{"nodeType":"YulBlock","src":"31682:111:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31703:1:15","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31710:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"31715:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"31706:3:15"},"nodeType":"YulFunctionCall","src":"31706:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31696:6:15"},"nodeType":"YulFunctionCall","src":"31696:31:15"},"nodeType":"YulExpressionStatement","src":"31696:31:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31747:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"31750:4:15","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31740:6:15"},"nodeType":"YulFunctionCall","src":"31740:15:15"},"nodeType":"YulExpressionStatement","src":"31740:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31775:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"31778:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"31768:6:15"},"nodeType":"YulFunctionCall","src":"31768:15:15"},"nodeType":"YulExpressionStatement","src":"31768:15:15"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"31638:18:15"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"31661:6:15"},{"kind":"number","nodeType":"YulLiteral","src":"31669:2:15","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"31658:2:15"},"nodeType":"YulFunctionCall","src":"31658:14:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"31635:2:15"},"nodeType":"YulFunctionCall","src":"31635:38:15"},"nodeType":"YulIf","src":"31632:2:15"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"31454:4:15","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"31463:6:15","type":""}],"src":"31419:380:15"},{"body":{"nodeType":"YulBlock","src":"31851:88:15","statements":[{"body":{"nodeType":"YulBlock","src":"31882:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"31884:16:15"},"nodeType":"YulFunctionCall","src":"31884:18:15"},"nodeType":"YulExpressionStatement","src":"31884:18:15"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31867:5:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31878:1:15","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"31874:3:15"},"nodeType":"YulFunctionCall","src":"31874:6:15"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"31864:2:15"},"nodeType":"YulFunctionCall","src":"31864:17:15"},"nodeType":"YulIf","src":"31861:2:15"},{"nodeType":"YulAssignment","src":"31913:20:15","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"31924:5:15"},{"kind":"number","nodeType":"YulLiteral","src":"31931:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"31920:3:15"},"nodeType":"YulFunctionCall","src":"31920:13:15"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"31913:3:15"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"31833:5:15","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"31843:3:15","type":""}],"src":"31804:135:15"},{"body":{"nodeType":"YulBlock","src":"31976:95:15","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"31993:1:15","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32000:3:15","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"32005:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"31996:3:15"},"nodeType":"YulFunctionCall","src":"31996:20:15"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"31986:6:15"},"nodeType":"YulFunctionCall","src":"31986:31:15"},"nodeType":"YulExpressionStatement","src":"31986:31:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32033:1:15","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"32036:4:15","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"32026:6:15"},"nodeType":"YulFunctionCall","src":"32026:15:15"},"nodeType":"YulExpressionStatement","src":"32026:15:15"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"32057:1:15","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"32060:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"32050:6:15"},"nodeType":"YulFunctionCall","src":"32050:15:15"},"nodeType":"YulExpressionStatement","src":"32050:15:15"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"31944:127:15"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_array_uint256_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(arrayPos, arrayPos) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(arrayPos, arrayPos) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(arrayPos, arrayPos) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(arrayPos, arrayPos) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_struct_Signature_calldata(offset, end) -> value\n    {\n        if slt(sub(end, offset), 96) { revert(value, value) }\n        value := offset\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value2, value2) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint256t_addresst_struct$_Signature_$4123_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8\n    {\n        if slt(sub(dataEnd, headStart), 320) { revert(value4, value4) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        value5 := abi_decode_address(add(headStart, 160))\n        value6 := abi_decode_struct_Signature_calldata(add(headStart, 192), dataEnd)\n        let offset := calldataload(add(headStart, 288))\n        if gt(offset, 0xffffffffffffffff) { revert(value7, value7) }\n        let value7_1, value8_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value7 := value7_1\n        value8 := value8_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint256t_uint256t_struct$_Signature_$4123_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 288) { revert(value4, value4) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n        value6 := abi_decode_struct_Signature_calldata(add(headStart, 192), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_array$_t_uint256_$dyn_calldata_ptrt_uint256t_uint256t_uint256t_struct$_Signature_$4123_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 256) { revert(value4, value4) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(value4, value4) }\n        let value1_1, value2_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n        value3 := calldataload(add(headStart, 64))\n        value4 := calldataload(add(headStart, 96))\n        value5 := calldataload(add(headStart, 128))\n        value6 := abi_decode_struct_Signature_calldata(add(headStart, 160), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_uint256t_addresst_uint256t_uint256t_struct$_Signature_$4123_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 256) { revert(value4, value4) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := abi_decode_address(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        value5 := abi_decode_struct_Signature_calldata(add(headStart, 160), dataEnd)\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint256t_uint256t_addresst_struct$_Signature_$4123_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 288) { revert(value6, value6) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := abi_decode_address(add(headStart, 128))\n        value5 := abi_decode_struct_Signature_calldata(add(headStart, 160), dataEnd)\n        let offset := calldataload(add(headStart, 256))\n        if gt(offset, 0xffffffffffffffff) { revert(value6, value6) }\n        let value6_1, value7_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value6 := value6_1\n        value7 := value7_1\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint256t_uint256t_uint256t_struct$_Signature_$4123_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 256) { revert(value2, value2) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        value5 := abi_decode_struct_Signature_calldata(add(headStart, 160), dataEnd)\n    }\n    function abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptrt_uint256t_uint256t_uint256t_struct$_Signature_$4123_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(value2, value2) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(value2, value2) }\n        let value0_1, value1_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        value2 := calldataload(add(headStart, 32))\n        value3 := calldataload(add(headStart, 64))\n        value4 := calldataload(add(headStart, 96))\n        value5 := abi_decode_struct_Signature_calldata(add(headStart, 128), dataEnd)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint8(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xff))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_encode_tuple_packed_t_array$_t_uint256_$dyn_calldata_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        if gt(value1, sub(shl(251, 1), 1)) { revert(end, end) }\n        let length := shl(5, value1)\n        calldatacopy(pos, value0, length)\n        let _1 := add(pos, length)\n        mstore(_1, end)\n        end := _1\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, shl(240, 6401))\n        mstore(add(pos, 2), value0)\n        mstore(add(pos, 34), value1)\n        end := add(pos, 66)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_3d319feca9505847d767ce348342f57eba6cb498cab9ba7b04781d05d0a55349__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    {\n        mstore(pos, \"OfferStruct(address input_token,\")\n        mstore(add(pos, 32), \"address output_token,uint256 inp\")\n        mstore(add(pos, 64), \"ut_amount,uint256 output_amount,\")\n        mstore(add(pos, 96), \"uint256 good_until,address desti\")\n        mstore(add(pos, 128), \"nation_address)\")\n        end := add(pos, 143)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_3d95a7a25279d7c707569f0dafa90e17b8a66217592b9c7256c24bb0889e50d5__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    {\n        mstore(pos, \"DepositStruct(address sender,uin\")\n        mstore(add(pos, 32), \"t256[] deposit_amounts,uint256 d\")\n        mstore(add(pos, 64), \"ays_locked,uint256 pool_tokens,u\")\n        mstore(add(pos, 96), \"int256 good_until)\")\n        end := add(pos, 114)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_854ab15a95f8efcfc79672735ef6fcd525fb264c79010da797a6381b3dc7dd0b__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    {\n        mstore(pos, \"SingleDepositStruct(address send\")\n        mstore(add(pos, 32), \"er,address token,uint256 amount,\")\n        mstore(add(pos, 64), \"uint256 days_locked,uint256 pool\")\n        mstore(add(pos, 96), \"_tokens,uint256 good_until)\")\n        end := add(pos, 123)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_packed_t_stringliteral_dc1c16bb50e2d77a5e5db83f15aa87d86ccbd45a25d5d48b51189b91d01a66ea__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    {\n        mstore(pos, \"WithdrawalStruct(address token_h\")\n        mstore(add(pos, 32), \"older,uint256 pool_token_amount_\")\n        mstore(add(pos, 64), \"to_burn,address asset_address,ui\")\n        mstore(add(pos, 96), \"nt256 asset_amount,uint256 good_\")\n        mstore(add(pos, 128), \"until)\")\n        end := add(pos, 134)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_address_$dyn_memory_ptr_t_uint256__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_address_$dyn_memory_ptr_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        let tail_1 := add(headStart, 96)\n        mstore(headStart, 96)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 128)\n        let _1 := 0x20\n        let srcPtr := add(value0, _1)\n        let i := tail\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        mstore(add(headStart, _1), sub(pos, headStart))\n        let pos_1 := pos\n        let length_1 := mload(value1)\n        mstore(pos, length_1)\n        pos_1 := add(pos, _1)\n        let srcPtr_1 := add(value1, _1)\n        let i_1 := tail\n        for { } lt(i_1, length_1) { i_1 := add(i_1, 1) }\n        {\n            mstore(pos_1, and(mload(srcPtr_1), sub(shl(160, 1), 1)))\n            pos_1 := add(pos_1, _1)\n            srcPtr_1 := add(srcPtr_1, _1)\n        }\n        tail := pos_1\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256_t_address__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256_t_address__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 224)\n        mstore(headStart, value0)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), and(value6, _1))\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 224)\n        mstore(headStart, value0)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), value6)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_bytes32_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_bytes32_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_uint256_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, _1))\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0a5ae24586c42853089a7adae7ba167ef36c90975655ae5080f5e82d93812c06__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"Listed sender does not match msg\")\n        mstore(add(headStart, 96), \".sender\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: burn amount exceeds balan\")\n        mstore(add(headStart, 96), \"ce\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_19ff38d14ee2c2908afcc6eb0c8a649dac6714ac12747a949ef1d3ae43ab7c31__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 76)\n        mstore(add(headStart, 64), \"ClipperDirect: Cannot create ves\")\n        mstore(add(headStart, 96), \"ting deposit without positive ve\")\n        mstore(add(headStart, 128), \"sting period\")\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_256e74c97ba3a0a86219f8fb02d60dd0721213192300fa9f90b7e3a3ba038027__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 23)\n        mstore(add(headStart, 64), \"Clipper: Invalid tokens\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4dc1c474fdcd167f46d49bd57ba7980d9cbb51b933d21fdea056c810554c3a4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Call with value failed\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_608a4c33c62dcf473a62cc3c30aeb4a9099b0f5ad15014a7c93bc32b3f3fbd15__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Clipper: Failed tx uniqueness\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_7752a0b69c0076da7afc70c2a8e6086ce10326f392001ea0eea0240ca51b8a6e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"ClipperDirect: Deposit cannot be\")\n        mstore(add(headStart, 96), \" unlocked\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8ddfa2ee14efeb6e6e95cd728978f72934a39c67dc5c070d37711dde99b562e6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"Message signed by incorrect addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_974d1b4421da69cc60b481194f0dad36a5bb4e23da810da7a7fb30cdba178330__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 40)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds a\")\n        mstore(add(headStart, 96), \"llowance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9d2acf551b2466898443b9bc3a403a4d86037386bc5a8960c1bbb0f204e69b79__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"SafeCast: value doesn't fit in 2\")\n        mstore(add(headStart, 96), \"24 bits\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_af39b50065ba9648c753f781fa674704d13ce8309cf446a262799d7aceba8e5b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"Invalid input\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC20: burn from the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b2e7f454dbc6babd6451ad1bf447f62df9ea96c532a05de66c902fb77f0f38a7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"tokenHolder does not match msg.s\")\n        mstore(add(headStart, 96), \"ender\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_b4838544ed32dc7400dc567a81ef084e7663b12ee0a684d6bc21e07543aac47e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Clipper: Expired\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c3b8e321ec86b64dbc87238aa56bcc8637dcad3c3963acd9ea3a39154ec1fd47__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"Insufficient token deposit\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_cd825181652e8fbad9ecb87c70046c17b8e7e9f7a6a8a4255462a3bda85689f1__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 54)\n        mstore(add(headStart, 64), \"ClipperDirect: Depositor already\")\n        mstore(add(headStart, 96), \" has an active deposit\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d0a47af91f1b1a2f3f452d01e66dad30e81422fcdfdf1642690c315fda980a5b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 22)\n        mstore(add(headStart, 64), \"Clipper: Invalid token\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_bytes_calldata_ptr__to_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), 96)\n        mstore(add(headStart, 96), value3)\n        calldatacopy(add(headStart, 128), value2, value3)\n        mstore(add(add(headStart, value3), 128), tail)\n        tail := add(add(headStart, and(add(value3, 31), not(31))), 128)\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(r, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(r, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n}","id":15,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"4140":[{"length":32,"start":1392},{"length":32,"start":8358}],"4142":[{"length":32,"start":1160},{"length":32,"start":2675},{"length":32,"start":2719},{"length":32,"start":2777},{"length":32,"start":2866},{"length":32,"start":4251},{"length":32,"start":4369},{"length":32,"start":4428},{"length":32,"start":4550},{"length":32,"start":4679},{"length":32,"start":5314},{"length":32,"start":5425},{"length":32,"start":5755},{"length":32,"start":6654},{"length":32,"start":6721},{"length":32,"start":6780},{"length":32,"start":6902}],"4144":[{"length":32,"start":8193},{"length":32,"start":9677}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x21E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x5250D730 GT PUSH2 0x123 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0xAB JUMPI DUP1 PUSH4 0xC72DA66A GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xC72DA66A EQ PUSH2 0x670 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x690 JUMPI DUP1 PUSH4 0xEB1C6453 EQ PUSH2 0x6D6 JUMPI DUP1 PUSH4 0xECC7633D EQ PUSH2 0x6F6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x723 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x5B2 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x5C7 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x5E7 JUMPI DUP1 PUSH4 0xC0D5EBFD EQ PUSH2 0x607 JUMPI DUP1 PUSH4 0xC325A549 EQ PUSH2 0x627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0xF2 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x518 JUMPI DUP1 PUSH4 0x87E08C25 EQ PUSH2 0x52D JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x540 JUMPI DUP1 PUSH4 0x8DDA8F3F EQ PUSH2 0x55E JUMPI DUP1 PUSH4 0x92A91A3A EQ PUSH2 0x592 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x5250D730 EQ PUSH2 0x463 JUMPI DUP1 PUSH4 0x5AECDDA5 EQ PUSH2 0x476 JUMPI DUP1 PUSH4 0x62FB4E01 EQ PUSH2 0x4C2 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x4E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x29D0C8FC GT PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x368DFC18 GT PUSH2 0x175 JUMPI DUP1 PUSH4 0x368DFC18 EQ PUSH2 0x3CE JUMPI DUP1 PUSH4 0x377A368C EQ PUSH2 0x3EE JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x403 JUMPI DUP1 PUSH4 0x3B26E4EB EQ PUSH2 0x423 JUMPI DUP1 PUSH4 0x4CB6864C EQ PUSH2 0x443 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x29D0C8FC EQ PUSH2 0x352 JUMPI DUP1 PUSH4 0x2B651A6C EQ PUSH2 0x372 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x392 JUMPI DUP1 PUSH4 0x34CB3D7F EQ PUSH2 0x3AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1B6A8759 GT PUSH2 0x1ED JUMPI DUP1 PUSH4 0x1B6A8759 EQ PUSH2 0x2C4 JUMPI DUP1 PUSH4 0x1DC6F5A5 EQ PUSH2 0x2D9 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2FD JUMPI DUP1 PUSH4 0x27A9B424 EQ PUSH2 0x31D JUMPI DUP1 PUSH4 0x298410E5 EQ PUSH2 0x332 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x255 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x285 JUMPI DUP1 PUSH4 0x19F37361 EQ PUSH2 0x2A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 0x225 JUMPI STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x236 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23F PUSH2 0x743 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24C SWAP2 SWAP1 PUSH2 0x3763 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x261 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x275 PUSH2 0x270 CALLDATASIZE PUSH1 0x4 PUSH2 0x3455 JUMP JUMPDEST PUSH2 0x7D5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x24C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x291 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x24C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x275 PUSH2 0x2BF CALLDATASIZE PUSH1 0x4 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x7EC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x296 PUSH2 0x7F9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EE PUSH2 0x80A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x24C SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x36D7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x309 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x275 PUSH2 0x318 CALLDATASIZE PUSH1 0x4 PUSH2 0x3296 JUMP JUMPDEST PUSH2 0x977 JUMP JUMPDEST PUSH2 0x330 PUSH2 0x32B CALLDATASIZE PUSH1 0x4 PUSH2 0x34DE JUMP JUMPDEST PUSH2 0xA28 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x33E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x330 PUSH2 0x34D CALLDATASIZE PUSH1 0x4 PUSH2 0x324A JUMP JUMPDEST PUSH2 0xB91 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x330 PUSH2 0x36D CALLDATASIZE PUSH1 0x4 PUSH2 0x35BE JUMP JUMPDEST PUSH2 0xBD3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x330 PUSH2 0x38D CALLDATASIZE PUSH1 0x4 PUSH2 0x32D1 JUMP JUMPDEST PUSH2 0xC5F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x39E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x24C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x296 PUSH2 0x3C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x324A JUMP JUMPDEST PUSH2 0xDAF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x330 PUSH2 0x3E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x3640 JUMP JUMPDEST PUSH2 0xDD3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x296 PUSH2 0xE4B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x275 PUSH2 0x41E CALLDATASIZE PUSH1 0x4 PUSH2 0x3455 JUMP JUMPDEST PUSH2 0xEE2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x330 PUSH2 0x43E CALLDATASIZE PUSH1 0x4 PUSH2 0x32D1 JUMP JUMPDEST PUSH2 0xF1E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x44F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x330 PUSH2 0x45E CALLDATASIZE PUSH1 0x4 PUSH2 0x34DE JUMP JUMPDEST PUSH2 0x104D JUMP JUMPDEST PUSH2 0x330 PUSH2 0x471 CALLDATASIZE PUSH1 0x4 PUSH2 0x33E2 JUMP JUMPDEST PUSH2 0x121B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x482 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AA PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x24C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x330 PUSH2 0x4DD CALLDATASIZE PUSH1 0x4 PUSH2 0x347E JUMP JUMPDEST PUSH2 0x1428 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x296 PUSH2 0x4FD CALLDATASIZE PUSH1 0x4 PUSH2 0x324A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x524 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x330 PUSH2 0x1619 JUMP JUMPDEST PUSH2 0x330 PUSH2 0x53B CALLDATASIZE PUSH1 0x4 PUSH2 0x3377 JUMP JUMPDEST PUSH2 0x164F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x54C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x4AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x56A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AA PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x59E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4AA PUSH2 0x5AD CALLDATASIZE PUSH1 0x4 PUSH2 0x3640 JUMP JUMPDEST PUSH2 0x17E8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x23F PUSH2 0x17F5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x275 PUSH2 0x5E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x3455 JUMP JUMPDEST PUSH2 0x1804 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x275 PUSH2 0x602 CALLDATASIZE PUSH1 0x4 PUSH2 0x3455 JUMP JUMPDEST PUSH2 0x189D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x613 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x330 PUSH2 0x622 CALLDATASIZE PUSH1 0x4 PUSH2 0x3571 JUMP JUMPDEST PUSH2 0x18AA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x633 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x65B PUSH2 0x642 CALLDATASIZE PUSH1 0x4 PUSH2 0x324A JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0x24C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x330 PUSH2 0x68B CALLDATASIZE PUSH1 0x4 PUSH2 0x34DE JUMP JUMPDEST PUSH2 0x199B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x69C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x296 PUSH2 0x6AB CALLDATASIZE PUSH1 0x4 PUSH2 0x3264 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x275 PUSH2 0x6F1 CALLDATASIZE PUSH1 0x4 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x1B4B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x702 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x296 PUSH2 0x711 CALLDATASIZE PUSH1 0x4 PUSH2 0x324A JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x72F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x330 PUSH2 0x73E CALLDATASIZE PUSH1 0x4 PUSH2 0x324A JUMP JUMPDEST PUSH2 0x1B7B JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x752 SWAP1 PUSH2 0x38FC JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x77E SWAP1 PUSH2 0x38FC JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7CB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7A0 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7CB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7AE JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E2 CALLER DUP5 DUP5 PUSH2 0x1C28 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E6 PUSH1 0x7 DUP4 PUSH2 0x1D4C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x805 PUSH1 0x7 PUSH2 0x1D6E JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP1 PUSH1 0x0 DUP1 PUSH2 0x818 PUSH2 0x7F9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x843 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x86C JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x898 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x8C1 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x95D JUMPI PUSH1 0x0 PUSH2 0x8DA DUP3 PUSH2 0x17E8 JUMP JUMPDEST SWAP1 POP PUSH2 0x8E5 DUP2 PUSH2 0xDAF JUMP JUMPDEST DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x905 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP DUP1 DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x932 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE POP DUP1 PUSH2 0x955 DUP2 PUSH2 0x3931 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x8C7 JUMP JUMPDEST POP DUP2 DUP2 PUSH2 0x969 PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP POP POP POP SWAP1 SWAP2 SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x984 DUP5 DUP5 DUP5 PUSH2 0x1D78 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0xA0E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x28 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732061 PUSH1 0x44 DUP3 ADD MSTORE PUSH8 0x6C6C6F77616E6365 PUSH1 0xC0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA1B DUP6 CALLER DUP6 DUP5 SUB PUSH2 0x1C28 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP5 DUP1 TIMESTAMP GT ISZERO PUSH2 0xA49 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x37CB JUMP JUMPDEST PUSH2 0xA52 DUP10 PUSH2 0x7EC JUMP JUMPDEST PUSH2 0xA6E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x37F5 JUMP JUMPDEST PUSH2 0xA98 PUSH32 0x0 DUP10 PUSH2 0x1F48 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAC8 PUSH32 0x0 DUP12 DUP12 DUP12 DUP12 DUP12 PUSH2 0x1FE9 JUMP JUMPDEST SWAP1 POP PUSH2 0xAD4 DUP2 DUP7 PUSH2 0x2032 JUMP JUMPDEST PUSH2 0xAFE PUSH32 0x0 DUP11 PUSH2 0x2131 JUMP JUMPDEST PUSH2 0xB08 DUP11 DUP10 PUSH2 0x2177 JUMP JUMPDEST PUSH2 0xB1C PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP8 DUP11 PUSH2 0x2196 JUMP JUMPDEST DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3963 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP13 DUP13 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0xB7D SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3825 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xBBB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x3796 JUMP JUMPDEST PUSH2 0xBC6 PUSH1 0x7 DUP3 PUSH2 0x1C13 JUMP JUMPDEST POP PUSH2 0xBD0 DUP2 PUSH2 0x21F9 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP6 JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0xC46 JUMPI PUSH1 0x0 DUP9 DUP9 DUP5 DUP2 DUP2 LT PUSH2 0xC01 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0xC33 JUMPI PUSH2 0xC33 CALLER ADDRESS DUP4 PUSH2 0xC22 DUP8 PUSH2 0x17E8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP3 SWAP2 SWAP1 PUSH2 0x220B JUMP JUMPDEST DUP3 PUSH2 0xC3D DUP2 PUSH2 0x3931 JUMP JUMPDEST SWAP4 POP POP POP PUSH2 0xBD7 JUMP JUMPDEST PUSH2 0xC55 CALLER DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x121B JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP5 DUP1 TIMESTAMP GT ISZERO PUSH2 0xC80 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x37CB JUMP JUMPDEST PUSH2 0xC89 DUP11 PUSH2 0x7EC JUMP JUMPDEST DUP1 ISZERO PUSH2 0xC99 JUMPI POP PUSH2 0xC99 DUP10 PUSH2 0x7EC JUMP JUMPDEST PUSH2 0xCDF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x436C69707065723A20496E76616C696420746F6B656E73 PUSH1 0x48 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCEF DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 PUSH2 0x1FE9 JUMP JUMPDEST SWAP1 POP PUSH2 0xCFB DUP2 DUP7 PUSH2 0x2032 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0xD07 DUP12 PUSH2 0x2243 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD14 DUP13 PUSH2 0xDAF JUMP JUMPDEST PUSH2 0xD1E SWAP1 DUP4 PUSH2 0x38B9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD2D DUP12 DUP4 DUP13 PUSH2 0x2313 JUMP JUMPDEST SWAP1 POP PUSH2 0xD39 DUP14 DUP5 PUSH2 0x239C JUMP JUMPDEST PUSH2 0xD43 DUP13 DUP3 PUSH2 0x2177 JUMP JUMPDEST PUSH2 0xD57 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 AND DUP10 DUP4 PUSH2 0x2196 JUMP JUMPDEST DUP8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP15 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3963 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP6 DUP6 DUP12 DUP12 PUSH1 0x40 MLOAD PUSH2 0xD98 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3825 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDDE PUSH1 0x2 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xDED DUP4 PUSH5 0x2540BE400 PUSH2 0x389A JUMP JUMPDEST PUSH2 0xDF7 SWAP2 SWAP1 PUSH2 0x387A JUMP JUMPDEST SWAP1 POP PUSH2 0xE03 CALLER DUP4 PUSH2 0x23D5 JUMP JUMPDEST PUSH2 0xE0C DUP2 PUSH2 0x2523 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP4 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE CALLER SWAP2 PUSH32 0x92CCF450A286A957AF52509BC1C9939D1A6A481783E142E41E2499F0BB66EBC6 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE56 CALLER PUSH2 0x1B4B JUMP JUMPDEST PUSH2 0xEB4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436C69707065724469726563743A204465706F7369742063616E6E6F74206265 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x81D5B9B1BD8DAD959 PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST POP CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP2 ADD DUP1 SLOAD SWAP2 DUP4 SWAP1 SSTORE SWAP2 SWAP1 SWAP2 SSTORE SWAP1 PUSH2 0xEDF SWAP1 ADDRESS SWAP1 DUP4 PUSH2 0x1D78 JUMP JUMPDEST SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 PUSH2 0x7E2 SWAP2 DUP6 SWAP1 PUSH2 0xF19 SWAP1 DUP7 SWAP1 PUSH2 0x3862 JUMP JUMPDEST PUSH2 0x1C28 JUMP JUMPDEST DUP5 DUP1 TIMESTAMP GT ISZERO PUSH2 0xF3F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x37CB JUMP JUMPDEST PUSH2 0xF48 DUP11 PUSH2 0x7EC JUMP JUMPDEST DUP1 ISZERO PUSH2 0xF58 JUMPI POP PUSH2 0xF58 DUP10 PUSH2 0x7EC JUMP JUMPDEST PUSH2 0xF9E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x17 PUSH1 0x24 DUP3 ADD MSTORE PUSH23 0x436C69707065723A20496E76616C696420746F6B656E73 PUSH1 0x48 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH2 0xFB3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND CALLER ADDRESS DUP12 PUSH2 0x220B JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFC3 DUP12 DUP12 DUP12 DUP12 DUP12 DUP12 PUSH2 0x1FE9 JUMP JUMPDEST SWAP1 POP PUSH2 0xFCF DUP2 DUP7 PUSH2 0x2032 JUMP JUMPDEST PUSH2 0xFD9 DUP12 DUP11 PUSH2 0x2131 JUMP JUMPDEST PUSH2 0xFE3 DUP11 DUP10 PUSH2 0x2177 JUMP JUMPDEST PUSH2 0xFF7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP12 AND DUP8 DUP11 PUSH2 0x2196 JUMP JUMPDEST DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3963 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP13 DUP13 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0x1038 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3825 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP5 DUP1 TIMESTAMP GT ISZERO PUSH2 0x106E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x37CB JUMP JUMPDEST PUSH2 0x1077 DUP10 PUSH2 0x7EC JUMP JUMPDEST PUSH2 0x1093 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x37F5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10C3 DUP11 PUSH32 0x0 DUP12 DUP12 DUP12 DUP12 PUSH2 0x1FE9 JUMP JUMPDEST SWAP1 POP PUSH2 0x10CF DUP2 DUP7 PUSH2 0x2032 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10DA DUP12 PUSH2 0x2243 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x10E7 DUP13 PUSH2 0xDAF JUMP JUMPDEST PUSH2 0x10F1 SWAP1 DUP4 PUSH2 0x38B9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1100 DUP13 DUP4 DUP14 PUSH2 0x2313 JUMP JUMPDEST SWAP1 POP PUSH2 0x110C DUP14 DUP5 PUSH2 0x239C JUMP JUMPDEST PUSH2 0x1136 PUSH32 0x0 DUP3 PUSH2 0x2177 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1198 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x11AC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x11BA DUP10 DUP3 PUSH2 0x1F48 JUMP JUMPDEST DUP9 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP15 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3963 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP6 DUP6 DUP13 DUP13 PUSH1 0x40 MLOAD PUSH2 0xD98 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3825 JUMP JUMPDEST DUP2 DUP1 TIMESTAMP GT ISZERO PUSH2 0x123C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x37CB JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x126C JUMPI PUSH2 0x126C PUSH32 0x0 CALLVALUE PUSH2 0x1F48 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND EQ PUSH2 0x12D4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4C69737465642073656E64657220646F6573206E6F74206D61746368206D7367 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x1739B2B73232B9 PUSH1 0xC9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12E4 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x258B JUMP JUMPDEST SWAP1 POP PUSH2 0x12F0 DUP2 DUP5 PUSH2 0x2032 JUMP JUMPDEST PUSH1 0x0 DUP8 JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x13CC JUMPI PUSH1 0x0 DUP11 DUP11 DUP5 DUP2 DUP2 LT PUSH2 0x131E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP PUSH1 0x0 DUP2 GT ISZERO PUSH2 0x13B9 JUMPI PUSH1 0x0 PUSH2 0x133B DUP5 PUSH2 0x17E8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1348 DUP3 PUSH2 0x2243 JUMP JUMPDEST SWAP1 POP DUP3 PUSH2 0x1354 DUP4 PUSH2 0xDAF JUMP JUMPDEST PUSH2 0x135E SWAP1 DUP4 PUSH2 0x38B9 JUMP JUMPDEST LT ISZERO PUSH2 0x13AC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420746F6B656E206465706F736974000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH2 0x13B6 DUP3 DUP3 PUSH2 0x239C JUMP JUMPDEST POP POP JUMPDEST DUP3 PUSH2 0x13C3 DUP2 PUSH2 0x3931 JUMP JUMPDEST SWAP4 POP POP POP PUSH2 0x12F4 JUMP JUMPDEST PUSH2 0x13D7 DUP12 DUP10 DUP10 PUSH2 0x259C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP11 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 AND SWAP2 PUSH32 0x73A19DD210F1A7F902193214C0EE91DD35EE5B4D920CBA8D519ECA65A7B488CA SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP1 TIMESTAMP GT ISZERO PUSH2 0x1449 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x37CB JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND EQ PUSH2 0x14AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x746F6B656E486F6C64657220646F6573206E6F74206D61746368206D73672E73 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x32B73232B9 PUSH1 0xD9 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH2 0x14E6 JUMPI POP PUSH32 0x0 SWAP5 POP PUSH1 0x1 JUMPDEST PUSH1 0x0 PUSH2 0x14F5 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x25B6 JUMP JUMPDEST SWAP1 POP PUSH2 0x1501 DUP2 DUP6 PUSH2 0x2032 JUMP JUMPDEST PUSH2 0x150B CALLER DUP10 PUSH2 0x23D5 JUMP JUMPDEST PUSH2 0x1515 DUP8 DUP8 PUSH2 0x2177 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x15A4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x157D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1591 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x159F CALLER DUP8 PUSH2 0x1F48 JUMP JUMPDEST PUSH2 0x15B8 JUMP JUMPDEST PUSH2 0x15B8 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND CALLER DUP9 PUSH2 0x2196 JUMP JUMPDEST DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x41E79959BAD1D45680578F8A544FB5AF76D72B04090E65A51B4D0EAAB959A9AB DUP11 DUP10 PUSH1 0x40 MLOAD PUSH2 0x1606 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1643 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x3796 JUMP JUMPDEST PUSH2 0x164D PUSH1 0x0 PUSH2 0x25FD JUMP JUMPDEST JUMP JUMPDEST DUP2 DUP1 TIMESTAMP GT ISZERO PUSH2 0x1670 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x37CB JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x16A0 JUMPI PUSH2 0x16A0 PUSH32 0x0 CALLVALUE PUSH2 0x1F48 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND EQ DUP1 ISZERO PUSH2 0x16BC JUMPI POP PUSH2 0x16BC DUP8 PUSH2 0x7EC JUMP JUMPDEST PUSH2 0x16F8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x125B9D985B1A59081A5B9C1D5D PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1708 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x264F JUMP JUMPDEST SWAP1 POP PUSH2 0x1714 DUP2 DUP5 PUSH2 0x2032 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x171F DUP10 PUSH2 0x2243 JUMP JUMPDEST SWAP1 POP DUP8 PUSH2 0x172B DUP11 PUSH2 0xDAF JUMP JUMPDEST PUSH2 0x1735 SWAP1 DUP4 PUSH2 0x38B9 JUMP JUMPDEST LT ISZERO PUSH2 0x1783 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420746F6B656E206465706F736974000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH2 0x178D DUP10 DUP3 PUSH2 0x239C JUMP JUMPDEST PUSH2 0x1798 DUP11 DUP9 DUP9 PUSH2 0x259C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP13 AND SWAP2 PUSH32 0x73A19DD210F1A7F902193214C0EE91DD35EE5B4D920CBA8D519ECA65A7B488CA SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E6 PUSH1 0x7 DUP4 PUSH2 0x2660 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x752 SWAP1 PUSH2 0x38FC JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x1886 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH2 0x1893 CALLER DUP6 DUP6 DUP5 SUB PUSH2 0x1C28 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E2 CALLER DUP5 DUP5 PUSH2 0x1D78 JUMP JUMPDEST DUP2 DUP1 TIMESTAMP GT ISZERO PUSH2 0x18CB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x37CB JUMP JUMPDEST PUSH2 0x18D4 DUP8 PUSH2 0x7EC JUMP JUMPDEST PUSH2 0x1910 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x125B9D985B1A59081A5B9C1D5D PUSH1 0x9A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH2 0x1925 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND CALLER ADDRESS DUP10 PUSH2 0x220B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1935 CALLER DUP10 DUP10 DUP10 DUP10 DUP10 PUSH2 0x264F JUMP JUMPDEST SWAP1 POP PUSH2 0x1941 DUP2 DUP5 PUSH2 0x2032 JUMP JUMPDEST PUSH2 0x194B DUP9 DUP9 PUSH2 0x2131 JUMP JUMPDEST PUSH2 0x1956 CALLER DUP8 DUP8 PUSH2 0x259C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE CALLER SWAP2 PUSH32 0x73A19DD210F1A7F902193214C0EE91DD35EE5B4D920CBA8D519ECA65A7B488CA SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP5 DUP1 TIMESTAMP GT ISZERO PUSH2 0x19BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x37CB JUMP JUMPDEST PUSH2 0x19C5 DUP10 PUSH2 0x7EC JUMP JUMPDEST PUSH2 0x19E1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x37F5 JUMP JUMPDEST PUSH2 0x19F6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND CALLER ADDRESS DUP12 PUSH2 0x220B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A26 DUP11 PUSH32 0x0 DUP12 DUP12 DUP12 DUP12 PUSH2 0x1FE9 JUMP JUMPDEST SWAP1 POP PUSH2 0x1A32 DUP2 DUP7 PUSH2 0x2032 JUMP JUMPDEST PUSH2 0x1A3C DUP11 DUP11 PUSH2 0x2131 JUMP JUMPDEST PUSH2 0x1A66 PUSH32 0x0 DUP10 PUSH2 0x2177 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x2E1A7D4D SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1AC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1ADC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x1AEA DUP7 DUP10 PUSH2 0x1F48 JUMP JUMPDEST DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP12 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x3963 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP13 DUP13 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0xB7D SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3825 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x1 DUP2 ADD SLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 0xA21 JUMPI POP SLOAD TIMESTAMP LT ISZERO SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xA SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1BA5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP1 PUSH2 0x3796 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1C0A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH2 0xBD0 DUP2 PUSH2 0x25FD JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA21 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x266C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1C8A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1CEB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD ISZERO ISZERO PUSH2 0xA21 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7E6 DUP3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1DDC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x1E3E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x1EB6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x1EED SWAP1 DUP5 SWAP1 PUSH2 0x3862 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x1F39 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1F95 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1F9A JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x1FE4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x10D85B1B081DDA5D1A081D985B1D594819985A5B1959 PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA05 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1FFA DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH2 0x26BB JUMP JUMPDEST SWAP1 POP PUSH2 0x2026 PUSH32 0x0 DUP3 PUSH2 0x27F3 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP4 PUSH2 0x2044 PUSH1 0x20 DUP6 ADD DUP6 PUSH2 0x3670 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 ADD DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP5 MSTORE PUSH1 0xFF SWAP1 SWAP3 AND DUP3 DUP3 ADD MSTORE SWAP2 DUP6 ADD CALLDATALOAD PUSH1 0x60 DUP3 ADD MSTORE SWAP1 DUP5 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2098 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1FE4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D657373616765207369676E656420627920696E636F72726563742061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x213D DUP5 PUSH2 0x2833 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x2155 DUP3 PUSH2 0x2150 DUP6 DUP5 PUSH2 0x3862 JUMP JUMPDEST PUSH2 0x28CB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2183 DUP5 PUSH2 0x2833 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x2155 DUP3 PUSH2 0x2150 DUP6 DUP5 PUSH2 0x38B9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x1FE4 SWAP1 DUP5 SWAP1 PUSH4 0xA9059CBB PUSH1 0xE0 SHL SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x28F7 JUMP JUMPDEST PUSH2 0xBD0 DUP2 PUSH2 0x2206 DUP4 PUSH2 0x2243 JUMP JUMPDEST PUSH2 0x239C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x1F42 SWAP1 DUP6 SWAP1 PUSH4 0x23B872DD PUSH1 0xE0 SHL SWAP1 PUSH1 0x84 ADD PUSH2 0x21C2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD ADDRESS PUSH1 0x24 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x44 SWAP1 SWAP2 ADD DUP3 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x70A08231 PUSH1 0xE0 SHL OR SWAP1 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP2 PUSH2 0x229A SWAP2 SWAP1 PUSH2 0x36BB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS STATICCALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x22D5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x22DA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 DUP1 ISZERO PUSH2 0x22EE JUMPI POP PUSH1 0x20 DUP2 MLOAD LT ISZERO JUMPDEST PUSH2 0x22F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x230B SWAP2 SWAP1 PUSH2 0x3658 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 EQ ISZERO PUSH2 0x2324 JUMPI POP DUP1 PUSH2 0xA21 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH2 0x2336 DUP6 PUSH5 0x2540BE400 PUSH2 0x389A JUMP JUMPDEST PUSH2 0x2340 SWAP2 SWAP1 PUSH2 0x387A JUMP JUMPDEST SWAP1 POP PUSH2 0x2355 PUSH5 0x2540BE400 PUSH4 0x2FAF080 PUSH2 0x3862 JUMP JUMPDEST DUP2 LT PUSH2 0x238C JUMPI PUSH5 0x2540BE400 DUP4 PUSH2 0x2370 DUP3 PUSH4 0x2FAF080 PUSH2 0x3862 JUMP JUMPDEST PUSH2 0x237A SWAP2 SWAP1 PUSH2 0x389A JUMP JUMPDEST PUSH2 0x2384 SWAP2 SWAP1 PUSH2 0x387A JUMP JUMPDEST SWAP2 POP POP PUSH2 0xA21 JUMP JUMPDEST PUSH5 0x2540BE400 PUSH2 0x237A DUP5 DUP4 PUSH2 0x389A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23A7 DUP4 PUSH2 0x2833 JUMP JUMPDEST POP SWAP1 POP PUSH2 0x23B4 DUP2 DUP4 PUSH2 0x28CB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2435 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x24A9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP4 DUP4 SUB SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x24D8 SWAP1 DUP5 SWAP1 PUSH2 0x38B9 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2530 PUSH2 0x7F9 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x1F42 JUMPI PUSH1 0x0 PUSH2 0x2546 DUP4 PUSH2 0x17E8 JUMP JUMPDEST SWAP1 POP PUSH5 0x2540BE400 PUSH2 0x2557 DUP3 PUSH2 0xDAF JUMP JUMPDEST PUSH2 0x2561 SWAP1 DUP8 PUSH2 0x389A JUMP JUMPDEST PUSH2 0x256B SWAP2 SWAP1 PUSH2 0x387A JUMP JUMPDEST SWAP4 POP PUSH2 0x2578 DUP2 CALLER DUP7 PUSH2 0x29C9 JUMP JUMPDEST DUP3 PUSH2 0x2582 DUP2 PUSH2 0x3931 JUMP JUMPDEST SWAP4 POP POP POP PUSH2 0x2533 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1FFA DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH2 0x2A48 JUMP JUMPDEST DUP2 PUSH2 0x25AB JUMPI PUSH2 0x1FE4 DUP4 DUP3 PUSH2 0x2B7C JUMP JUMPDEST PUSH2 0x1FE4 DUP4 DUP4 DUP4 PUSH2 0x2C5B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x25C6 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 0x2DCF JUMP JUMPDEST SWAP1 POP PUSH2 0x25F2 PUSH32 0x0 DUP3 PUSH2 0x27F3 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1FFA DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH2 0x2EEC JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA21 DUP4 DUP4 PUSH2 0x2FED JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x26B3 JUMPI POP DUP2 SLOAD PUSH1 0x1 DUP2 DUP2 ADD DUP5 SSTORE PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 ADD DUP5 SWAP1 SSTORE DUP5 SLOAD DUP5 DUP3 MSTORE DUP3 DUP7 ADD SWAP1 SWAP4 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x7E6 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x7E6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x277A SWAP1 PUSH32 0x4F66666572537472756374286164647265737320696E7075745F746F6B656E2C DUP2 MSTORE PUSH32 0x61646472657373206F75747075745F746F6B656E2C75696E7432353620696E70 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x75745F616D6F756E742C75696E74323536206F75747075745F616D6F756E742C PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x75696E7432353620676F6F645F756E74696C2C61646472657373206465737469 PUSH1 0x60 DUP3 ADD MSTORE PUSH15 0x6E6174696F6E5F6164647265737329 PUSH1 0x88 SHL PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x8F ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 SWAP1 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 DUP9 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD DUP8 SWAP1 MSTORE PUSH1 0xA0 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 0xC0 DUP3 ADD DUP6 SWAP1 MSTORE DUP4 AND PUSH1 0xE0 DUP3 ADD MSTORE PUSH2 0x100 ADD JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x22 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x42 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x62 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP2 AND SWAP1 PUSH1 0xE0 DUP2 SWAP1 SHR PUSH2 0x2866 ORIGIN NUMBER PUSH2 0x3862 JUMP JUMPDEST SWAP4 POP DUP1 PUSH4 0xFFFFFFFF AND DUP5 PUSH4 0xFFFFFFFF AND EQ ISZERO PUSH2 0x28C4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436C69707065723A204661696C656420747820756E697175656E657373000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA05 JUMP JUMPDEST POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28D6 DUP3 PUSH2 0x3025 JUMP JUMPDEST PUSH2 0xA21 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND PUSH2 0x3862 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x294C DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3092 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x1FE4 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x296A SWAP2 SWAP1 PUSH2 0x3620 JUMP JUMPDEST PUSH2 0x1FE4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x5 SLOAD EQ ISZERO PUSH2 0x2A1C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x5 SSTORE PUSH2 0x2A35 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP4 DUP4 PUSH2 0x2196 JUMP JUMPDEST PUSH2 0x2A3E DUP4 PUSH2 0x21F9 JUMP JUMPDEST POP POP PUSH1 0x1 PUSH1 0x5 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2A5E SWAP3 SWAP2 SWAP1 PUSH2 0x3691 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2B10 SWAP1 PUSH32 0x4465706F73697453747275637428616464726573732073656E6465722C75696E DUP2 MSTORE PUSH32 0x743235365B5D206465706F7369745F616D6F756E74732C75696E743235362064 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x6179735F6C6F636B65642C75696E7432353620706F6F6C5F746F6B656E732C75 PUSH1 0x40 DUP3 ADD MSTORE PUSH18 0x696E7432353620676F6F645F756E74696C29 PUSH1 0x70 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x72 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 SWAP1 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP11 AND SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP2 POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2BD2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA05 JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x2BE4 SWAP2 SWAP1 PUSH2 0x3862 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x2C11 SWAP1 DUP5 SWAP1 PUSH2 0x3862 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x2CE6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x4C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436C69707065724469726563743A2043616E6E6F742063726561746520766573 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x74696E67206465706F73697420776974686F757420706F736974697665207665 PUSH1 0x64 DUP3 ADD MSTORE PUSH12 0x1CDD1A5B99C81C195C9A5BD9 PUSH1 0xA2 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD ISZERO PUSH2 0x2D6E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x436C69707065724469726563743A204465706F7369746F7220616C7265616479 PUSH1 0x44 DUP3 ADD MSTORE PUSH22 0x81A185CC8185B881858DD1A5D994819195C1BDCDA5D PUSH1 0x52 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 DUP5 PUSH3 0x15180 PUSH2 0x2D8A SWAP2 SWAP1 PUSH2 0x389A JUMP JUMPDEST PUSH2 0x2D94 SWAP1 TIMESTAMP PUSH2 0x3862 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 DUP3 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP3 MLOAD DUP2 SSTORE SWAP1 DUP3 ADD MLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SSTORE SWAP1 POP PUSH2 0x1F42 ADDRESS DUP4 PUSH2 0x2B7C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2E85 SWAP1 PUSH32 0x5769746864726177616C537472756374286164647265737320746F6B656E5F68 DUP2 MSTORE PUSH32 0x6F6C6465722C75696E7432353620706F6F6C5F746F6B656E5F616D6F756E745F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x746F5F6275726E2C616464726573732061737365745F616464726573732C7569 PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x6E743235362061737365745F616D6F756E742C75696E7432353620676F6F645F PUSH1 0x60 DUP3 ADD MSTORE PUSH6 0x756E74696C29 PUSH1 0xD0 SHL PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x86 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH1 0x1F NOT ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 DUP2 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP9 DUP10 AND DUP4 DUP4 ADD MSTORE PUSH1 0x60 DUP4 ADD SWAP8 SWAP1 SWAP8 MSTORE SWAP5 SWAP1 SWAP7 AND PUSH1 0x80 DUP8 ADD MSTORE POP PUSH1 0xA0 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xC0 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP2 MLOAD DUP1 DUP6 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xE0 SWAP1 SWAP4 ADD SWAP1 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2F93 SWAP1 PUSH32 0x53696E676C654465706F73697453747275637428616464726573732073656E64 DUP2 MSTORE PUSH32 0x65722C6164647265737320746F6B656E2C75696E7432353620616D6F756E742C PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x75696E7432353620646179735F6C6F636B65642C75696E7432353620706F6F6C PUSH1 0x40 DUP3 ADD MSTORE PUSH32 0x5F746F6B656E732C75696E7432353620676F6F645F756E74696C290000000000 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x7B ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 SWAP1 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP11 AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP8 AND PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xA0 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0xC0 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xE0 DUP2 ADD DUP4 SWAP1 MSTORE PUSH2 0x100 ADD PUSH2 0x27D1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 ADD DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x3012 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB DUP3 GT ISZERO PUSH2 0x308E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53616665436173743A2076616C756520646F65736E27742066697420696E2032 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x32342062697473 PUSH1 0xC8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xA05 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x230B DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 DUP5 EXTCODESIZE PUSH2 0x30EB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xA05 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x3107 SWAP2 SWAP1 PUSH2 0x36BB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3144 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3149 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x25F2 DUP3 DUP3 DUP7 PUSH1 0x60 DUP4 ISZERO PUSH2 0x3163 JUMPI POP DUP2 PUSH2 0xA21 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x3173 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA05 SWAP2 SWAP1 PUSH2 0x3763 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x31A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x31BA JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x31D1 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x31EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3204 JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x321B JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x31EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3244 JUMPI DUP1 DUP2 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x325B JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0xA21 DUP3 PUSH2 0x318D JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3276 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x327F DUP4 PUSH2 0x318D JUMP JUMPDEST SWAP2 POP PUSH2 0x328D PUSH1 0x20 DUP5 ADD PUSH2 0x318D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x32AA JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x32B3 DUP5 PUSH2 0x318D JUMP JUMPDEST SWAP3 POP PUSH2 0x32C1 PUSH1 0x20 DUP6 ADD PUSH2 0x318D JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x140 DUP11 DUP13 SUB SLT ISZERO PUSH2 0x32EF JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x32F8 DUP11 PUSH2 0x318D JUMP JUMPDEST SWAP9 POP PUSH2 0x3306 PUSH1 0x20 DUP12 ADD PUSH2 0x318D JUMP JUMPDEST SWAP8 POP PUSH1 0x40 DUP11 ADD CALLDATALOAD SWAP7 POP PUSH1 0x60 DUP11 ADD CALLDATALOAD SWAP6 POP PUSH1 0x80 DUP11 ADD CALLDATALOAD SWAP5 POP PUSH2 0x3329 PUSH1 0xA0 DUP12 ADD PUSH2 0x318D JUMP JUMPDEST SWAP4 POP PUSH2 0x3338 DUP12 PUSH1 0xC0 DUP13 ADD PUSH2 0x3233 JUMP JUMPDEST SWAP3 POP PUSH2 0x120 DUP11 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3354 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3360 DUP13 DUP3 DUP14 ADD PUSH2 0x31F3 JUMP JUMPDEST SWAP2 POP DUP1 SWAP4 POP POP DUP1 SWAP2 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x120 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x3392 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x339B DUP9 PUSH2 0x318D JUMP JUMPDEST SWAP7 POP PUSH2 0x33A9 PUSH1 0x20 DUP10 ADD PUSH2 0x318D JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP2 POP PUSH2 0x33D4 DUP10 PUSH1 0xC0 DUP11 ADD PUSH2 0x3233 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x100 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x33FD JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3406 DUP9 PUSH2 0x318D JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3421 JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x342D DUP11 DUP3 DUP12 ADD PUSH2 0x31A9 JUMP JUMPDEST SWAP1 SWAP8 POP SWAP6 POP POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD SWAP2 POP PUSH2 0x33D4 DUP10 PUSH1 0xA0 DUP11 ADD PUSH2 0x3233 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3467 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3470 DUP4 PUSH2 0x318D JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3497 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x34A0 DUP8 PUSH2 0x318D JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH2 0x34B5 PUSH1 0x40 DUP9 ADD PUSH2 0x318D JUMP JUMPDEST SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0x34D2 DUP9 PUSH1 0xA0 DUP10 ADD PUSH2 0x3233 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x120 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x34FA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3503 DUP10 PUSH2 0x318D JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP6 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH2 0x3526 PUSH1 0x80 DUP11 ADD PUSH2 0x318D JUMP JUMPDEST SWAP4 POP PUSH2 0x3535 DUP11 PUSH1 0xA0 DUP12 ADD PUSH2 0x3233 JUMP JUMPDEST SWAP3 POP PUSH2 0x100 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3551 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x355D DUP12 DUP3 DUP13 ADD PUSH2 0x31F3 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x358A JUMPI DUP4 DUP5 REVERT JUMPDEST PUSH2 0x3593 DUP8 PUSH2 0x318D JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0x34D2 DUP9 PUSH1 0xA0 DUP10 ADD PUSH2 0x3233 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xE0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x35D6 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x35EC JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH2 0x35F8 DUP10 DUP3 DUP11 ADD PUSH2 0x31A9 JUMP JUMPDEST SWAP1 SWAP8 POP SWAP6 POP POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH2 0x34D2 DUP9 PUSH1 0x80 DUP10 ADD PUSH2 0x3233 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3631 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xA21 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3651 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3669 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3681 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xA21 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xFB SHL SUB DUP4 GT ISZERO PUSH2 0x36A6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP6 DUP5 CALLDATACOPY SWAP2 SWAP1 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x36CD DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x38D0 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP1 DUP3 MSTORE DUP5 MLOAD SWAP1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x20 SWAP1 PUSH1 0x80 DUP5 ADD SWAP1 DUP3 DUP9 ADD DUP5 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x3710 JUMPI DUP2 MLOAD DUP5 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP1 DUP5 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x36F4 JUMP JUMPDEST POP POP POP DUP4 DUP2 SUB DUP3 DUP6 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE DUP7 DUP4 ADD SWAP2 DUP4 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x374D JUMPI DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x3728 JUMP JUMPDEST POP POP DUP1 SWAP4 POP POP POP POP DUP3 PUSH1 0x40 DUP4 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x3782 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x38D0 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x10DB1A5C1C195C8E88115E1C1A5C9959 PUSH1 0x82 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x16 SWAP1 DUP3 ADD MSTORE PUSH22 0x21B634B83832B91D1024B73B30B634B2103A37B5B2B7 PUSH1 0x51 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST DUP5 DUP2 MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE DUP2 PUSH1 0x60 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x80 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x80 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH1 0x1F NOT AND ADD ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x3875 JUMPI PUSH2 0x3875 PUSH2 0x394C JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3895 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x38B4 JUMPI PUSH2 0x38B4 PUSH2 0x394C JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x38CB JUMPI PUSH2 0x38CB PUSH2 0x394C JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x38EB JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x38D3 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1F42 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x3910 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x3244 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x3945 JUMPI PUSH2 0x3945 PUSH2 0x394C JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID 0x4B 0xE0 0x5C DUP14 SLOAD CREATE2 0xE0 JUMP 0xAB 0x2C STATICCALL SUB RETURNDATACOPY SWAP16 PC KECCAK256 JUMPI STOP SLT PUSH9 0xC3E28561BB999D35D2 0xC8 CALLCODE 0xC8 LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH2 0x6D55 SWAP16 0x5D SUB 0x4E 0x4D GT 0xDA SWAP3 0xDF SWAP3 0xAC 0xD6 DELEGATECALL LT 0xC6 BYTE 0xAD 0xC8 CALLDATALOAD 0xD5 CODECOPY 0xBE SUB PUSH26 0x985DA86FE664736F6C6343000804003300000000000000000000 ","sourceMap":"484:13215:12:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2141:98:2;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4238:166;;;;;;;;;;-1:-1:-1;4238:166:2;;;;;:::i;:::-;;:::i;:::-;;;14301:14:15;;14294:22;14276:41;;14264:2;14249:18;4238:166:2;14231:92:15;3229:106:2;;;;;;;;;;-1:-1:-1;3316:12:2;;3229:106;;;29479:25:15;;;29467:2;29452:18;3229:106:2;29434:76:15;4249:101:13;;;;;;;;;;-1:-1:-1;4249:101:13;;;;;:::i;:::-;;:::i;4073:81::-;;;;;;;;;;;;;:::i;4560:412::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;4871:478:2:-;;;;;;;;;;-1:-1:-1;4871:478:2;;;;;:::i;:::-;;:::i;6643:1041:12:-;;;;;;:::i;:::-;;:::i;:::-;;931:100;;;;;;;;;;-1:-1:-1;931:100:12;;;;;:::i;:::-;;:::i;7294:510:13:-;;;;;;;;;;-1:-1:-1;7294:510:13;;;;;:::i;:::-;;:::i;12510:1186:12:-;;;;;;;;;;-1:-1:-1;12510:1186:12;;;;;:::i;:::-;;:::i;3078:91:2:-;;;;;;;;;;-1:-1:-1;3078:91:2;;3160:2;30451:36:15;;30439:2;30424:18;3078:91:2;30406:87:15;2608:133:12;;;;;;;;;;-1:-1:-1;2608:133:12;;;;;:::i;:::-;;:::i;8806:369:13:-;;;;;;;;;;-1:-1:-1;8806:369:13;;;;;:::i;:::-;;:::i;6024:313::-;;;;;;;;;;;;;:::i;5744:212:2:-;;;;;;;;;;-1:-1:-1;5744:212:2;;;;;:::i;:::-;;:::i;11341:1049:12:-;;;;;;;;;;-1:-1:-1;11341:1049:12;;;;;:::i;:::-;;:::i;7745:1254::-;;;;;;;;;;-1:-1:-1;7745:1254:12;;;;;:::i;:::-;;:::i;2796:1195::-;;;;;;:::i;:::-;;:::i;1187:41:13:-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;12172:32:15;;;12154:51;;12142:2;12127:18;1187:41:13;12109:102:15;5144:1278:12;;;;;;;;;;-1:-1:-1;5144:1278:12;;;;;:::i;:::-;;:::i;3393:125:2:-;;;;;;;;;;-1:-1:-1;3393:125:2;;;;;:::i;:::-;-1:-1:-1;;;;;3493:18:2;3467:7;3493:18;;;;;;;;;;;;3393:125;1668:101:0;;;;;;;;;;;;;:::i;3995:1062:12:-;;;;;;:::i;:::-;;:::i;1036:85:0:-;;;;;;;;;;-1:-1:-1;1108:6:0;;-1:-1:-1;;;;;1108:6:0;1036:85;;1141:42:13;;;;;;;;;;;;;;;4158:87;;;;;;;;;;-1:-1:-1;4158:87:13;;;;;:::i;:::-;;:::i;2352:102:2:-;;;;;;;;;;;;;:::i;6443:405::-;;;;;;;;;;-1:-1:-1;6443:405:2;;;;;:::i;:::-;;:::i;3721:172::-;;;;;;;;;;-1:-1:-1;3721:172:2;;;;;:::i;:::-;;:::i;9003:911:12:-;;;;;;;;;;-1:-1:-1;9003:911:12;;;;;:::i;:::-;;:::i;2719:50:13:-;;;;;;;;;;-1:-1:-1;2719:50:13;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;29689:25:15;;;29745:2;29730:18;;29723:34;;;;29662:18;2719:50:13;29644:119:15;10021:1144:12;;;;;;;;;;-1:-1:-1;10021:1144:12;;;;;:::i;:::-;;:::i;3951:149:2:-;;;;;;;;;;-1:-1:-1;3951:149:2;;;;;:::i;:::-;-1:-1:-1;;;;;4066:18:2;;;4040:7;4066:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3951:149;5787:233:13;;;;;;;;;;-1:-1:-1;5787:233:13;;;;;:::i;:::-;;:::i;2610:47::-;;;;;;;;;;-1:-1:-1;2610:47:13;;;;;:::i;:::-;;;;;;;;;;;;;;1918:198:0;;;;;;;;;;-1:-1:-1;1918:198:0;;;;;:::i;:::-;;:::i;2141:98:2:-;2195:13;2227:5;2220:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2141:98;:::o;4238:166::-;4321:4;4337:39;719:10:7;4360:7:2;4369:6;4337:8;:39::i;:::-;-1:-1:-1;4393:4:2;4238:166;;;;;:::o;4249:101:13:-;4302:4;4321:24;:8;4339:5;4321:17;:24::i;4073:81::-;4113:4;4132:17;:8;:15;:17::i;:::-;4125:24;;4073:81;:::o;4560:412::-;4611:16;4629;4647:7;4661:6;4670:9;:7;:9::i;:::-;4661:18;;4685:25;4727:1;4713:16;;;;;;-1:-1:-1;;;4713:16:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4713:16:13;;4685:44;;4735:23;4775:1;4761:16;;;;;;-1:-1:-1;;;4761:16:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4761:16:13;;4735:42;;4788:6;4783:138;4804:1;4800;:5;4783:138;;;4820:13;4836:10;4844:1;4836:7;:10::i;:::-;4820:26;;4868:21;4883:5;4868:14;:21::i;:::-;4854:8;4863:1;4854:11;;;;;;-1:-1:-1;;;4854:11:13;;;;;;;;;;;;;;:35;;;;;4909:5;4897:6;4904:1;4897:9;;;;;;-1:-1:-1;;;4897:9:13;;;;;;;;;-1:-1:-1;;;;;4897:17:13;;;:9;;;;;;;;;;;:17;-1:-1:-1;4807:3:13;;;;:::i;:::-;;;;4783:138;;;;4935:8;4945:6;4953:13;3316:12:2;;;3229:106;4953:13:13;4927:40;;;;;;;;;4560:412;;;:::o;4871:478:2:-;5007:4;5023:36;5033:6;5041:9;5052:6;5023:9;:36::i;:::-;-1:-1:-1;;;;;5097:19:2;;5070:24;5097:19;;;:11;:19;;;;;;;;719:10:7;5097:33:2;;;;;;;;5148:26;;;;5140:79;;;;-1:-1:-1;;;5140:79:2;;23027:2:15;5140:79:2;;;23009:21:15;23066:2;23046:18;;;23039:30;23105:34;23085:18;;;23078:62;-1:-1:-1;;;23156:18:15;;;23149:38;23204:19;;5140:79:2;;;;;;;;;5253:57;5262:6;719:10:7;5303:6:2;5284:16;:25;5253:8;:57::i;:::-;5338:4;5331:11;;;4871:478;;;;;;:::o;6643:1041:12:-;6875:9;742;723:15;:28;;715:57;;;;-1:-1:-1;;;715:57:12;;;;;;;:::i;:::-;6925:20:::1;6933:11;6925:7;:20::i;:::-;6917:55;;;;-1:-1:-1::0;;;6917:55:12::1;;;;;;;:::i;:::-;7079:42;7091:16;7109:11;7079;:42::i;:::-;7181:14;7198:105;7215:16;7233:11;7246;7259:12;7273:9;7284:18;7198:16;:105::i;:::-;7181:122;;7309:43;7331:6;7339:12;7309:21;:43::i;:::-;7377:46;7393:16;7411:11;7377:15;:46::i;:::-;7429:42;7445:11;7458:12;7429:15;:42::i;:::-;7501:66;-1:-1:-1::0;;;;;7501:32:12;::::1;7534:18:::0;7554:12;7501:32:::1;:66::i;:::-;7618:18;-1:-1:-1::0;;;;;7579:100:12::1;7605:11;-1:-1:-1::0;;;;;7579:100:12::1;7587:16;-1:-1:-1::0;;;;;7579:100:12::1;-1:-1:-1::0;;;;;;;;;;;7638:11:12::1;7651:12;7665:13;;7579:100;;;;;;;;;:::i;:::-;;;;;;;;778:1;6643:1041:::0;;;;;;;;;:::o;931:100::-;1108:6:0;;-1:-1:-1;;;;;1108:6:0;719:10:7;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;989:19:12::1;:8;1002:5:::0;989:12:::1;:19::i;:::-;;1014:12;1020:5;1014;:12::i;:::-;931:100:::0;:::o;7294:510:13:-;7459:6;7482:14;7509:206;7519:1;7515;:5;7509:206;;;7529:22;7554:14;;7569:1;7554:17;;;;;-1:-1:-1;;;7554:17:13;;;;;;;;;;;;;;;7529:42;;7599:1;7582:14;:18;7579:119;;;7611:78;7647:10;7667:4;7674:14;7618:10;7626:1;7618:7;:10::i;:::-;-1:-1:-1;;;;;7611:35:13;;:78;;:35;:78::i;:::-;7705:3;;;;:::i;:::-;;;;7509:206;;;;7720:79;7728:10;7740:14;;7756:5;7763:10;7775:9;7786:12;7720:7;:79::i;:::-;7294:510;;;;;;;;:::o;12510:1186:12:-;12749:9;742;723:15;:28;;715:57;;;;-1:-1:-1;;;715:57:12;;;;;;;:::i;:::-;12791:19:::1;12799:10;12791:7;:19::i;:::-;:43;;;;;12814:20;12822:11;12814:7;:20::i;:::-;12783:79;;;::::0;-1:-1:-1;;;12783:79:12;;20338:2:15;12783:79:12::1;::::0;::::1;20320:21:15::0;20377:2;20357:18;;;20350:30;-1:-1:-1;;;20396:18:15;;;20389:53;20459:18;;12783:79:12::1;20310:173:15::0;12783:79:12::1;12953:14;12970:99;12987:10;12999:11;13012;13025:12;13039:9;13050:18;12970:16;:99::i;:::-;12953:116;;13075:43;13097:6;13105:12;13075:21;:43::i;:::-;778:1;13160:27;13190:24;13203:10;13190:12;:24::i;:::-;13160:54;;13220:19;13262:26;13277:10;13262:14;:26::i;:::-;13242:46;::::0;:19;:46:::1;:::i;:::-;13220:68;;13298:18;13319:59;13339:11;13352;13365:12;13319:19;:59::i;:::-;13298:80;;13404:43;13415:10;13427:19;13404:10;:43::i;:::-;13453:40;13469:11;13482:10;13453:15;:40::i;:::-;13523:64;-1:-1:-1::0;;;;;13523:32:12;::::1;13556:18:::0;13576:10;13523:32:::1;:64::i;:::-;13632:18;-1:-1:-1::0;;;;;13599:92:12::1;13619:11;-1:-1:-1::0;;;;;13599:92:12::1;13607:10;-1:-1:-1::0;;;;;13599:92:12::1;-1:-1:-1::0;;;;;;;;;;;13652:11:12::1;13665:10;13677:13;;13599:92;;;;;;;;;:::i;:::-;;;;;;;;778:1;;;12510:1186:::0;;;;;;;;;;:::o;2608:133::-;-1:-1:-1;;;;;2715:19:12;2677:7;2715:19;;;:12;:19;;;;;;-1:-1:-1;;;;;2699:37:12;;2608:133::o;8806:369:13:-;8911:26;8969:13;3316:12:2;;;3229:106;8969:13:13;8941:26;8961:6;858:4;8941:26;:::i;:::-;8940:42;;;;:::i;:::-;8911:71;;9035:25;9041:10;9053:6;9035:5;:25::i;:::-;9067:43;9091:18;9067:23;:43::i;:::-;9121:49;;;29689:25:15;;;29745:2;29730:18;;29723:34;;;9131:10:13;;9121:49;;29662:18:15;9121:49:13;;;;;;;8806:369;;:::o;6024:313::-;6067:18;6101:28;6118:10;6101:16;:28::i;:::-;6093:82;;;;-1:-1:-1;;;6093:82:13;;22213:2:15;6093:82:13;;;22195:21:15;22252:2;22232:18;;;22225:30;22291:34;22271:18;;;22264:62;-1:-1:-1;;;22342:18:15;;;22335:39;22391:19;;6093:82:13;22185:231:15;6093:82:13;-1:-1:-1;6210:10:13;6194:27;;;;:15;:27;;;;;:43;;;;;6243:34;;;;;;;;6194:43;6284:48;;6302:4;;6194:43;6284:9;:48::i;:::-;6024:313;:::o;5744:212:2:-;719:10:7;5832:4:2;5880:25;;;:11;:25;;;;;;;;-1:-1:-1;;;;;5880:34:2;;;;;;;;;;5832:4;;5848:80;;5871:7;;5880:47;;5917:10;;5880:47;:::i;:::-;5848:8;:80::i;11341:1049:12:-;11593:9;742;723:15;:28;;715:57;;;;-1:-1:-1;;;715:57:12;;;;;;;:::i;:::-;11635:19:::1;11643:10;11635:7;:19::i;:::-;:43;;;;;11658:20;11666:11;11658:7;:20::i;:::-;11627:79;;;::::0;-1:-1:-1;;;11627:79:12;;20338:2:15;11627:79:12::1;::::0;::::1;20320:21:15::0;20377:2;20357:18;;;20350:30;-1:-1:-1;;;20396:18:15;;;20389:53;20459:18;;11627:79:12::1;20310:173:15::0;11627:79:12::1;11770:75;-1:-1:-1::0;;;;;11770:35:12;::::1;11806:10;11826:4;11833:11:::0;11770:35:::1;:75::i;:::-;11905:14;11922:99;11939:10;11951:11;11964;11977:12;11991:9;12002:18;11922:16;:99::i;:::-;11905:116;;12027:43;12049:6;12057:12;12027:21;:43::i;:::-;12095:40;12111:10;12123:11;12095:15;:40::i;:::-;12141:42;12157:11;12170:12;12141:15;:42::i;:::-;12213:66;-1:-1:-1::0;;;;;12213:32:12;::::1;12246:18:::0;12266:12;12213:32:::1;:66::i;:::-;12324:18;-1:-1:-1::0;;;;;12291:94:12::1;12311:11;-1:-1:-1::0;;;;;12291:94:12::1;12299:10;-1:-1:-1::0;;;;;12291:94:12::1;-1:-1:-1::0;;;;;;;;;;;12344:11:12::1;12357:12;12371:13;;12291:94;;;;;;;;;:::i;:::-;;;;;;;;778:1;11341:1049:::0;;;;;;;;;;:::o;7745:1254::-;7976:9;742;723:15;:28;;715:57;;;;-1:-1:-1;;;715:57:12;;;;;;;:::i;:::-;8018:19:::1;8026:10;8018:7;:19::i;:::-;8010:54;;;;-1:-1:-1::0;;;8010:54:12::1;;;;;;;:::i;:::-;8124:14;8141:104;8158:10;8170:16;8188:11;8201:12;8215:9;8226:18;8141:16;:104::i;:::-;8124:121;;8251:43;8273:6;8281:12;8251:21;:43::i;:::-;8363:27;8393:24;8406:10;8393:12;:24::i;:::-;8363:54;;8423:19;8467:26;8482:10;8467:14;:26::i;:::-;8445:48;::::0;:19;:48:::1;:::i;:::-;8423:70;;8499:18;8520:59;8540:11;8553;8566:12;8520:19;:59::i;:::-;8499:80;;8605:43;8616:10;8628:19;8605:10;:43::i;:::-;8654:45;8670:16;8688:10;8654:15;:45::i;:::-;8773:63;::::0;-1:-1:-1;;;8773:63:12;;::::1;::::0;::::1;29479:25:15::0;;;8798:16:12::1;-1:-1:-1::0;;;;;8773:51:12::1;::::0;::::1;::::0;29452:18:15;;8773:63:12::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;8842:43;8854:18;8874:10;8842:11;:43::i;:::-;8935:18;-1:-1:-1::0;;;;;8897:97:12::1;8917:16;-1:-1:-1::0;;;;;8897:97:12::1;8905:10;-1:-1:-1::0;;;;;8897:97:12::1;-1:-1:-1::0;;;;;;;;;;;8955:11:12::1;8968:10;8980:13;;8897:97;;;;;;;;;:::i;2796:1195::-:0;2990:9;742;723:15;:28;;715:57;;;;-1:-1:-1;;;715:57:12;;;;;;;:::i;:::-;3009:9:::1;:13:::0;3006:72:::1;;3031:40;3043:16;3061:9;3031:11;:40::i;:::-;3133:10;-1:-1:-1::0;;;;;3133:18:12;::::1;;3125:70;;;::::0;-1:-1:-1;;;3125:70:12;;18232:2:15;3125:70:12::1;::::0;::::1;18214:21:15::0;18271:2;18251:18;;;18244:30;18310:34;18290:18;;;18283:62;-1:-1:-1;;;18361:18:15;;;18354:37;18408:19;;3125:70:12::1;18204:229:15::0;3125:70:12::1;3201:21;3225:73;3245:6;3253:14;;3269:5;3276:10;3288:9;3225:19;:73::i;:::-;3201:97;;3354:50;3376:13;3391:12;3354:21;:50::i;:::-;3458:6;3481:14:::0;3508:360:::1;3518:1;3514;:5;3508:360;;;3528:22;3553:14;;3568:1;3553:17;;;;;-1:-1:-1::0;;;3553:17:12::1;;;;;;;;;;;;;;;3528:42;;3598:1;3581:14;:18;3578:273;;;3610:14;3627:10;3635:1;3627:7;:10::i;:::-;3610:27;;3647:22;3672:20;3685:6;3672:12;:20::i;:::-;3647:45;;3753:14;3727:22;3742:6;3727:14;:22::i;:::-;3710:39;::::0;:14;:39:::1;:::i;:::-;:57;;3702:96;;;::::0;-1:-1:-1;;;3702:96:12;;26106:2:15;3702:96:12::1;::::0;::::1;26088:21:15::0;26145:2;26125:18;;;26118:30;26184:28;26164:18;;;26157:56;26230:18;;3702:96:12::1;26078:176:15::0;3702:96:12::1;3808:34;3819:6;3827:14;3808:10;:34::i;:::-;3578:273;;;3858:3:::0;::::1;::::0;::::1;:::i;:::-;;;;3508:360;;;;3898:41;3913:6;3921:5;3928:10;3898:14;:41::i;:::-;3950:36;::::0;;29689:25:15;;;29745:2;29730:18;;29723:34;;;-1:-1:-1;;;;;3950:36:12;::::1;::::0;::::1;::::0;29662:18:15;3950:36:12::1;;;;;;;778:1;;;2796:1195:::0;;;;;;;;:::o;5144:1278::-;5353:9;742;723:15;:28;;715:57;;;;-1:-1:-1;;;715:57:12;;;;;;;:::i;:::-;5395:10:::1;-1:-1:-1::0;;;;;5395:23:12;::::1;;5387:73;;;::::0;-1:-1:-1;;;5387:73:12;;24949:2:15;5387:73:12::1;::::0;::::1;24931:21:15::0;24988:2;24968:18;;;24961:30;25027:34;25007:18;;;25000:62;-1:-1:-1;;;25078:18:15;;;25071:35;25123:19;;5387:73:12::1;24921:227:15::0;5387:73:12::1;5471:16;-1:-1:-1::0;;;;;5496:33:12;::::1;5493:110;;-1:-1:-1::0;5554:16:12::1;::::0;-1:-1:-1;5592:4:12::1;5493:110;5609:24;5636:96;5659:11;5672:21;5695:12;5709:11;5722:9;5636:22;:96::i;:::-;5609:123;;5789:53;5811:16;5829:12;5789:21;:53::i;:::-;5920:40;5926:10;5938:21;5920:5;:40::i;:::-;6039:42;6055:12;6069:11;6039:15;:42::i;:::-;6114:11;6111:218;;;6135:64;::::0;-1:-1:-1;;;6135:64:12;;::::1;::::0;::::1;29479:25:15::0;;;6160:16:12::1;-1:-1:-1::0;;;;;6135:51:12::1;::::0;::::1;::::0;29452:18:15;;6135:64:12::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;6207:36;6219:10;6231:11;6207;:36::i;:::-;6111:218;;;6264:58;-1:-1:-1::0;;;;;6264:33:12;::::1;6298:10;6310:11:::0;6264:33:::1;:58::i;:::-;6391:12;-1:-1:-1::0;;;;;6340:77:12::1;6355:11;-1:-1:-1::0;;;;;6340:77:12::1;;6368:21;6405:11;6340:77;;;;;;29689:25:15::0;;;29745:2;29730:18;;29723:34;29677:2;29662:18;;29644:119;6340:77:12::1;;;;;;;;778:1;;5144:1278:::0;;;;;;;:::o;1668:101:0:-;1108:6;;-1:-1:-1;;;;;1108:6:0;719:10:7;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;1732:30:::1;1759:1;1732:18;:30::i;:::-;1668:101::o:0;3995:1062:12:-;4206:9;742;723:15;:28;;715:57;;;;-1:-1:-1;;;715:57:12;;;;;;;:::i;:::-;4225:9:::1;:13:::0;4222:72:::1;;4247:40;4259:16;4277:9;4247:11;:40::i;:::-;4349:10;-1:-1:-1::0;;;;;4349:18:12;::::1;;:41:::0;::::1;;;;4371:19;4379:10;4371:7;:19::i;:::-;4341:67;;;::::0;-1:-1:-1;;;4341:67:12;;24205:2:15;4341:67:12::1;::::0;::::1;24187:21:15::0;24244:2;24224:18;;;24217:30;-1:-1:-1;;;24263:18:15;;;24256:43;24316:18;;4341:67:12::1;24177:163:15::0;4341:67:12::1;4442:21;4466:88;4492:6;4500:10;4512:11;4525:5;4532:10;4544:9;4466:25;:88::i;:::-;4442:112;;4610:50;4632:13;4647:12;4610:21;:50::i;:::-;4712:22;4737:24;4750:10;4737:12;:24::i;:::-;4712:49;;4822:11;4792:26;4807:10;4792:14;:26::i;:::-;4775:43;::::0;:14;:43:::1;:::i;:::-;:58;;4767:97;;;::::0;-1:-1:-1;;;4767:97:12;;26106:2:15;4767:97:12::1;::::0;::::1;26088:21:15::0;26145:2;26125:18;;;26118:30;26184:28;26164:18;;;26157:56;26230:18;;4767:97:12::1;26078:176:15::0;4767:97:12::1;4894:38;4905:10;4917:14;4894:10;:38::i;:::-;4964:41;4979:6;4987:5;4994:10;4964:14;:41::i;:::-;5016:36;::::0;;29689:25:15;;;29745:2;29730:18;;29723:34;;;-1:-1:-1;;;;;5016:36:12;::::1;::::0;::::1;::::0;29662:18:15;5016:36:12::1;;;;;;;778:1;;3995:1062:::0;;;;;;;;:::o;4158:87:13:-;4204:7;4226:14;:8;4238:1;4226:11;:14::i;2352:102:2:-;2408:13;2440:7;2433:14;;;;;:::i;6443:405::-;719:10:7;6536:4:2;6579:25;;;:11;:25;;;;;;;;-1:-1:-1;;;;;6579:34:2;;;;;;;;;;6631:35;;;;6623:85;;;;-1:-1:-1;;;6623:85:2;;28769:2:15;6623:85:2;;;28751:21:15;28808:2;28788:18;;;28781:30;28847:34;28827:18;;;28820:62;-1:-1:-1;;;28898:18:15;;;28891:35;28943:19;;6623:85:2;28741:227:15;6623:85:2;6742:67;719:10:7;6765:7:2;6793:15;6774:16;:34;6742:8;:67::i;:::-;-1:-1:-1;6837:4:2;;6443:405;-1:-1:-1;;;6443:405:2:o;3721:172::-;3807:4;3823:42;719:10:7;3847:9:2;3858:6;3823:9;:42::i;9003:911:12:-;9203:9;742;723:15;:28;;715:57;;;;-1:-1:-1;;;715:57:12;;;;;;;:::i;:::-;9269:19:::1;9277:10;9269:7;:19::i;:::-;9261:45;;;::::0;-1:-1:-1;;;9261:45:12;;24205:2:15;9261:45:12::1;::::0;::::1;24187:21:15::0;24244:2;24224:18;;;24217:30;-1:-1:-1;;;24263:18:15;;;24256:43;24316:18;;9261:45:12::1;24177:163:15::0;9261:45:12::1;9371:75;-1:-1:-1::0;;;;;9371:35:12;::::1;9407:10;9427:4;9434:11:::0;9371:35:::1;:75::i;:::-;9480:21;9504:92;9530:10;9542;9554:11;9567:5;9574:10;9586:9;9504:25;:92::i;:::-;9480:116;;9652:50;9674:13;9689:12;9652:21;:50::i;:::-;9741:40;9757:10;9769:11;9741:15;:40::i;:::-;9813:45;9828:10;9840:5;9847:10;9813:14;:45::i;:::-;9869:40;::::0;;29689:25:15;;;29745:2;29730:18;;29723:34;;;9879:10:12::1;::::0;9869:40:::1;::::0;29662:18:15;9869:40:12::1;;;;;;;778:1;9003:911:::0;;;;;;;:::o;10021:1144::-;10263:9;742;723:15;:28;;715:57;;;;-1:-1:-1;;;715:57:12;;;;;;;:::i;:::-;10305:19:::1;10313:10;10305:7;:19::i;:::-;10297:54;;;;-1:-1:-1::0;;;10297:54:12::1;;;;;;;:::i;:::-;10415:75;-1:-1:-1::0;;;;;10415:35:12;::::1;10451:10;10471:4;10478:11:::0;10415:35:::1;:75::i;:::-;10550:14;10567:104;10584:10;10596:16;10614:11;10627:12;10641:9;10652:18;10567:16;:104::i;:::-;10550:121;;10677:43;10699:6;10707:12;10677:21;:43::i;:::-;10745:40;10761:10;10773:11;10745:15;:40::i;:::-;10791:47;10807:16;10825:12;10791:15;:47::i;:::-;10933:65;::::0;-1:-1:-1;;;10933:65:12;;::::1;::::0;::::1;29479:25:15::0;;;10958:16:12::1;-1:-1:-1::0;;;;;10933:51:12::1;::::0;::::1;::::0;29452:18:15;;10933:65:12::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;11004:45;11016:18;11036:12;11004:11;:45::i;:::-;11099:18;-1:-1:-1::0;;;;;11061:99:12::1;11081:16;-1:-1:-1::0;;;;;11061:99:12::1;11069:10;-1:-1:-1::0;;;;;11061:99:12::1;-1:-1:-1::0;;;;;;;;;;;11119:11:12::1;11132:12;11146:13;;11061:99;;;;;;;;;:::i;5787:233:13:-:0;-1:-1:-1;;;;;5896:27:13;;5854:4;5896:27;;;:15;:27;;;;;5939:25;;;;:29;;;;5938:77;;-1:-1:-1;5974:21:13;5999:15;-1:-1:-1;5974:40:13;;5931:84;-1:-1:-1;;5787:233:13:o;1918:198:0:-;1108:6;;-1:-1:-1;;;;;1108:6:0;719:10:7;1248:23:0;1240:68;;;;-1:-1:-1;;;1240:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;2006:22:0;::::1;1998:73;;;::::0;-1:-1:-1;;;1998:73:0;;19528:2:15;1998:73:0::1;::::0;::::1;19510:21:15::0;19567:2;19547:18;;;19540:30;19606:34;19586:18;;;19579:62;-1:-1:-1;;;19657:18:15;;;19650:36;19703:19;;1998:73:0::1;19500:228:15::0;1998:73:0::1;2081:28;2100:8;2081:18;:28::i;7612:150:11:-:0;7682:4;7705:50;7710:3;-1:-1:-1;;;;;7730:23:11;;7705:4;:50::i;10019:370:2:-;-1:-1:-1;;;;;10150:19:2;;10142:68;;;;-1:-1:-1;;;10142:68:2;;26461:2:15;10142:68:2;;;26443:21:15;26500:2;26480:18;;;26473:30;26539:34;26519:18;;;26512:62;-1:-1:-1;;;26590:18:15;;;26583:34;26634:19;;10142:68:2;26433:226:15;10142:68:2;-1:-1:-1;;;;;10228:21:2;;10220:68;;;;-1:-1:-1;;;10220:68:2;;19935:2:15;10220:68:2;;;19917:21:15;19974:2;19954:18;;;19947:30;20013:34;19993:18;;;19986:62;-1:-1:-1;;;20064:18:15;;;20057:32;20106:19;;10220:68:2;19907:224:15;10220:68:2;-1:-1:-1;;;;;10299:18:2;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10350:32;;29479:25:15;;;10350:32:2;;29452:18:15;10350:32:2;;;;;;;10019:370;;;:::o;8167:165:11:-;-1:-1:-1;;;;;8300:23:11;;8247:4;3834:19;;;:12;;;:19;;;;;;:24;;8270:55;3738:127;8413:115;8476:7;8502:19;8510:3;4028:18;;3946:107;7322:713:2;-1:-1:-1;;;;;7457:20:2;;7449:70;;;;-1:-1:-1;;;7449:70:2;;25700:2:15;7449:70:2;;;25682:21:15;25739:2;25719:18;;;25712:30;25778:34;25758:18;;;25751:62;-1:-1:-1;;;25829:18:15;;;25822:35;25874:19;;7449:70:2;25672:227:15;7449:70:2;-1:-1:-1;;;;;7537:23:2;;7529:71;;;;-1:-1:-1;;;7529:71:2;;17828:2:15;7529:71:2;;;17810:21:15;17867:2;17847:18;;;17840:30;17906:34;17886:18;;;17879:62;-1:-1:-1;;;17957:18:15;;;17950:33;18000:19;;7529:71:2;17800:225:15;7529:71:2;-1:-1:-1;;;;;7693:17:2;;7669:21;7693:17;;;;;;;;;;;7728:23;;;;7720:74;;;;-1:-1:-1;;;7720:74:2;;20690:2:15;7720:74:2;;;20672:21:15;20729:2;20709:18;;;20702:30;20768:34;20748:18;;;20741:62;-1:-1:-1;;;20819:18:15;;;20812:36;20865:19;;7720:74:2;20662:228:15;7720:74:2;-1:-1:-1;;;;;7828:17:2;;;:9;:17;;;;;;;;;;;7848:22;;;7828:42;;7890:20;;;;;;;;:30;;7864:6;;7828:9;7890:30;;7864:6;;7890:30;:::i;:::-;;;;;;;;7953:9;-1:-1:-1;;;;;7936:35:2;7945:6;-1:-1:-1;;;;;7936:35:2;;7964:6;7936:35;;;;29479:25:15;;29467:2;29452:18;;29434:76;7936:35:2;;;;;;;;7982:46;7322:713;;;;:::o;3848:187:13:-;3921:12;3947:9;-1:-1:-1;;;;;3939:23:13;3970:7;3939:43;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3920:62;;;3996:7;3988:42;;;;-1:-1:-1;;;3988:42:13;;21097:2:15;3988:42:13;;;21079:21:15;21136:2;21116:18;;;21109:30;-1:-1:-1;;;21155:18:15;;;21148:52;21217:18;;3988:42:13;21069:172:15;3988:42:13;3848:187;;;:::o;12555:396::-;12735:14;12756:19;12778:97;12793:10;12805:11;12818;12831:12;12845:9;12856:18;12778:14;:97::i;:::-;12756:119;;12894:52;12916:16;12934:11;12894:21;:52::i;:::-;12885:61;12555:396;-1:-1:-1;;;;;;;;12555:396:13:o;14112:289::-;14215:22;14240:68;14250:9;14261:14;;;;:12;:14;:::i;:::-;14293;14240:68;;;;;14277:14;14240:68;;;;;;17062:25:15;;;;17135:4;17123:17;;;17103:18;;;17096:45;14277:14:13;;;;17157:18:15;;;17150:34;14293:14:13;;;;17200:18:15;;;17193:34;17034:19;;14240:68:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14215:93;;14339:17;-1:-1:-1;;;;;14323:33:13;:14;-1:-1:-1;;;;;14323:33:13;;14315:81;;;;-1:-1:-1;;;14315:81:13;;22623:2:15;14315:81:13;;;22605:21:15;22662:2;22642:18;;;22635:30;22701:34;22681:18;;;22674:62;-1:-1:-1;;;22752:18:15;;;22745:33;22795:19;;14315:81:13;22595:225:15;2158:221:12;2238:14;2254:18;2276:20;2290:5;2276:13;:20::i;:::-;2237:59;;-1:-1:-1;2237:59:12;-1:-1:-1;2324:50:12;2237:59;2348:25;2359:14;2237:59;2348:25;:::i;:::-;2324:14;:50::i;:::-;-1:-1:-1;;;;;2302:19:12;;;;;;;:12;:19;;;;;:72;;;;-1:-1:-1;;;2158:221:12:o;2383:::-;2463:14;2479:18;2501:20;2515:5;2501:13;:20::i;:::-;2462:59;;-1:-1:-1;2462:59:12;-1:-1:-1;2549:50:12;2462:59;2573:25;2584:14;2462:59;2573:25;:::i;701:205:5:-;840:58;;-1:-1:-1;;;;;12788:32:15;;840:58:5;;;12770:51:15;12837:18;;;12830:34;;;813:86:5;;833:5;;-1:-1:-1;;;863:23:5;12743:18:15;;840:58:5;;;;-1:-1:-1;;840:58:5;;;;;;;;;;;;;;-1:-1:-1;;;;;840:58:5;-1:-1:-1;;;;;;840:58:5;;;;;;;;;;813:19;:86::i;1320:97:12:-;1374:38;1385:5;1392:19;1405:5;1392:12;:19::i;:::-;1374:10;:38::i;912:241:5:-;1077:68;;-1:-1:-1;;;;;12474:15:15;;;1077:68:5;;;12456:34:15;12526:15;;12506:18;;;12499:43;12558:18;;;12551:34;;;1050:96:5;;1070:5;;-1:-1:-1;;;1100:27:5;12391:18:15;;1077:68:5;12373:218:15;1035:281:12;1163:64;;;1221:4;1163:64;;;;12154:51:15;;;;1163:64:12;;;;;;;;;;12127:18:15;;;;1163:64:12;;;;;;;-1:-1:-1;;;;;1163:64:12;-1:-1:-1;;;1163:64:12;;;1146:82;;1095:7;;;;;;-1:-1:-1;;;;;1146:16:12;;;:82;;1163:64;1146:82;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1110:118;;;;1242:7;:28;;;;;1268:2;1253:4;:11;:17;;1242:28;1234:37;;;;;;1295:4;1284:27;;;;;;;;;;;;:::i;:::-;1277:34;1035:281;-1:-1:-1;;;;1035:281:12:o;5241:512:13:-;5357:7;5390:11;5375;:26;5372:377;;;-1:-1:-1;5418:12:13;5411:19;;5372:377;5451:19;5507:11;5474:31;5494:11;858:4;5474:31;:::i;:::-;5473:45;;;;:::i;:::-;5451:67;-1:-1:-1;1050:26:13;858:4;1070:6;1050:26;:::i;:::-;5529:11;:44;5526:217;;858:4;5623:12;1050:26;858:4;1070:6;1050:26;:::i;:::-;5593:42;;;;:::i;:::-;5592:64;;;;:::i;:::-;5585:71;;;;;5526:217;858:4;5689:24;5701:12;5689:11;:24;:::i;1975:179:12:-;2046:14;2066:20;2080:5;2066:13;:20::i;:::-;2045:41;;;2114:35;2129:7;2138:10;2114:14;:35::i;:::-;-1:-1:-1;;;;;2092:19:12;;;;;;;:12;:19;;;;;:57;;;;-1:-1:-1;;1975:179:12:o;9020:576:2:-;-1:-1:-1;;;;;9103:21:2;;9095:67;;;;-1:-1:-1;;;9095:67:2;;24547:2:15;9095:67:2;;;24529:21:15;24586:2;24566:18;;;24559:30;24625:34;24605:18;;;24598:62;-1:-1:-1;;;24676:18:15;;;24669:31;24717:19;;9095:67:2;24519:223:15;9095:67:2;-1:-1:-1;;;;;9258:18:2;;9233:22;9258:18;;;;;;;;;;;9294:24;;;;9286:71;;;;-1:-1:-1;;;9286:71:2;;18640:2:15;9286:71:2;;;18622:21:15;18679:2;18659:18;;;18652:30;18718:34;18698:18;;;18691:62;-1:-1:-1;;;18769:18:15;;;18762:32;18811:19;;9286:71:2;18612:224:15;9286:71:2;-1:-1:-1;;;;;9391:18:2;;:9;:18;;;;;;;;;;9412:23;;;9391:44;;9455:12;:22;;9429:6;;9391:9;9455:22;;9429:6;;9455:22;:::i;:::-;;;;-1:-1:-1;;9493:37:2;;29479:25:15;;;9519:1:2;;-1:-1:-1;;;;;9493:37:2;;;;;29467:2:15;29452:18;9493:37:2;;;;;;;3848:187:13;;;:::o;8410:392::-;8478:18;8503:6;8515;8524:9;:7;:9::i;:::-;8515:18;;8539:259;8549:1;8545;:5;8539:259;;;8562:16;8581:10;8589:1;8581:7;:10::i;:::-;8562:29;;858:4;8626:24;8641:8;8626:14;:24::i;:::-;8615:35;;:10;:35;:::i;:::-;8614:59;;;;:::i;:::-;8601:72;;8731:47;8745:8;8755:10;8767;8731:13;:47::i;:::-;8788:3;;;;:::i;:::-;;;;8539:259;;;12955:355;13112:21;13140:19;13162:65;13174:6;13182:14;;13198:5;13205:10;13217:9;13162:11;:65::i;6341:336::-;6434:8;6431:242;;6523:25;6529:6;6537:10;6523:5;:25::i;6431:242::-;6618:48;6640:6;6648:5;6655:10;6618:21;:48::i;13696:412::-;13885:24;13916:19;13938:88;13953:11;13966:21;13989:12;14003:11;14016:9;13938:14;:88::i;:::-;13916:110;;14051:52;14073:16;14091:11;14051:21;:52::i;:::-;14032:71;13696:412;-1:-1:-1;;;;;;;13696:412:13:o;2270:187:0:-;2362:6;;;-1:-1:-1;;;;;2378:17:0;;;-1:-1:-1;;;;;;2378:17:0;;;;;;;2410:40;;2362:6;;;2378:17;2362:6;;2410:40;;2343:16;;2410:40;2270:187;;:::o;13314:378:13:-;13483:21;13511:19;13533:80;13551:6;13559:10;13571:11;13584:5;13591:10;13603:9;13533:17;:80::i;8870:156:11:-;8944:7;8994:22;8998:3;9010:5;8994:3;:22::i;1697:404::-;1760:4;3834:19;;;:12;;;:19;;;;;;1776:319;;-1:-1:-1;1818:23:11;;;;;;;;:11;:23;;;;;;;;;;;;;1998:18;;1976:19;;;:12;;;:19;;;;;;:40;;;;2030:11;;1776:319;-1:-1:-1;2079:5:11;2072:12;;10929:425:13;11107:7;1666:163;;;;;;10006:34:15;9994:47;;10071:34;10066:2;10057:12;;10050:56;10136:34;10131:2;10122:12;;10115:56;10201:34;10196:2;10187:12;;10180:56;-1:-1:-1;;;10261:3:15;10252:13;;10245:40;10310:3;10301:13;;9984:336;1666:163:13;;;;-1:-1:-1;;1666:163:13;;;;;;;;;1651:182;;1666:163;1651:182;;;;11139:209;;;14643:25:15;-1:-1:-1;;;;;14742:15:15;;;14722:18;;;14715:43;;;;14794:15;;;14774:18;;;14767:43;14826:18;;;14819:34;;;14869:19;;;14862:35;;;14913:19;;;14906:35;;;14978:15;;14957:19;;;14950:44;14615:19;;11139:209:13;;;;;;;;;;;;;11129:220;;;;;;11122:227;;10929:425;;;;;;;;:::o;9125:194:9:-;9254:57;;-1:-1:-1;;;9254:57:9;;;9653:27:15;9696:11;;;9689:27;;;9732:12;;;9725:28;;;9218:7:9;;9769:12:15;;9254:57:9;;;;;;;;;;;;9244:68;;;;;;9237:75;;9125:194;;;;:::o;1421:377:12:-;-1:-1:-1;;;;;1547:19:12;;1482:14;1547:19;;;:12;:19;;;;;;-1:-1:-1;;;;;1589:26:12;;;1658:3;1646:15;;;1685:40;1714:9;1685:12;:40;:::i;:::-;1668:58;;1751:8;1740:19;;:7;:19;;;;1732:61;;;;-1:-1:-1;;;1732:61:12;;21855:2:15;1732:61:12;;;21837:21:15;21894:2;21874:18;;;21867:30;21933:31;21913:18;;;21906:59;21982:18;;1732:61:12;21827:179:15;1732:61:12;1421:377;;;;;:::o;1802:169::-;1885:7;1943:22;:10;:20;:22::i;:::-;1907:59;;-1:-1:-1;;;;;1935:31:12;-1:-1:-1;;;;;;1928:3:12;1908:23;;;;1907:59;:::i;3207:706:5:-;3626:23;3652:69;3680:4;3652:69;;;;;;;;;;;;;;;;;3660:5;-1:-1:-1;;;;;3652:27:5;;;:69;;;;;:::i;:::-;3735:17;;3626:95;;-1:-1:-1;3735:21:5;3731:176;;3830:10;3819:30;;;;;;;;;;;;:::i;:::-;3811:85;;;;-1:-1:-1;;;3811:85:5;;27998:2:15;3811:85:5;;;27980:21:15;28037:2;28017:18;;;28010:30;28076:34;28056:18;;;28049:62;-1:-1:-1;;;28127:18:15;;;28120:40;28177:19;;3811:85:5;27970:232:15;5009:228:13;1744:1:1;2325:7;;:19;;2317:63;;;;-1:-1:-1;;;2317:63:1;;28409:2:15;2317:63:1;;;28391:21:15;28448:2;28428:18;;;28421:30;28487:33;28467:18;;;28460:61;28538:18;;2317:63:1;28381:181:15;2317:63:1;1744:1;2455:7;:18;5110:45:13::1;-1:-1:-1::0;;;;;5110:26:13;::::1;5137:9:::0;5148:6;5110:26:::1;:45::i;:::-;5220:12;5226:5;5220;:12::i;:::-;-1:-1:-1::0;;1701:1:1;2628:7;:22;-1:-1:-1;5009:228:13:o;11358:423::-;11512:7;11527:26;11583:14;;11566:32;;;;;;;;;:::i;:::-;;;;;;;;;;;;;11556:43;;;;;;11527:72;;1895:134;;;;;;10539:34:15;10527:47;;10604:34;10599:2;10590:12;;10583:56;10669:34;10664:2;10655:12;;10648:56;-1:-1:-1;;;10729:2:15;10720:12;;10713:42;10780:3;10771:13;;10517:273;1895:134:13;;;;-1:-1:-1;;1895:134:13;;;;;;;;;1880:153;;1895:134;1880:153;;;;11622;;;15960:25:15;-1:-1:-1;;;;;16021:32:15;;16001:18;;;15994:60;16070:18;;;16063:34;;;16113:18;;;16106:34;;;16156:19;;;16149:35;;;16200:19;;;16193:35;;;15932:19;;11622:153:13;;;;;;;;;;;;11612:164;;;;;;11605:171;;;11358:423;;;;;;;;:::o;8311:389:2:-;-1:-1:-1;;;;;8394:21:2;;8386:65;;;;-1:-1:-1;;;8386:65:2;;29175:2:15;8386:65:2;;;29157:21:15;29214:2;29194:18;;;29187:30;29253:33;29233:18;;;29226:61;29304:18;;8386:65:2;29147:181:15;8386:65:2;8538:6;8522:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8554:18:2;;:9;:18;;;;;;;;;;:28;;8576:6;;8554:9;:28;;8576:6;;8554:28;:::i;:::-;;;;-1:-1:-1;;8597:37:2;;29479:25:15;;;-1:-1:-1;;;;;8597:37:2;;;8614:1;;8597:37;;29467:2:15;29452:18;8597:37:2;;;;;;;8311:389;;:::o;6736:554:13:-;6856:1;6848:5;:9;6840:98;;;;-1:-1:-1;;;6840:98:13;;19043:2:15;6840:98:13;;;19025:21:15;19082:2;19062:18;;;19055:30;19121:34;19101:18;;;19094:62;19192:34;19172:18;;;19165:62;-1:-1:-1;;;19243:19:15;;;19236:43;19296:19;;6840:98:13;19015:306:15;6840:98:13;-1:-1:-1;;;;;6952:27:13;;;;;;:15;:27;;;;;:43;;;:46;6944:113;;;;-1:-1:-1;;;6944:113:13;;27224:2:15;6944:113:13;;;27206:21:15;27263:2;27243:18;;;27236:30;27302:34;27282:18;;;27275:62;-1:-1:-1;;;27353:18:15;;;27346:52;27415:19;;6944:113:13;27196:244:15;6944:113:13;7064:24;7091:108;;;;;;;;7139:5;7147:6;7139:14;;;;:::i;:::-;7120:34;;:15;:34;:::i;:::-;7091:108;;;;;;;;;-1:-1:-1;;;;;7205:27:13;;-1:-1:-1;7205:27:13;;;:15;:27;;;;;:39;;;;;;;;;;;;;7064:135;-1:-1:-1;7250:35:13;7264:4;7179:13;7250:5;:35::i;12165:386::-;12346:7;2313:154;;;;;;11698:34:15;11686:47;;11763:34;11758:2;11749:12;;11742:56;11828:34;11823:2;11814:12;;11807:56;11893:34;11888:2;11879:12;;11872:56;-1:-1:-1;;;11953:3:15;11944:13;;11937:31;11993:3;11984:13;;11676:327;2313:154:13;;;;;;;-1:-1:-1;;2313:154:13;;;;;;2298:173;;2313:154;2298:173;;;;12378:167;;;16526:25:15;-1:-1:-1;;;;;16625:15:15;;;16605:18;;;16598:43;16657:18;;;16650:34;;;;16720:15;;;;16700:18;;;16693:43;-1:-1:-1;16752:19:15;;;16745:35;;;;16796:19;;;;16789:35;;;;12378:167:13;;;;;;;;;;16498:19:15;;;;12378:167:13;;12368:178;;;;;;12165:386::o;11785:376::-;11951:7;2101:143;;;;;;11009:34:15;10997:47;;11074:34;11069:2;11060:12;;11053:56;11139:34;11134:2;11125:12;;11118:56;11204:29;11199:2;11190:12;;11183:51;11259:3;11250:13;;10987:282;2101:143:13;;;;-1:-1:-1;;2101:143:13;;;;;;;;;2086:162;;2101:143;2086:162;;;;11983:172;;;15320:25:15;-1:-1:-1;;;;;15419:15:15;;;15399:18;;;15392:43;;;;15471:15;;15451:18;;;15444:43;15503:18;;;15496:34;;;15546:19;;;15539:35;;;15590:19;;;15583:35;;;15634:19;;;15627:35;;;15292:19;;11983:172:13;15274:394:15;4395:118:11;4462:7;4488:3;:11;;4500:5;4488:18;;;;;;-1:-1:-1;;;4488:18:11;;;;;;;;;;;;;;;;;4481:25;;4395:118;;;;:::o;1135:192:10:-;1192:7;-1:-1:-1;;;;;1219:26:10;;;1211:78;;;;-1:-1:-1;;;1211:78:10;;23797:2:15;1211:78:10;;;23779:21:15;23836:2;23816:18;;;23809:30;23875:34;23855:18;;;23848:62;-1:-1:-1;;;23926:18:15;;;23919:37;23973:19;;1211:78:10;23769:229:15;1211:78:10;-1:-1:-1;1314:5:10;1135:192::o;3514:223:6:-;3647:12;3678:52;3700:6;3708:4;3714:1;3717:12;3647;1087:20;;4881:60;;;;-1:-1:-1;;;4881:60:6;;26866:2:15;4881:60:6;;;26848:21:15;26905:2;26885:18;;;26878:30;26944:31;26924:18;;;26917:59;26993:18;;4881:60:6;26838:179:15;4881:60:6;4953:12;4967:23;4994:6;-1:-1:-1;;;;;4994:11:6;5013:5;5020:4;4994:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4952:73;;;;5042:51;5059:7;5068:10;5080:12;7360;7388:7;7384:516;;;-1:-1:-1;7418:10:6;7411:17;;7384:516;7529:17;;:21;7525:365;;7723:10;7717:17;7783:15;7770:10;7766:2;7762:19;7755:44;7672:145;7862:12;7855:20;;-1:-1:-1;;;7855:20:6;;;;;;;;:::i;14:173:15:-;82:20;;-1:-1:-1;;;;;131:31:15;;121:42;;111:2;;177:1;174;167:12;111:2;63:124;;;:::o;192:395::-;255:8;265:6;319:3;312:4;304:6;300:17;296:27;286:2;;344:8;334;327:26;286:2;-1:-1:-1;374:20:15;;417:18;406:30;;403:2;;;456:8;446;439:26;403:2;500:4;492:6;488:17;476:29;;560:3;553:4;543:6;540:1;536:14;528:6;524:27;520:38;517:47;514:2;;;577:1;574;567:12;514:2;276:311;;;;;:::o;592:375::-;643:8;653:6;707:3;700:4;692:6;688:17;684:27;674:2;;732:8;722;715:26;674:2;-1:-1:-1;762:20:15;;805:18;794:30;;791:2;;;844:8;834;827:26;791:2;888:4;880:6;876:17;864:29;;940:3;933:4;924:6;916;912:19;908:30;905:39;902:2;;;957:1;954;947:12;972:165;1034:5;1079:2;1070:6;1065:3;1061:16;1057:25;1054:2;;;1099:5;1092;1085:20;1054:2;-1:-1:-1;1125:6:15;1044:93;-1:-1:-1;1044:93:15:o;1142:196::-;1201:6;1254:2;1242:9;1233:7;1229:23;1225:32;1222:2;;;1275:6;1267;1260:22;1222:2;1303:29;1322:9;1303:29;:::i;1343:270::-;1411:6;1419;1472:2;1460:9;1451:7;1447:23;1443:32;1440:2;;;1493:6;1485;1478:22;1440:2;1521:29;1540:9;1521:29;:::i;:::-;1511:39;;1569:38;1603:2;1592:9;1588:18;1569:38;:::i;:::-;1559:48;;1430:183;;;;;:::o;1618:338::-;1695:6;1703;1711;1764:2;1752:9;1743:7;1739:23;1735:32;1732:2;;;1785:6;1777;1770:22;1732:2;1813:29;1832:9;1813:29;:::i;:::-;1803:39;;1861:38;1895:2;1884:9;1880:18;1861:38;:::i;:::-;1851:48;;1946:2;1935:9;1931:18;1918:32;1908:42;;1722:234;;;;;:::o;1961:990::-;2123:6;2131;2139;2147;2155;2163;2171;2179;2187;2240:3;2228:9;2219:7;2215:23;2211:33;2208:2;;;2262:6;2254;2247:22;2208:2;2290:29;2309:9;2290:29;:::i;:::-;2280:39;;2338:38;2372:2;2361:9;2357:18;2338:38;:::i;:::-;2328:48;;2423:2;2412:9;2408:18;2395:32;2385:42;;2474:2;2463:9;2459:18;2446:32;2436:42;;2525:3;2514:9;2510:19;2497:33;2487:43;;2549:39;2583:3;2572:9;2568:19;2549:39;:::i;:::-;2539:49;;2607:66;2665:7;2659:3;2648:9;2644:19;2607:66;:::i;:::-;2597:76;;2724:3;2713:9;2709:19;2696:33;2752:18;2744:6;2741:30;2738:2;;;2789:6;2781;2774:22;2738:2;2833:58;2883:7;2874:6;2863:9;2859:22;2833:58;:::i;:::-;2807:84;;2910:8;2900:18;;;2937:8;2927:18;;;2198:753;;;;;;;;;;;:::o;2956:676::-;3098:6;3106;3114;3122;3130;3138;3146;3199:3;3187:9;3178:7;3174:23;3170:33;3167:2;;;3221:6;3213;3206:22;3167:2;3249:29;3268:9;3249:29;:::i;:::-;3239:39;;3297:38;3331:2;3320:9;3316:18;3297:38;:::i;:::-;3287:48;;3382:2;3371:9;3367:18;3354:32;3344:42;;3433:2;3422:9;3418:18;3405:32;3395:42;;3484:3;3473:9;3469:19;3456:33;3446:43;;3536:3;3525:9;3521:19;3508:33;3498:43;;3560:66;3618:7;3612:3;3601:9;3597:19;3560:66;:::i;:::-;3550:76;;3157:475;;;;;;;;;;:::o;3637:868::-;3797:6;3805;3813;3821;3829;3837;3845;3898:3;3886:9;3877:7;3873:23;3869:33;3866:2;;;3920:6;3912;3905:22;3866:2;3948:29;3967:9;3948:29;:::i;:::-;3938:39;;4028:2;4017:9;4013:18;4000:32;4055:18;4047:6;4044:30;4041:2;;;4092:6;4084;4077:22;4041:2;4136:70;4198:7;4189:6;4178:9;4174:22;4136:70;:::i;:::-;4225:8;;-1:-1:-1;4110:96:15;-1:-1:-1;;4307:2:15;4292:18;;4279:32;;-1:-1:-1;4358:2:15;4343:18;;4330:32;;-1:-1:-1;4409:3:15;4394:19;;4381:33;;-1:-1:-1;4433:66:15;4491:7;4485:3;4470:19;;4433:66;:::i;4510:264::-;4578:6;4586;4639:2;4627:9;4618:7;4614:23;4610:32;4607:2;;;4660:6;4652;4645:22;4607:2;4688:29;4707:9;4688:29;:::i;:::-;4678:39;4764:2;4749:18;;;;4736:32;;-1:-1:-1;;;4597:177:15:o;4779:607::-;4912:6;4920;4928;4936;4944;4952;5005:3;4993:9;4984:7;4980:23;4976:33;4973:2;;;5027:6;5019;5012:22;4973:2;5055:29;5074:9;5055:29;:::i;:::-;5045:39;;5131:2;5120:9;5116:18;5103:32;5093:42;;5154:38;5188:2;5177:9;5173:18;5154:38;:::i;:::-;5144:48;;5239:2;5228:9;5224:18;5211:32;5201:42;;5290:3;5279:9;5275:19;5262:33;5252:43;;5314:66;5372:7;5366:3;5355:9;5351:19;5314:66;:::i;:::-;5304:76;;4963:423;;;;;;;;:::o;5391:915::-;5544:6;5552;5560;5568;5576;5584;5592;5600;5653:3;5641:9;5632:7;5628:23;5624:33;5621:2;;;5675:6;5667;5660:22;5621:2;5703:29;5722:9;5703:29;:::i;:::-;5693:39;;5779:2;5768:9;5764:18;5751:32;5741:42;;5830:2;5819:9;5815:18;5802:32;5792:42;;5881:2;5870:9;5866:18;5853:32;5843:42;;5904:39;5938:3;5927:9;5923:19;5904:39;:::i;:::-;5894:49;;5962:66;6020:7;6014:3;6003:9;5999:19;5962:66;:::i;:::-;5952:76;;6079:3;6068:9;6064:19;6051:33;6107:18;6099:6;6096:30;6093:2;;;6144:6;6136;6129:22;6093:2;6188:58;6238:7;6229:6;6218:9;6214:22;6188:58;:::i;:::-;5611:695;;;;-1:-1:-1;5611:695:15;;-1:-1:-1;5611:695:15;;;;;;6265:8;-1:-1:-1;;;5611:695:15:o;6311:601::-;6444:6;6452;6460;6468;6476;6484;6537:3;6525:9;6516:7;6512:23;6508:33;6505:2;;;6559:6;6551;6544:22;6505:2;6587:29;6606:9;6587:29;:::i;:::-;6577:39;;6663:2;6652:9;6648:18;6635:32;6625:42;;6714:2;6703:9;6699:18;6686:32;6676:42;;6765:2;6754:9;6750:18;6737:32;6727:42;;6816:3;6805:9;6801:19;6788:33;6778:43;;6840:66;6898:7;6892:3;6881:9;6877:19;6840:66;:::i;6917:793::-;7068:6;7076;7084;7092;7100;7108;7161:3;7149:9;7140:7;7136:23;7132:33;7129:2;;;7183:6;7175;7168:22;7129:2;7228:9;7215:23;7261:18;7253:6;7250:30;7247:2;;;7298:6;7290;7283:22;7247:2;7342:70;7404:7;7395:6;7384:9;7380:22;7342:70;:::i;:::-;7431:8;;-1:-1:-1;7316:96:15;-1:-1:-1;;7513:2:15;7498:18;;7485:32;;-1:-1:-1;7564:2:15;7549:18;;7536:32;;-1:-1:-1;7615:2:15;7600:18;;7587:32;;-1:-1:-1;7638:66:15;7696:7;7690:3;7675:19;;7638:66;:::i;7715:297::-;7782:6;7835:2;7823:9;7814:7;7810:23;7806:32;7803:2;;;7856:6;7848;7841:22;7803:2;7893:9;7887:16;7946:5;7939:13;7932:21;7925:5;7922:32;7912:2;;7973:6;7965;7958:22;8017:190;8076:6;8129:2;8117:9;8108:7;8104:23;8100:32;8097:2;;;8150:6;8142;8135:22;8097:2;-1:-1:-1;8178:23:15;;8087:120;-1:-1:-1;8087:120:15:o;8212:194::-;8282:6;8335:2;8323:9;8314:7;8310:23;8306:32;8303:2;;;8356:6;8348;8341:22;8303:2;-1:-1:-1;8384:16:15;;8293:113;-1:-1:-1;8293:113:15:o;8411:289::-;8468:6;8521:2;8509:9;8500:7;8496:23;8492:32;8489:2;;;8542:6;8534;8527:22;8489:2;8586:9;8573:23;8636:4;8629:5;8625:16;8618:5;8615:27;8605:2;;8661:6;8653;8646:22;8705:406;8876:3;-1:-1:-1;;;;;8897:31:15;;8894:2;;;8943:3;8938;8931:16;8894:2;8979:6;8976:1;8972:14;9021:6;9013;9008:3;8995:33;9047:16;;;;9072:15;;;9047:16;8884:227;-1:-1:-1;;8884:227:15:o;9116:274::-;9245:3;9283:6;9277:13;9299:53;9345:6;9340:3;9333:4;9325:6;9321:17;9299:53;:::i;:::-;9368:16;;;;;9253:137;-1:-1:-1;;9253:137:15:o;12875:1256::-;13171:2;13183:21;;;13253:13;;13156:18;;;13275:22;;;13123:4;;13351;;13328:3;13313:19;;;13378:15;;;13123:4;13424:169;13438:6;13435:1;13432:13;13424:169;;;13499:13;;13487:26;;13533:12;;;;13568:15;;;;13460:1;13453:9;13424:169;;;-1:-1:-1;;;13629:19:15;;;13609:18;;;13602:47;13699:13;;13721:21;;;13797:15;;;;13760:12;;;13832:4;13845:215;13861:8;13856:3;13853:17;13845:215;;;13934:15;;-1:-1:-1;;;;;13930:41:15;13916:56;;14033:17;;;;13994:14;;;;13968:1;13880:11;13845:215;;;13849:3;;14077:5;14069:13;;;;;14118:6;14113:2;14102:9;14098:18;14091:34;13132:999;;;;;;:::o;17238:383::-;17387:2;17376:9;17369:21;17350:4;17419:6;17413:13;17462:6;17457:2;17446:9;17442:18;17435:34;17478:66;17537:6;17532:2;17521:9;17517:18;17512:2;17504:6;17500:15;17478:66;:::i;:::-;17605:2;17584:15;-1:-1:-1;;17580:29:15;17565:45;;;;17612:2;17561:54;;17359:262;-1:-1:-1;;17359:262:15:o;23234:356::-;23436:2;23418:21;;;23455:18;;;23448:30;23514:34;23509:2;23494:18;;23487:62;23581:2;23566:18;;23408:182::o;25153:340::-;25355:2;25337:21;;;25394:2;25374:18;;;25367:30;-1:-1:-1;;;25428:2:15;25413:18;;25406:46;25484:2;25469:18;;25327:166::o;27445:346::-;27647:2;27629:21;;;27686:2;27666:18;;;27659:30;-1:-1:-1;;;27720:2:15;27705:18;;27698:52;27782:2;27767:18;;27619:172::o;29768:536::-;29981:6;29970:9;29963:25;30024:6;30019:2;30008:9;30004:18;29997:34;30067:2;30062;30051:9;30047:18;30040:30;30106:6;30101:2;30090:9;30086:18;30079:34;30164:6;30156;30150:3;30139:9;30135:19;30122:49;29944:4;30191:22;;;30215:3;30187:32;;;30180:46;;;;30287:2;30266:15;;;-1:-1:-1;;30262:29:15;30247:45;30243:55;;29953:351;-1:-1:-1;;;29953:351:15:o;30498:128::-;30538:3;30569:1;30565:6;30562:1;30559:13;30556:2;;;30575:18;;:::i;:::-;-1:-1:-1;30611:9:15;;30546:80::o;30631:217::-;30671:1;30697;30687:2;;-1:-1:-1;;;30722:31:15;;30776:4;30773:1;30766:15;30804:4;30729:1;30794:15;30687:2;-1:-1:-1;30833:9:15;;30677:171::o;30853:168::-;30893:7;30959:1;30955;30951:6;30947:14;30944:1;30941:21;30936:1;30929:9;30922:17;30918:45;30915:2;;;30966:18;;:::i;:::-;-1:-1:-1;31006:9:15;;30905:116::o;31026:125::-;31066:4;31094:1;31091;31088:8;31085:2;;;31099:18;;:::i;:::-;-1:-1:-1;31136:9:15;;31075:76::o;31156:258::-;31228:1;31238:113;31252:6;31249:1;31246:13;31238:113;;;31328:11;;;31322:18;31309:11;;;31302:39;31274:2;31267:10;31238:113;;;31369:6;31366:1;31363:13;31360:2;;;-1:-1:-1;;31404:1:15;31386:16;;31379:27;31209:205::o;31419:380::-;31498:1;31494:12;;;;31541;;;31562:2;;31616:4;31608:6;31604:17;31594:27;;31562:2;31669;31661:6;31658:14;31638:18;31635:38;31632:2;;;31715:10;31710:3;31706:20;31703:1;31696:31;31750:4;31747:1;31740:15;31778:4;31775:1;31768:15;31804:135;31843:3;-1:-1:-1;;31864:17:15;;31861:2;;;31884:18;;:::i;:::-;-1:-1:-1;31931:1:15;31920:13;;31851:88::o;31944:127::-;32005:10;32000:3;31996:20;31993:1;31986:31;32036:4;32033:1;32026:15;32060:4;32057:1;32050:15"}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"theSigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"theWrapper\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTokens\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"}],\"name\":\"AssetWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nDays\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"outAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"auxiliaryData\",\"type\":\"bytes\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fractionOfPool\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DESIGNATED_SIGNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WRAPPER_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTokensBalance\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnToWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"theAddress\",\"type\":\"address\"}],\"name\":\"canUnlockDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"depositAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goodUntil\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClipperCommonExchange.Signature\",\"name\":\"theSignature\",\"type\":\"tuple\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goodUntil\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClipperCommonExchange.Signature\",\"name\":\"theSignature\",\"type\":\"tuple\"}],\"name\":\"depositSingleAsset\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getLastBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goodUntil\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClipperCommonExchange.Signature\",\"name\":\"theSignature\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"auxiliaryData\",\"type\":\"bytes\"}],\"name\":\"sellEthForToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goodUntil\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClipperCommonExchange.Signature\",\"name\":\"theSignature\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"auxiliaryData\",\"type\":\"bytes\"}],\"name\":\"sellTokenForEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goodUntil\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClipperCommonExchange.Signature\",\"name\":\"theSignature\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"auxiliaryData\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"tokenAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"depositAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goodUntil\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClipperCommonExchange.Signature\",\"name\":\"theSignature\",\"type\":\"tuple\"}],\"name\":\"transmitAndDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goodUntil\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClipperCommonExchange.Signature\",\"name\":\"theSignature\",\"type\":\"tuple\"}],\"name\":\"transmitAndDepositSingleAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goodUntil\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClipperCommonExchange.Signature\",\"name\":\"theSignature\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"auxiliaryData\",\"type\":\"bytes\"}],\"name\":\"transmitAndSellTokenForEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goodUntil\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClipperCommonExchange.Signature\",\"name\":\"theSignature\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"auxiliaryData\",\"type\":\"bytes\"}],\"name\":\"transmitAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenAmountToBurn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goodUntil\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClipperCommonExchange.Signature\",\"name\":\"theSignature\",\"type\":\"tuple\"}],\"name\":\"withdrawSingleAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ClipperCaravelExchange.sol\":\"ClipperCaravelExchange\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe9e291de7ffe06e66503c6700b1bb84ff6e0989cbb974653628d8994e7c97f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/ClipperCaravelExchange.sol\":{\"content\":\"//SPDX-License-Identifier: Copyright 2021 Shipyard Software, Inc.\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"./interfaces/WrapperContractInterface.sol\\\";\\n\\nimport \\\"./ClipperCommonExchange.sol\\\";\\n\\ncontract ClipperCaravelExchange is ClipperCommonExchange, Ownable {\\n  using SafeCast for uint256;\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  modifier receivedInTime(uint256 goodUntil){\\n    require(block.timestamp <= goodUntil, \\\"Clipper: Expired\\\");\\n    _;\\n  }\\n\\n  constructor(address theSigner, address theWrapper, address[] memory tokens)\\n    ClipperCommonExchange(theSigner, theWrapper, tokens)\\n    {}\\n\\n  function addAsset(address token) external onlyOwner {\\n    assetSet.add(token);\\n    _sync(token);\\n  }\\n\\n  function tokenBalance(address token) internal view returns (uint256) {\\n    (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(IERC20.balanceOf.selector, address(this)));\\n    require(success && data.length >= 32);\\n    return abi.decode(data, (uint256));\\n  }\\n\\n  function _sync(address token) internal override {\\n    setBalance(token, tokenBalance(token));\\n  }\\n\\n  function confirmUnique(address token) internal view returns (uint32 newHash, uint256 currentBalance) {\\n    uint256 _current = lastBalances[token];\\n    currentBalance = uint256(uint224(_current));\\n    uint32 lastHash = uint32(_current >> 224);\\n    newHash = uint32(block.number+uint256(uint160(tx.origin)));\\n    require(newHash != lastHash, \\\"Clipper: Failed tx uniqueness\\\");\\n  }\\n\\n  function makeWriteValue(uint32 newHash, uint256 newBalance) internal pure returns (uint256) {\\n    return (uint256(newHash) << 224) + uint256(newBalance.toUint224());\\n  }\\n\\n  function setBalance(address token, uint256 newBalance) internal {\\n    (uint32 newHash, ) = confirmUnique(token);\\n    lastBalances[token] = makeWriteValue(newHash, newBalance);\\n  }\\n\\n  function increaseBalance(address token, uint256 increaseAmount) internal {\\n    (uint32 newHash, uint256 curBalance) = confirmUnique(token);\\n    lastBalances[token] = makeWriteValue(newHash, curBalance+increaseAmount);\\n  }\\n\\n  function decreaseBalance(address token, uint256 decreaseAmount) internal {\\n    (uint32 newHash, uint256 curBalance) = confirmUnique(token);\\n    lastBalances[token] = makeWriteValue(newHash, curBalance-decreaseAmount);\\n  }\\n\\n  function getLastBalance(address token) public view override returns (uint256) {\\n    return uint256(uint224(lastBalances[token]));\\n  }\\n\\n  // Can deposit raw ETH by attaching as msg.value\\n  function deposit(address sender, uint256[] calldata depositAmounts, uint256 nDays, uint256 poolTokens, uint256 goodUntil, Signature calldata theSignature) public payable override receivedInTime(goodUntil){\\n    if(msg.value > 0){\\n      safeEthSend(WRAPPER_CONTRACT, msg.value);\\n    }\\n    // Make sure the depositor is allowed\\n    require(msg.sender==sender, \\\"Listed sender does not match msg.sender\\\");\\n    bytes32 depositDigest = createDepositDigest(sender, depositAmounts, nDays, poolTokens, goodUntil);\\n    // Revert if it's signed by the wrong address\\n    verifyDigestSignature(depositDigest, theSignature);\\n\\n    // Check deposit amounts, syncing as we go\\n    uint i=0;\\n    uint n = depositAmounts.length;\\n    while(i < n){\\n      uint256 allegedDeposit = depositAmounts[i];\\n      if(allegedDeposit > 0){\\n        address _token = tokenAt(i);\\n        uint256 currentBalance = tokenBalance(_token);\\n        require(currentBalance - getLastBalance(_token) >= allegedDeposit, \\\"Insufficient token deposit\\\");\\n        setBalance(_token, currentBalance);\\n      }\\n      i++;\\n    }\\n    // OK now we're good\\n    _mintOrVesting(sender, nDays, poolTokens);\\n    emit Deposited(sender, poolTokens, nDays);\\n  }\\n\\n  function depositSingleAsset(address sender, address inputToken, uint256 inputAmount, uint256 nDays, uint256 poolTokens, uint256 goodUntil, Signature calldata theSignature) public payable override receivedInTime(goodUntil){\\n    if(msg.value > 0){\\n      safeEthSend(WRAPPER_CONTRACT, msg.value);\\n    }\\n    // Make sure the depositor is allowed\\n    require(msg.sender==sender && isToken(inputToken), \\\"Invalid input\\\");\\n\\n    // Check the signature\\n    bytes32 depositDigest = createSingleDepositDigest(sender, inputToken, inputAmount, nDays, poolTokens, goodUntil);\\n    // Revert if it's signed by the wrong address\\n    verifyDigestSignature(depositDigest, theSignature);\\n\\n    // Check deposit amount and sync balance\\n    uint256 currentBalance = tokenBalance(inputToken);\\n    require(currentBalance - getLastBalance(inputToken) >= inputAmount, \\\"Insufficient token deposit\\\");\\n    // sync the balance\\n    setBalance(inputToken, currentBalance);\\n\\n    // OK now we're good\\n    _mintOrVesting(sender, nDays, poolTokens);\\n    emit Deposited(sender, poolTokens, nDays);\\n  }\\n\\n  /* WITHDRAWAL FUNCTIONALITY */\\n  \\n  /* Single asset withdrawal functionality */\\n\\n  function withdrawSingleAsset(address tokenHolder, uint256 poolTokenAmountToBurn, address assetAddress, uint256 assetAmount, uint256 goodUntil, Signature calldata theSignature) external override receivedInTime(goodUntil) {\\n    /* CHECKS */\\n    require(msg.sender==tokenHolder, \\\"tokenHolder does not match msg.sender\\\");\\n    \\n    bool sendEthBack;\\n    if(assetAddress == CLIPPER_ETH_SIGIL) {\\n      assetAddress = WRAPPER_CONTRACT;\\n      sendEthBack = true;\\n    }\\n\\n    bytes32 withdrawalDigest = createWithdrawalDigest(tokenHolder, poolTokenAmountToBurn, assetAddress, assetAmount, goodUntil);\\n    // Reverts if it's signed by the wrong address\\n    verifyDigestSignature(withdrawalDigest, theSignature);\\n\\n    /* EFFECTS */\\n    // Reverts if pool token balance is insufficient\\n    _burn(msg.sender, poolTokenAmountToBurn);\\n    \\n    // Reverts if the pool's balance of the token is insufficient  \\n    decreaseBalance(assetAddress, assetAmount);\\n\\n    /* INTERACTIONS */\\n    if(sendEthBack) {\\n      WrapperContractInterface(WRAPPER_CONTRACT).withdraw(assetAmount);\\n      safeEthSend(msg.sender, assetAmount);\\n    } else {\\n      IERC20(assetAddress).safeTransfer(msg.sender, assetAmount);\\n    }\\n\\n    emit AssetWithdrawn(tokenHolder, poolTokenAmountToBurn, assetAddress, assetAmount);\\n  }\\n\\n  /* SWAP Functionality */\\n\\n  // Don't need a separate \\\"transmit\\\" function here since it's already payable\\n  // Gas optimized - no balance checks\\n  // Don't need fairOutput checks since exactly inputAmount is wrapped\\n  function sellEthForToken(address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 goodUntil, address destinationAddress, Signature calldata theSignature, bytes calldata auxiliaryData) external override receivedInTime(goodUntil) payable {\\n    /* CHECKS */\\n    require(isToken(outputToken), \\\"Clipper: Invalid token\\\");\\n    // Wrap ETH (as balance or value) as input. This will revert if insufficient balance is provided\\n    safeEthSend(WRAPPER_CONTRACT, inputAmount);\\n    // Revert if it's signed by the wrong address    \\n    bytes32 digest = createSwapDigest(WRAPPER_CONTRACT, outputToken, inputAmount, outputAmount, goodUntil, destinationAddress);\\n    verifyDigestSignature(digest, theSignature);\\n\\n    /* EFFECTS */\\n    increaseBalance(WRAPPER_CONTRACT, inputAmount);\\n    decreaseBalance(outputToken, outputAmount);\\n\\n    /* INTERACTIONS */\\n    IERC20(outputToken).safeTransfer(destinationAddress, outputAmount);\\n\\n    emit Swapped(WRAPPER_CONTRACT, outputToken, destinationAddress, inputAmount, outputAmount, auxiliaryData);\\n  }\\n\\n  // Mostly copied from gas-optimized swap functionality\\n  function sellTokenForEth(address inputToken, uint256 inputAmount, uint256 outputAmount, uint256 goodUntil, address destinationAddress, Signature calldata theSignature, bytes calldata auxiliaryData) external override receivedInTime(goodUntil) {\\n    /* CHECKS */\\n    require(isToken(inputToken), \\\"Clipper: Invalid token\\\");\\n    // Revert if it's signed by the wrong address    \\n    bytes32 digest = createSwapDigest(inputToken, WRAPPER_CONTRACT, inputAmount, outputAmount, goodUntil, destinationAddress);\\n    verifyDigestSignature(digest, theSignature);\\n    \\n    // Check that enough input token has been transmitted\\n    uint256 currentInputBalance = tokenBalance(inputToken);\\n    uint256 actualInput = currentInputBalance - getLastBalance(inputToken);\\n    uint256 fairOutput = calculateFairOutput(inputAmount, actualInput, outputAmount);\\n\\n\\n    /* EFFECTS */\\n    setBalance(inputToken, currentInputBalance);\\n    decreaseBalance(WRAPPER_CONTRACT, fairOutput);\\n\\n    /* INTERACTIONS */\\n    // Unwrap and forward ETH, without sync\\n    WrapperContractInterface(WRAPPER_CONTRACT).withdraw(fairOutput);\\n    safeEthSend(destinationAddress, fairOutput);\\n\\n    emit Swapped(inputToken, WRAPPER_CONTRACT, destinationAddress, actualInput, fairOutput, auxiliaryData);\\n  }\\n\\n  function transmitAndDepositSingleAsset(address inputToken, uint256 inputAmount, uint256 nDays, uint256 poolTokens, uint256 goodUntil, Signature calldata theSignature) external override receivedInTime(goodUntil){\\n    // Make sure the depositor is allowed\\n    require(isToken(inputToken), \\\"Invalid input\\\");\\n\\n    // Will revert if msg.sender has insufficient balance\\n    IERC20(inputToken).safeTransferFrom(msg.sender, address(this), inputAmount);\\n\\n    // Check the signature\\n    bytes32 depositDigest = createSingleDepositDigest(msg.sender, inputToken, inputAmount, nDays, poolTokens, goodUntil);\\n    // Revert if it's signed by the wrong address\\n    verifyDigestSignature(depositDigest, theSignature);\\n\\n    // sync the deposited asset\\n    increaseBalance(inputToken, inputAmount);\\n\\n    // OK now we're good\\n    _mintOrVesting(msg.sender, nDays, poolTokens);\\n    emit Deposited(msg.sender, poolTokens, nDays);\\n  }\\n\\n  // Gas optimized, no balance checks\\n  // No need to check fairOutput since the inputToken pull works\\n  function transmitAndSellTokenForEth(address inputToken, uint256 inputAmount, uint256 outputAmount, uint256 goodUntil, address destinationAddress, Signature calldata theSignature, bytes calldata auxiliaryData) external override receivedInTime(goodUntil) {\\n    /* CHECKS */\\n    require(isToken(inputToken), \\\"Clipper: Invalid token\\\");\\n    // Will revert if msg.sender has insufficient balance\\n    IERC20(inputToken).safeTransferFrom(msg.sender, address(this), inputAmount);\\n    // Revert if it's signed by the wrong address    \\n    bytes32 digest = createSwapDigest(inputToken, WRAPPER_CONTRACT, inputAmount, outputAmount, goodUntil, destinationAddress);\\n    verifyDigestSignature(digest, theSignature);\\n\\n    /* EFFECTS */\\n    increaseBalance(inputToken, inputAmount);\\n    decreaseBalance(WRAPPER_CONTRACT, outputAmount);\\n\\n    /* INTERACTIONS */\\n    // Unwrap and forward ETH, we've already updated the balance\\n    WrapperContractInterface(WRAPPER_CONTRACT).withdraw(outputAmount);\\n    safeEthSend(destinationAddress, outputAmount);\\n\\n    emit Swapped(inputToken, WRAPPER_CONTRACT, destinationAddress, inputAmount, outputAmount, auxiliaryData);\\n  }\\n\\n  // all-in-one transfer from msg.sender to destinationAddress.\\n  // Gas optimized - never checks balances\\n  // No need to check fairOutput since the inputToken pull works\\n  function transmitAndSwap(address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 goodUntil, address destinationAddress, Signature calldata theSignature, bytes calldata auxiliaryData) external override receivedInTime(goodUntil) {\\n    /* CHECKS */\\n    require(isToken(inputToken) && isToken(outputToken), \\\"Clipper: Invalid tokens\\\");\\n    // Will revert if msg.sender has insufficient balance\\n    IERC20(inputToken).safeTransferFrom(msg.sender, address(this), inputAmount);\\n    // Revert if it's signed by the wrong address    \\n    bytes32 digest = createSwapDigest(inputToken, outputToken, inputAmount, outputAmount, goodUntil, destinationAddress);\\n    verifyDigestSignature(digest, theSignature);\\n\\n    /* EFFECTS */\\n    increaseBalance(inputToken, inputAmount);\\n    decreaseBalance(outputToken, outputAmount);\\n\\n    /* INTERACTIONS */\\n    IERC20(outputToken).safeTransfer(destinationAddress, outputAmount);\\n\\n    emit Swapped(inputToken, outputToken, destinationAddress, inputAmount, outputAmount, auxiliaryData);\\n  }\\n\\n  // Gas optimized - single token balance check for input\\n  // output is dead-reckoned and scaled back if necessary\\n  function swap(address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 goodUntil, address destinationAddress, Signature calldata theSignature, bytes calldata auxiliaryData) public override receivedInTime(goodUntil) {\\n    /* CHECKS */\\n    require(isToken(inputToken) && isToken(outputToken), \\\"Clipper: Invalid tokens\\\");\\n\\n    { // Avoid stack too deep\\n    // Revert if it's signed by the wrong address    \\n    bytes32 digest = createSwapDigest(inputToken, outputToken, inputAmount, outputAmount, goodUntil, destinationAddress);\\n    verifyDigestSignature(digest, theSignature);\\n    }\\n\\n    // Get fair output value\\n    uint256 currentInputBalance = tokenBalance(inputToken);\\n    uint256 actualInput = currentInputBalance-getLastBalance(inputToken);    \\n    uint256 fairOutput = calculateFairOutput(inputAmount, actualInput, outputAmount);\\n\\n\\n    /* EFFECTS */\\n    setBalance(inputToken, currentInputBalance);\\n    decreaseBalance(outputToken, fairOutput);\\n\\n    /* INTERACTIONS */\\n    IERC20(outputToken).safeTransfer(destinationAddress, fairOutput);\\n\\n    emit Swapped(inputToken, outputToken, destinationAddress, actualInput, fairOutput, auxiliaryData);\\n  }\\n\\n}\\n\",\"keccak256\":\"0xf2f2e5152654c8a47f0f863e457e19876ada719f53f78c0063556b048b79bdbb\",\"license\":\"Copyright 2021 Shipyard Software\"},\"contracts/ClipperCommonExchange.sol\":{\"content\":\"//SPDX-License-Identifier: Copyright 2021 Shipyard Software, Inc.\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./interfaces/WrapperContractInterface.sol\\\";\\n\\nabstract contract ClipperCommonExchange is ERC20, ReentrancyGuard {\\n\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  struct Signature {\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n\\n  struct Deposit {\\n      uint lockedUntil;\\n      uint256 poolTokenAmount;\\n  }\\n\\n  uint256 constant ONE_IN_TEN_DECIMALS = 1e10;\\n  // Allow for inputs up to 0.5% more than quoted values to have scaled output.\\n  // Inputs higher than this value just get 0.5% more.\\n  uint256 constant MAX_ALLOWED_OVER_TEN_DECIMALS = ONE_IN_TEN_DECIMALS+50*1e6;\\n\\n  // Signer is passed in on construction, hence \\\"immutable\\\"\\n  address immutable public DESIGNATED_SIGNER;\\n  address immutable public WRAPPER_CONTRACT;\\n  // Constant values for EIP-712 signing\\n  bytes32 immutable DOMAIN_SEPARATOR;\\n  string constant VERSION = '1.0.0';\\n  string constant NAME = 'ClipperDirect';\\n\\n  address constant CLIPPER_ETH_SIGIL = address(0);\\n\\n  bytes32 constant EIP712DOMAIN_TYPEHASH = keccak256(\\n     abi.encodePacked(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  );\\n\\n  bytes32 constant OFFERSTRUCT_TYPEHASH = keccak256(\\n    abi.encodePacked(\\\"OfferStruct(address input_token,address output_token,uint256 input_amount,uint256 output_amount,uint256 good_until,address destination_address)\\\")\\n  );\\n\\n  bytes32 constant DEPOSITSTRUCT_TYPEHASH = keccak256(\\n    abi.encodePacked(\\\"DepositStruct(address sender,uint256[] deposit_amounts,uint256 days_locked,uint256 pool_tokens,uint256 good_until)\\\")\\n  );\\n\\n  bytes32 constant SINGLEDEPOSITSTRUCT_TYPEHASH = keccak256(\\n    abi.encodePacked(\\\"SingleDepositStruct(address sender,address token,uint256 amount,uint256 days_locked,uint256 pool_tokens,uint256 good_until)\\\")\\n  );\\n\\n  bytes32 constant WITHDRAWALSTRUCT_TYPEHASH = keccak256(\\n    abi.encodePacked(\\\"WithdrawalStruct(address token_holder,uint256 pool_token_amount_to_burn,address asset_address,uint256 asset_amount,uint256 good_until)\\\")\\n  );\\n\\n  // Assets\\n  // lastBalances: used for \\\"transmit then swap then sync\\\" modality\\n  // assetSet is a set of keys that have lastBalances\\n  mapping(address => uint256) public lastBalances;\\n  EnumerableSet.AddressSet assetSet;\\n\\n\\n  // Allows lookup\\n  mapping(address => Deposit) public vestingDeposits;\\n\\n  // Events\\n  event Swapped(\\n    address indexed inAsset,\\n    address indexed outAsset,\\n    address indexed recipient,\\n    uint256 inAmount,\\n    uint256 outAmount,\\n    bytes auxiliaryData\\n  );\\n\\n  event Deposited(\\n    address indexed depositor,\\n    uint256 poolTokens,\\n    uint256 nDays\\n  );\\n\\n  event Withdrawn(\\n    address indexed withdrawer,\\n    uint256 poolTokens,\\n    uint256 fractionOfPool\\n  );\\n\\n  event AssetWithdrawn(\\n    address indexed withdrawer,\\n    uint256 poolTokens,    \\n    address indexed assetAddress,\\n    uint256 assetAmount\\n  );\\n\\n  // Take in the designated signer address and the token list\\n  constructor(address theSigner, address theWrapper, address[] memory tokens) ERC20(\\\"ClipperDirect Pool Token\\\", \\\"CLPRDRPL\\\") {\\n    DESIGNATED_SIGNER = theSigner;\\n    uint i;\\n    uint n = tokens.length;\\n    while(i < n) {\\n        assetSet.add(tokens[i]);\\n        i++;\\n    }\\n    DOMAIN_SEPARATOR = createDomainSeparator(NAME, VERSION, address(this));\\n    WRAPPER_CONTRACT = theWrapper;\\n  }\\n\\n  // Allows the receipt of ETH directly\\n  receive() external payable {\\n  }\\n\\n  function safeEthSend(address recipient, uint256 howMuch) internal {\\n    (bool success, ) = payable(recipient).call{value: howMuch}(\\\"\\\");\\n    require(success, \\\"Call with value failed\\\");\\n  }\\n\\n  /* TOKEN AND ASSET FUNCTIONS */\\n  function nTokens() public view returns (uint) {\\n    return assetSet.length();\\n  }\\n\\n  function tokenAt(uint i) public view returns (address) {\\n    return assetSet.at(i);\\n  }\\n\\n  function isToken(address token) public view returns (bool) {\\n    return assetSet.contains(token);\\n  }\\n\\n  function _sync(address token) internal virtual;\\n\\n  // Can be overridden as in Caravel\\n  function getLastBalance(address token) public view virtual returns (uint256) {\\n    return lastBalances[token];\\n  }\\n\\n  function allTokensBalance() external view returns (uint256[] memory, address[] memory, uint256){\\n    uint n = nTokens();\\n    uint256[] memory balances = new uint256[](n);\\n    address[] memory tokens = new address[](n);\\n    for (uint i = 0; i < n; i++) {\\n      address token = tokenAt(i);\\n      balances[i] = getLastBalance(token);\\n      tokens[i] = token;\\n    }\\n\\n    return (balances, tokens, totalSupply());\\n  }\\n\\n  // nonReentrant asset transfer\\n  function transferAsset(address token, address recipient, uint256 amount) internal nonReentrant {\\n    IERC20(token).safeTransfer(recipient, amount);\\n    // We never want to transfer an asset without sync'ing\\n    _sync(token);\\n  }\\n\\n  function calculateFairOutput(uint256 statedInput, uint256 actualInput, uint256 statedOutput) internal pure returns (uint256) {\\n    if(actualInput == statedInput) {\\n      return statedOutput;\\n    } else {\\n      uint256 theFraction = (ONE_IN_TEN_DECIMALS*actualInput)/statedInput;\\n      if(theFraction >= MAX_ALLOWED_OVER_TEN_DECIMALS) {\\n        return (MAX_ALLOWED_OVER_TEN_DECIMALS*statedOutput)/ONE_IN_TEN_DECIMALS;\\n      } else {\\n        return (theFraction*statedOutput)/ONE_IN_TEN_DECIMALS;\\n      }\\n    }\\n  }\\n\\n  /* DEPOSIT FUNCTIONALITY */\\n  function canUnlockDeposit(address theAddress) public view returns (bool) {\\n      Deposit storage myDeposit = vestingDeposits[theAddress];\\n      return (myDeposit.poolTokenAmount > 0) && (myDeposit.lockedUntil <= block.timestamp);\\n  }\\n\\n  function unlockDeposit() external returns (uint256 poolTokens) {\\n    require(canUnlockDeposit(msg.sender), \\\"ClipperDirect: Deposit cannot be unlocked\\\");\\n    poolTokens = vestingDeposits[msg.sender].poolTokenAmount;\\n    delete vestingDeposits[msg.sender];\\n\\n    _transfer(address(this), msg.sender, poolTokens);\\n  }\\n\\n  function _mintOrVesting(address sender, uint256 nDays, uint256 poolTokens) internal {\\n    if(nDays==0){\\n      // No vesting period required - mint tokens directly for the user\\n      _mint(sender, poolTokens);\\n    } else {\\n      // Set up a vesting deposit for the sender\\n      _createVestingDeposit(sender, nDays, poolTokens);\\n    }\\n  }\\n\\n  // Mints tokens to this contract to hold for vesting\\n  function _createVestingDeposit(address theAddress, uint256 nDays, uint256 numPoolTokens) internal {\\n    require(nDays > 0, \\\"ClipperDirect: Cannot create vesting deposit without positive vesting period\\\");\\n    require(vestingDeposits[theAddress].poolTokenAmount==0, \\\"ClipperDirect: Depositor already has an active deposit\\\");\\n\\n    Deposit memory myDeposit = Deposit({\\n      lockedUntil: block.timestamp + (nDays * 1 days),\\n      poolTokenAmount: numPoolTokens\\n    });\\n    vestingDeposits[theAddress] = myDeposit;\\n    _mint(address(this), numPoolTokens);\\n  }\\n\\n  function transmitAndDeposit(uint256[] calldata depositAmounts, uint256 nDays, uint256 poolTokens, uint256 goodUntil, Signature calldata theSignature) external {\\n    uint i=0;\\n    uint n = depositAmounts.length;\\n    while(i < n){\\n      uint256 transferAmount = depositAmounts[i];\\n      if(transferAmount > 0){\\n        IERC20(tokenAt(i)).safeTransferFrom(msg.sender, address(this), transferAmount);\\n      }\\n      i++;\\n    }\\n    deposit(msg.sender, depositAmounts, nDays, poolTokens, goodUntil, theSignature);\\n  }\\n\\n  function transmitAndDepositSingleAsset(address inputToken, uint256 inputAmount, uint256 nDays, uint256 poolTokens, uint256 goodUntil, Signature calldata theSignature) external virtual;\\n\\n  function deposit(address sender, uint256[] calldata depositAmounts, uint256 nDays, uint256 poolTokens, uint256 goodUntil, Signature calldata theSignature) public payable virtual;\\n\\n  function depositSingleAsset(address sender, address inputToken, uint256 inputAmount, uint256 nDays, uint256 poolTokens, uint256 goodUntil, Signature calldata theSignature) public payable virtual;\\n\\n  /* WITHDRAWAL FUNCTIONALITY */\\n  function _proportionalWithdrawal(uint256 myFraction) internal {\\n    uint256 toTransfer;\\n\\n    uint i;\\n    uint n = nTokens();\\n    while(i < n) {\\n        address theToken = tokenAt(i);\\n        toTransfer = (myFraction*getLastBalance(theToken)) / ONE_IN_TEN_DECIMALS;\\n        // syncs done automatically on transfer\\n        transferAsset(theToken, msg.sender, toTransfer);\\n        i++;\\n    }\\n  }\\n\\n  function burnToWithdraw(uint256 amount) external {\\n    // Capture the fraction first, before burning\\n    uint256 theFractionBaseTen = (ONE_IN_TEN_DECIMALS*amount)/totalSupply();\\n    \\n    // Reverts if balance is insufficient\\n    _burn(msg.sender, amount);\\n\\n    _proportionalWithdrawal(theFractionBaseTen);\\n    emit Withdrawn(msg.sender, amount, theFractionBaseTen);\\n  }\\n\\n  function withdrawSingleAsset(address tokenHolder, uint256 poolTokenAmountToBurn, address assetAddress, uint256 assetAmount, uint256 goodUntil, Signature calldata theSignature) external virtual;\\n\\n  /* SWAP Functionality: Virtual */\\n  function sellEthForToken(address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 goodUntil, address destinationAddress, Signature calldata theSignature, bytes calldata auxiliaryData) external payable virtual;\\n  function sellTokenForEth(address inputToken, uint256 inputAmount, uint256 outputAmount, uint256 goodUntil, address destinationAddress, Signature calldata theSignature, bytes calldata auxiliaryData) external virtual;\\n  function transmitAndSellTokenForEth(address inputToken, uint256 inputAmount, uint256 outputAmount, uint256 goodUntil, address destinationAddress, Signature calldata theSignature, bytes calldata auxiliaryData) external virtual;\\n  function transmitAndSwap(address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 goodUntil, address destinationAddress, Signature calldata theSignature, bytes calldata auxiliaryData) external virtual;\\n  function swap(address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 goodUntil, address destinationAddress, Signature calldata theSignature, bytes calldata auxiliaryData) public virtual;\\n\\n  /* SIGNING Functionality */\\n  function createDomainSeparator(string memory name, string memory version, address theSigner) internal view returns (bytes32) {\\n    return keccak256(abi.encode(\\n        EIP712DOMAIN_TYPEHASH,\\n        keccak256(abi.encodePacked(name)),\\n        keccak256(abi.encodePacked(version)),\\n        uint256(block.chainid),\\n        theSigner\\n      ));\\n  }\\n\\n  function hashInputOffer(address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 goodUntil, address destinationAddress) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(\\n            OFFERSTRUCT_TYPEHASH,\\n            inputToken,\\n            outputToken,\\n            inputAmount,\\n            outputAmount,\\n            goodUntil,\\n            destinationAddress\\n        ));\\n  }\\n\\n  function hashDeposit(address sender, uint256[] calldata depositAmounts, uint256 daysLocked, uint256 poolTokens, uint256 goodUntil) internal pure returns (bytes32) {\\n    bytes32 depositAmountsHash = keccak256(abi.encodePacked(depositAmounts));\\n    return keccak256(abi.encode(\\n        DEPOSITSTRUCT_TYPEHASH,\\n        sender,\\n        depositAmountsHash,\\n        daysLocked,\\n        poolTokens,\\n        goodUntil\\n      ));\\n  }\\n\\n  function hashSingleDeposit(address sender, address inputToken, uint256 inputAmount, uint256 daysLocked, uint256 poolTokens, uint256 goodUntil) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(\\n        SINGLEDEPOSITSTRUCT_TYPEHASH,\\n        sender,\\n        inputToken,\\n        inputAmount,\\n        daysLocked,\\n        poolTokens,\\n        goodUntil\\n      ));\\n  }\\n\\n  function hashWithdrawal(address tokenHolder, uint256 poolTokenAmountToBurn, address assetAddress, uint256 assetAmount,\\n                    uint256 goodUntil) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(\\n        WITHDRAWALSTRUCT_TYPEHASH,\\n        tokenHolder,\\n        poolTokenAmountToBurn,\\n        assetAddress,\\n        assetAmount,\\n        goodUntil\\n      ));\\n  }\\n\\n  function createSwapDigest(address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 goodUntil, address destinationAddress) internal view returns (bytes32 digest){\\n    bytes32 hashedInput = hashInputOffer(inputToken, outputToken, inputAmount, outputAmount, goodUntil, destinationAddress);    \\n    digest = ECDSA.toTypedDataHash(DOMAIN_SEPARATOR, hashedInput);\\n  }\\n\\n  function createDepositDigest(address sender, uint256[] calldata depositAmounts, uint256 nDays, uint256 poolTokens, uint256 goodUntil) internal view returns (bytes32 depositDigest){\\n    bytes32 hashedInput = hashDeposit(sender, depositAmounts, nDays, poolTokens, goodUntil);    \\n    depositDigest = ECDSA.toTypedDataHash(DOMAIN_SEPARATOR, hashedInput);\\n  }\\n\\n  function createSingleDepositDigest(address sender, address inputToken, uint256 inputAmount, uint256 nDays, uint256 poolTokens, uint256 goodUntil) internal view returns (bytes32 depositDigest){\\n    bytes32 hashedInput = hashSingleDeposit(sender, inputToken, inputAmount, nDays, poolTokens, goodUntil);\\n    depositDigest = ECDSA.toTypedDataHash(DOMAIN_SEPARATOR, hashedInput);\\n  }\\n\\n  function createWithdrawalDigest(address tokenHolder, uint256 poolTokenAmountToBurn, address assetAddress, uint256 assetAmount,\\n                    uint256 goodUntil) internal view returns (bytes32 withdrawalDigest){\\n    bytes32 hashedInput = hashWithdrawal(tokenHolder, poolTokenAmountToBurn, assetAddress, assetAmount, goodUntil);\\n    withdrawalDigest = ECDSA.toTypedDataHash(DOMAIN_SEPARATOR, hashedInput);\\n  }\\n\\n  function verifyDigestSignature(bytes32 theDigest, Signature calldata theSignature) internal view {\\n    address signingAddress = ecrecover(theDigest, theSignature.v, theSignature.r, theSignature.s);\\n\\n    require(signingAddress==DESIGNATED_SIGNER, \\\"Message signed by incorrect address\\\");\\n  }\\n\\n}\\n\",\"keccak256\":\"0x18dcd19b9a1ee0dd44b98dbfc70719899d1f8683d2a628f6a77e7bc922769586\",\"license\":\"Copyright 2021 Shipyard Software\"},\"contracts/interfaces/WrapperContractInterface.sol\":{\"content\":\"//SPDX-License-Identifier: Copyright 2021 Shipyard Software, Inc.\\npragma solidity ^0.8.0;\\n\\ninterface WrapperContractInterface {\\n  function withdraw(uint256 amount) external;\\n}\",\"keccak256\":\"0x35d3a42a3bb24d649586258c5958a73a8d2f66f0450f8e0fa60f71996c47b024\",\"license\":\"Copyright 2021 Shipyard Software\"}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/ClipperCommonExchange.sol":{"ClipperCommonExchange":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"withdrawer","type":"address"},{"indexed":false,"internalType":"uint256","name":"poolTokens","type":"uint256"},{"indexed":true,"internalType":"address","name":"assetAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"assetAmount","type":"uint256"}],"name":"AssetWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"depositor","type":"address"},{"indexed":false,"internalType":"uint256","name":"poolTokens","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"nDays","type":"uint256"}],"name":"Deposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"inAsset","type":"address"},{"indexed":true,"internalType":"address","name":"outAsset","type":"address"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"inAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"outAmount","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"auxiliaryData","type":"bytes"}],"name":"Swapped","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"withdrawer","type":"address"},{"indexed":false,"internalType":"uint256","name":"poolTokens","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"fractionOfPool","type":"uint256"}],"name":"Withdrawn","type":"event"},{"inputs":[],"name":"DESIGNATED_SIGNER","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WRAPPER_CONTRACT","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"allTokensBalance","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"address[]","name":"","type":"address[]"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burnToWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"theAddress","type":"address"}],"name":"canUnlockDeposit","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256[]","name":"depositAmounts","type":"uint256[]"},{"internalType":"uint256","name":"nDays","type":"uint256"},{"internalType":"uint256","name":"poolTokens","type":"uint256"},{"internalType":"uint256","name":"goodUntil","type":"uint256"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct ClipperCommonExchange.Signature","name":"theSignature","type":"tuple"}],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"inputToken","type":"address"},{"internalType":"uint256","name":"inputAmount","type":"uint256"},{"internalType":"uint256","name":"nDays","type":"uint256"},{"internalType":"uint256","name":"poolTokens","type":"uint256"},{"internalType":"uint256","name":"goodUntil","type":"uint256"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct ClipperCommonExchange.Signature","name":"theSignature","type":"tuple"}],"name":"depositSingleAsset","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"getLastBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"isToken","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"lastBalances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nTokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"outputToken","type":"address"},{"internalType":"uint256","name":"inputAmount","type":"uint256"},{"internalType":"uint256","name":"outputAmount","type":"uint256"},{"internalType":"uint256","name":"goodUntil","type":"uint256"},{"internalType":"address","name":"destinationAddress","type":"address"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct ClipperCommonExchange.Signature","name":"theSignature","type":"tuple"},{"internalType":"bytes","name":"auxiliaryData","type":"bytes"}],"name":"sellEthForToken","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"inputToken","type":"address"},{"internalType":"uint256","name":"inputAmount","type":"uint256"},{"internalType":"uint256","name":"outputAmount","type":"uint256"},{"internalType":"uint256","name":"goodUntil","type":"uint256"},{"internalType":"address","name":"destinationAddress","type":"address"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct ClipperCommonExchange.Signature","name":"theSignature","type":"tuple"},{"internalType":"bytes","name":"auxiliaryData","type":"bytes"}],"name":"sellTokenForEth","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"inputToken","type":"address"},{"internalType":"address","name":"outputToken","type":"address"},{"internalType":"uint256","name":"inputAmount","type":"uint256"},{"internalType":"uint256","name":"outputAmount","type":"uint256"},{"internalType":"uint256","name":"goodUntil","type":"uint256"},{"internalType":"address","name":"destinationAddress","type":"address"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct ClipperCommonExchange.Signature","name":"theSignature","type":"tuple"},{"internalType":"bytes","name":"auxiliaryData","type":"bytes"}],"name":"swap","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"i","type":"uint256"}],"name":"tokenAt","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"depositAmounts","type":"uint256[]"},{"internalType":"uint256","name":"nDays","type":"uint256"},{"internalType":"uint256","name":"poolTokens","type":"uint256"},{"internalType":"uint256","name":"goodUntil","type":"uint256"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct ClipperCommonExchange.Signature","name":"theSignature","type":"tuple"}],"name":"transmitAndDeposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"inputToken","type":"address"},{"internalType":"uint256","name":"inputAmount","type":"uint256"},{"internalType":"uint256","name":"nDays","type":"uint256"},{"internalType":"uint256","name":"poolTokens","type":"uint256"},{"internalType":"uint256","name":"goodUntil","type":"uint256"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct ClipperCommonExchange.Signature","name":"theSignature","type":"tuple"}],"name":"transmitAndDepositSingleAsset","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"inputToken","type":"address"},{"internalType":"uint256","name":"inputAmount","type":"uint256"},{"internalType":"uint256","name":"outputAmount","type":"uint256"},{"internalType":"uint256","name":"goodUntil","type":"uint256"},{"internalType":"address","name":"destinationAddress","type":"address"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct ClipperCommonExchange.Signature","name":"theSignature","type":"tuple"},{"internalType":"bytes","name":"auxiliaryData","type":"bytes"}],"name":"transmitAndSellTokenForEth","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"inputToken","type":"address"},{"internalType":"address","name":"outputToken","type":"address"},{"internalType":"uint256","name":"inputAmount","type":"uint256"},{"internalType":"uint256","name":"outputAmount","type":"uint256"},{"internalType":"uint256","name":"goodUntil","type":"uint256"},{"internalType":"address","name":"destinationAddress","type":"address"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct ClipperCommonExchange.Signature","name":"theSignature","type":"tuple"},{"internalType":"bytes","name":"auxiliaryData","type":"bytes"}],"name":"transmitAndSwap","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unlockDeposit","outputs":[{"internalType":"uint256","name":"poolTokens","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"vestingDeposits","outputs":[{"internalType":"uint256","name":"lockedUntil","type":"uint256"},{"internalType":"uint256","name":"poolTokenAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenHolder","type":"address"},{"internalType":"uint256","name":"poolTokenAmountToBurn","type":"uint256"},{"internalType":"address","name":"assetAddress","type":"address"},{"internalType":"uint256","name":"assetAmount","type":"uint256"},{"internalType":"uint256","name":"goodUntil","type":"uint256"},{"components":[{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"internalType":"struct ClipperCommonExchange.Signature","name":"theSignature","type":"tuple"}],"name":"withdrawSingleAsset","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."}},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTokens\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"}],\"name\":\"AssetWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nDays\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"outAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"auxiliaryData\",\"type\":\"bytes\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fractionOfPool\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DESIGNATED_SIGNER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WRAPPER_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTokensBalance\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnToWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"theAddress\",\"type\":\"address\"}],\"name\":\"canUnlockDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"depositAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goodUntil\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClipperCommonExchange.Signature\",\"name\":\"theSignature\",\"type\":\"tuple\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goodUntil\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClipperCommonExchange.Signature\",\"name\":\"theSignature\",\"type\":\"tuple\"}],\"name\":\"depositSingleAsset\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getLastBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goodUntil\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClipperCommonExchange.Signature\",\"name\":\"theSignature\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"auxiliaryData\",\"type\":\"bytes\"}],\"name\":\"sellEthForToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goodUntil\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClipperCommonExchange.Signature\",\"name\":\"theSignature\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"auxiliaryData\",\"type\":\"bytes\"}],\"name\":\"sellTokenForEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goodUntil\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClipperCommonExchange.Signature\",\"name\":\"theSignature\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"auxiliaryData\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"tokenAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"depositAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goodUntil\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClipperCommonExchange.Signature\",\"name\":\"theSignature\",\"type\":\"tuple\"}],\"name\":\"transmitAndDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nDays\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goodUntil\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClipperCommonExchange.Signature\",\"name\":\"theSignature\",\"type\":\"tuple\"}],\"name\":\"transmitAndDepositSingleAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goodUntil\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClipperCommonExchange.Signature\",\"name\":\"theSignature\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"auxiliaryData\",\"type\":\"bytes\"}],\"name\":\"transmitAndSellTokenForEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goodUntil\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"destinationAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClipperCommonExchange.Signature\",\"name\":\"theSignature\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"auxiliaryData\",\"type\":\"bytes\"}],\"name\":\"transmitAndSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenAmountToBurn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"goodUntil\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct ClipperCommonExchange.Signature\",\"name\":\"theSignature\",\"type\":\"tuple\"}],\"name\":\"withdrawSingleAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ClipperCommonExchange.sol\":\"ClipperCommonExchange\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe9e291de7ffe06e66503c6700b1bb84ff6e0989cbb974653628d8994e7c97f03\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/ClipperCommonExchange.sol\":{\"content\":\"//SPDX-License-Identifier: Copyright 2021 Shipyard Software, Inc.\\npragma solidity ^0.8.0;\\n\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"./interfaces/WrapperContractInterface.sol\\\";\\n\\nabstract contract ClipperCommonExchange is ERC20, ReentrancyGuard {\\n\\n  using SafeERC20 for IERC20;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  struct Signature {\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n\\n  struct Deposit {\\n      uint lockedUntil;\\n      uint256 poolTokenAmount;\\n  }\\n\\n  uint256 constant ONE_IN_TEN_DECIMALS = 1e10;\\n  // Allow for inputs up to 0.5% more than quoted values to have scaled output.\\n  // Inputs higher than this value just get 0.5% more.\\n  uint256 constant MAX_ALLOWED_OVER_TEN_DECIMALS = ONE_IN_TEN_DECIMALS+50*1e6;\\n\\n  // Signer is passed in on construction, hence \\\"immutable\\\"\\n  address immutable public DESIGNATED_SIGNER;\\n  address immutable public WRAPPER_CONTRACT;\\n  // Constant values for EIP-712 signing\\n  bytes32 immutable DOMAIN_SEPARATOR;\\n  string constant VERSION = '1.0.0';\\n  string constant NAME = 'ClipperDirect';\\n\\n  address constant CLIPPER_ETH_SIGIL = address(0);\\n\\n  bytes32 constant EIP712DOMAIN_TYPEHASH = keccak256(\\n     abi.encodePacked(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n  );\\n\\n  bytes32 constant OFFERSTRUCT_TYPEHASH = keccak256(\\n    abi.encodePacked(\\\"OfferStruct(address input_token,address output_token,uint256 input_amount,uint256 output_amount,uint256 good_until,address destination_address)\\\")\\n  );\\n\\n  bytes32 constant DEPOSITSTRUCT_TYPEHASH = keccak256(\\n    abi.encodePacked(\\\"DepositStruct(address sender,uint256[] deposit_amounts,uint256 days_locked,uint256 pool_tokens,uint256 good_until)\\\")\\n  );\\n\\n  bytes32 constant SINGLEDEPOSITSTRUCT_TYPEHASH = keccak256(\\n    abi.encodePacked(\\\"SingleDepositStruct(address sender,address token,uint256 amount,uint256 days_locked,uint256 pool_tokens,uint256 good_until)\\\")\\n  );\\n\\n  bytes32 constant WITHDRAWALSTRUCT_TYPEHASH = keccak256(\\n    abi.encodePacked(\\\"WithdrawalStruct(address token_holder,uint256 pool_token_amount_to_burn,address asset_address,uint256 asset_amount,uint256 good_until)\\\")\\n  );\\n\\n  // Assets\\n  // lastBalances: used for \\\"transmit then swap then sync\\\" modality\\n  // assetSet is a set of keys that have lastBalances\\n  mapping(address => uint256) public lastBalances;\\n  EnumerableSet.AddressSet assetSet;\\n\\n\\n  // Allows lookup\\n  mapping(address => Deposit) public vestingDeposits;\\n\\n  // Events\\n  event Swapped(\\n    address indexed inAsset,\\n    address indexed outAsset,\\n    address indexed recipient,\\n    uint256 inAmount,\\n    uint256 outAmount,\\n    bytes auxiliaryData\\n  );\\n\\n  event Deposited(\\n    address indexed depositor,\\n    uint256 poolTokens,\\n    uint256 nDays\\n  );\\n\\n  event Withdrawn(\\n    address indexed withdrawer,\\n    uint256 poolTokens,\\n    uint256 fractionOfPool\\n  );\\n\\n  event AssetWithdrawn(\\n    address indexed withdrawer,\\n    uint256 poolTokens,    \\n    address indexed assetAddress,\\n    uint256 assetAmount\\n  );\\n\\n  // Take in the designated signer address and the token list\\n  constructor(address theSigner, address theWrapper, address[] memory tokens) ERC20(\\\"ClipperDirect Pool Token\\\", \\\"CLPRDRPL\\\") {\\n    DESIGNATED_SIGNER = theSigner;\\n    uint i;\\n    uint n = tokens.length;\\n    while(i < n) {\\n        assetSet.add(tokens[i]);\\n        i++;\\n    }\\n    DOMAIN_SEPARATOR = createDomainSeparator(NAME, VERSION, address(this));\\n    WRAPPER_CONTRACT = theWrapper;\\n  }\\n\\n  // Allows the receipt of ETH directly\\n  receive() external payable {\\n  }\\n\\n  function safeEthSend(address recipient, uint256 howMuch) internal {\\n    (bool success, ) = payable(recipient).call{value: howMuch}(\\\"\\\");\\n    require(success, \\\"Call with value failed\\\");\\n  }\\n\\n  /* TOKEN AND ASSET FUNCTIONS */\\n  function nTokens() public view returns (uint) {\\n    return assetSet.length();\\n  }\\n\\n  function tokenAt(uint i) public view returns (address) {\\n    return assetSet.at(i);\\n  }\\n\\n  function isToken(address token) public view returns (bool) {\\n    return assetSet.contains(token);\\n  }\\n\\n  function _sync(address token) internal virtual;\\n\\n  // Can be overridden as in Caravel\\n  function getLastBalance(address token) public view virtual returns (uint256) {\\n    return lastBalances[token];\\n  }\\n\\n  function allTokensBalance() external view returns (uint256[] memory, address[] memory, uint256){\\n    uint n = nTokens();\\n    uint256[] memory balances = new uint256[](n);\\n    address[] memory tokens = new address[](n);\\n    for (uint i = 0; i < n; i++) {\\n      address token = tokenAt(i);\\n      balances[i] = getLastBalance(token);\\n      tokens[i] = token;\\n    }\\n\\n    return (balances, tokens, totalSupply());\\n  }\\n\\n  // nonReentrant asset transfer\\n  function transferAsset(address token, address recipient, uint256 amount) internal nonReentrant {\\n    IERC20(token).safeTransfer(recipient, amount);\\n    // We never want to transfer an asset without sync'ing\\n    _sync(token);\\n  }\\n\\n  function calculateFairOutput(uint256 statedInput, uint256 actualInput, uint256 statedOutput) internal pure returns (uint256) {\\n    if(actualInput == statedInput) {\\n      return statedOutput;\\n    } else {\\n      uint256 theFraction = (ONE_IN_TEN_DECIMALS*actualInput)/statedInput;\\n      if(theFraction >= MAX_ALLOWED_OVER_TEN_DECIMALS) {\\n        return (MAX_ALLOWED_OVER_TEN_DECIMALS*statedOutput)/ONE_IN_TEN_DECIMALS;\\n      } else {\\n        return (theFraction*statedOutput)/ONE_IN_TEN_DECIMALS;\\n      }\\n    }\\n  }\\n\\n  /* DEPOSIT FUNCTIONALITY */\\n  function canUnlockDeposit(address theAddress) public view returns (bool) {\\n      Deposit storage myDeposit = vestingDeposits[theAddress];\\n      return (myDeposit.poolTokenAmount > 0) && (myDeposit.lockedUntil <= block.timestamp);\\n  }\\n\\n  function unlockDeposit() external returns (uint256 poolTokens) {\\n    require(canUnlockDeposit(msg.sender), \\\"ClipperDirect: Deposit cannot be unlocked\\\");\\n    poolTokens = vestingDeposits[msg.sender].poolTokenAmount;\\n    delete vestingDeposits[msg.sender];\\n\\n    _transfer(address(this), msg.sender, poolTokens);\\n  }\\n\\n  function _mintOrVesting(address sender, uint256 nDays, uint256 poolTokens) internal {\\n    if(nDays==0){\\n      // No vesting period required - mint tokens directly for the user\\n      _mint(sender, poolTokens);\\n    } else {\\n      // Set up a vesting deposit for the sender\\n      _createVestingDeposit(sender, nDays, poolTokens);\\n    }\\n  }\\n\\n  // Mints tokens to this contract to hold for vesting\\n  function _createVestingDeposit(address theAddress, uint256 nDays, uint256 numPoolTokens) internal {\\n    require(nDays > 0, \\\"ClipperDirect: Cannot create vesting deposit without positive vesting period\\\");\\n    require(vestingDeposits[theAddress].poolTokenAmount==0, \\\"ClipperDirect: Depositor already has an active deposit\\\");\\n\\n    Deposit memory myDeposit = Deposit({\\n      lockedUntil: block.timestamp + (nDays * 1 days),\\n      poolTokenAmount: numPoolTokens\\n    });\\n    vestingDeposits[theAddress] = myDeposit;\\n    _mint(address(this), numPoolTokens);\\n  }\\n\\n  function transmitAndDeposit(uint256[] calldata depositAmounts, uint256 nDays, uint256 poolTokens, uint256 goodUntil, Signature calldata theSignature) external {\\n    uint i=0;\\n    uint n = depositAmounts.length;\\n    while(i < n){\\n      uint256 transferAmount = depositAmounts[i];\\n      if(transferAmount > 0){\\n        IERC20(tokenAt(i)).safeTransferFrom(msg.sender, address(this), transferAmount);\\n      }\\n      i++;\\n    }\\n    deposit(msg.sender, depositAmounts, nDays, poolTokens, goodUntil, theSignature);\\n  }\\n\\n  function transmitAndDepositSingleAsset(address inputToken, uint256 inputAmount, uint256 nDays, uint256 poolTokens, uint256 goodUntil, Signature calldata theSignature) external virtual;\\n\\n  function deposit(address sender, uint256[] calldata depositAmounts, uint256 nDays, uint256 poolTokens, uint256 goodUntil, Signature calldata theSignature) public payable virtual;\\n\\n  function depositSingleAsset(address sender, address inputToken, uint256 inputAmount, uint256 nDays, uint256 poolTokens, uint256 goodUntil, Signature calldata theSignature) public payable virtual;\\n\\n  /* WITHDRAWAL FUNCTIONALITY */\\n  function _proportionalWithdrawal(uint256 myFraction) internal {\\n    uint256 toTransfer;\\n\\n    uint i;\\n    uint n = nTokens();\\n    while(i < n) {\\n        address theToken = tokenAt(i);\\n        toTransfer = (myFraction*getLastBalance(theToken)) / ONE_IN_TEN_DECIMALS;\\n        // syncs done automatically on transfer\\n        transferAsset(theToken, msg.sender, toTransfer);\\n        i++;\\n    }\\n  }\\n\\n  function burnToWithdraw(uint256 amount) external {\\n    // Capture the fraction first, before burning\\n    uint256 theFractionBaseTen = (ONE_IN_TEN_DECIMALS*amount)/totalSupply();\\n    \\n    // Reverts if balance is insufficient\\n    _burn(msg.sender, amount);\\n\\n    _proportionalWithdrawal(theFractionBaseTen);\\n    emit Withdrawn(msg.sender, amount, theFractionBaseTen);\\n  }\\n\\n  function withdrawSingleAsset(address tokenHolder, uint256 poolTokenAmountToBurn, address assetAddress, uint256 assetAmount, uint256 goodUntil, Signature calldata theSignature) external virtual;\\n\\n  /* SWAP Functionality: Virtual */\\n  function sellEthForToken(address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 goodUntil, address destinationAddress, Signature calldata theSignature, bytes calldata auxiliaryData) external payable virtual;\\n  function sellTokenForEth(address inputToken, uint256 inputAmount, uint256 outputAmount, uint256 goodUntil, address destinationAddress, Signature calldata theSignature, bytes calldata auxiliaryData) external virtual;\\n  function transmitAndSellTokenForEth(address inputToken, uint256 inputAmount, uint256 outputAmount, uint256 goodUntil, address destinationAddress, Signature calldata theSignature, bytes calldata auxiliaryData) external virtual;\\n  function transmitAndSwap(address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 goodUntil, address destinationAddress, Signature calldata theSignature, bytes calldata auxiliaryData) external virtual;\\n  function swap(address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 goodUntil, address destinationAddress, Signature calldata theSignature, bytes calldata auxiliaryData) public virtual;\\n\\n  /* SIGNING Functionality */\\n  function createDomainSeparator(string memory name, string memory version, address theSigner) internal view returns (bytes32) {\\n    return keccak256(abi.encode(\\n        EIP712DOMAIN_TYPEHASH,\\n        keccak256(abi.encodePacked(name)),\\n        keccak256(abi.encodePacked(version)),\\n        uint256(block.chainid),\\n        theSigner\\n      ));\\n  }\\n\\n  function hashInputOffer(address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 goodUntil, address destinationAddress) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(\\n            OFFERSTRUCT_TYPEHASH,\\n            inputToken,\\n            outputToken,\\n            inputAmount,\\n            outputAmount,\\n            goodUntil,\\n            destinationAddress\\n        ));\\n  }\\n\\n  function hashDeposit(address sender, uint256[] calldata depositAmounts, uint256 daysLocked, uint256 poolTokens, uint256 goodUntil) internal pure returns (bytes32) {\\n    bytes32 depositAmountsHash = keccak256(abi.encodePacked(depositAmounts));\\n    return keccak256(abi.encode(\\n        DEPOSITSTRUCT_TYPEHASH,\\n        sender,\\n        depositAmountsHash,\\n        daysLocked,\\n        poolTokens,\\n        goodUntil\\n      ));\\n  }\\n\\n  function hashSingleDeposit(address sender, address inputToken, uint256 inputAmount, uint256 daysLocked, uint256 poolTokens, uint256 goodUntil) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(\\n        SINGLEDEPOSITSTRUCT_TYPEHASH,\\n        sender,\\n        inputToken,\\n        inputAmount,\\n        daysLocked,\\n        poolTokens,\\n        goodUntil\\n      ));\\n  }\\n\\n  function hashWithdrawal(address tokenHolder, uint256 poolTokenAmountToBurn, address assetAddress, uint256 assetAmount,\\n                    uint256 goodUntil) internal pure returns (bytes32) {\\n    return keccak256(abi.encode(\\n        WITHDRAWALSTRUCT_TYPEHASH,\\n        tokenHolder,\\n        poolTokenAmountToBurn,\\n        assetAddress,\\n        assetAmount,\\n        goodUntil\\n      ));\\n  }\\n\\n  function createSwapDigest(address inputToken, address outputToken, uint256 inputAmount, uint256 outputAmount, uint256 goodUntil, address destinationAddress) internal view returns (bytes32 digest){\\n    bytes32 hashedInput = hashInputOffer(inputToken, outputToken, inputAmount, outputAmount, goodUntil, destinationAddress);    \\n    digest = ECDSA.toTypedDataHash(DOMAIN_SEPARATOR, hashedInput);\\n  }\\n\\n  function createDepositDigest(address sender, uint256[] calldata depositAmounts, uint256 nDays, uint256 poolTokens, uint256 goodUntil) internal view returns (bytes32 depositDigest){\\n    bytes32 hashedInput = hashDeposit(sender, depositAmounts, nDays, poolTokens, goodUntil);    \\n    depositDigest = ECDSA.toTypedDataHash(DOMAIN_SEPARATOR, hashedInput);\\n  }\\n\\n  function createSingleDepositDigest(address sender, address inputToken, uint256 inputAmount, uint256 nDays, uint256 poolTokens, uint256 goodUntil) internal view returns (bytes32 depositDigest){\\n    bytes32 hashedInput = hashSingleDeposit(sender, inputToken, inputAmount, nDays, poolTokens, goodUntil);\\n    depositDigest = ECDSA.toTypedDataHash(DOMAIN_SEPARATOR, hashedInput);\\n  }\\n\\n  function createWithdrawalDigest(address tokenHolder, uint256 poolTokenAmountToBurn, address assetAddress, uint256 assetAmount,\\n                    uint256 goodUntil) internal view returns (bytes32 withdrawalDigest){\\n    bytes32 hashedInput = hashWithdrawal(tokenHolder, poolTokenAmountToBurn, assetAddress, assetAmount, goodUntil);\\n    withdrawalDigest = ECDSA.toTypedDataHash(DOMAIN_SEPARATOR, hashedInput);\\n  }\\n\\n  function verifyDigestSignature(bytes32 theDigest, Signature calldata theSignature) internal view {\\n    address signingAddress = ecrecover(theDigest, theSignature.v, theSignature.r, theSignature.s);\\n\\n    require(signingAddress==DESIGNATED_SIGNER, \\\"Message signed by incorrect address\\\");\\n  }\\n\\n}\\n\",\"keccak256\":\"0x18dcd19b9a1ee0dd44b98dbfc70719899d1f8683d2a628f6a77e7bc922769586\",\"license\":\"Copyright 2021 Shipyard Software\"},\"contracts/interfaces/WrapperContractInterface.sol\":{\"content\":\"//SPDX-License-Identifier: Copyright 2021 Shipyard Software, Inc.\\npragma solidity ^0.8.0;\\n\\ninterface WrapperContractInterface {\\n  function withdraw(uint256 amount) external;\\n}\",\"keccak256\":\"0x35d3a42a3bb24d649586258c5958a73a8d2f66f0450f8e0fa60f71996c47b024\",\"license\":\"Copyright 2021 Shipyard Software\"}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/interfaces/WrapperContractInterface.sol":{"WrapperContractInterface":{"abi":[{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""}},"metadata":"{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/WrapperContractInterface.sol\":\"WrapperContractInterface\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/WrapperContractInterface.sol\":{\"content\":\"//SPDX-License-Identifier: Copyright 2021 Shipyard Software, Inc.\\npragma solidity ^0.8.0;\\n\\ninterface WrapperContractInterface {\\n  function withdraw(uint256 amount) external;\\n}\",\"keccak256\":\"0x35d3a42a3bb24d649586258c5958a73a8d2f66f0450f8e0fa60f71996c47b024\",\"license\":\"Copyright 2021 Shipyard Software\"}},\"version\":1}","userdoc":{"kind":"user","methods":{},"version":1}}}},"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"id":0},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"id":1},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"id":2},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"id":3},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"id":4},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"id":5},"@openzeppelin/contracts/utils/Address.sol":{"id":6},"@openzeppelin/contracts/utils/Context.sol":{"id":7},"@openzeppelin/contracts/utils/Strings.sol":{"id":8},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"id":9},"@openzeppelin/contracts/utils/math/SafeCast.sol":{"id":10},"@openzeppelin/contracts/utils/structs/EnumerableSet.sol":{"id":11},"contracts/ClipperCaravelExchange.sol":{"id":12},"contracts/ClipperCommonExchange.sol":{"id":13},"contracts/interfaces/WrapperContractInterface.sol":{"id":14}}}
